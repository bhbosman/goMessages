// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0-devel
// 	protoc        v3.12.3
// source: valr/valr.proto

package stream

import (
	stream "github.com/bhbosman/gocommon/stream"
	goerrors "github.com/bhbosman/goerrors"
	goprotoextra "github.com/bhbosman/goprotoextra"
	proto "google.golang.org/protobuf/proto"
)

// TypeCode generated from: "Subscriptions"
const SubscriptionsTypeCode uint32 = 3070870004

// TypeCode generated from: "Subscribe"
const SubscribeTypeCode uint32 = 3930643869

// true
// true
// false
// false
type SubscriptionsWrapper struct {
	goprotoextra.BaseMessageWrapper
	Data *Subscriptions
}

func (self *SubscriptionsWrapper) Message() interface{} {
	return self.Data
}

func (self *SubscriptionsWrapper) messageWrapper() interface{} {
	return self
}

func NewSubscriptionsWrapper(
	data *Subscriptions) *SubscriptionsWrapper {
	return &SubscriptionsWrapper{
		BaseMessageWrapper: goprotoextra.NewBaseMessageWrapper(),
		Data:               data,
	}
}

var _ = stream.Register(
	SubscriptionsTypeCode,
	stream.TypeCodeData{
		CreateMessage: func() proto.Message {
			return &Subscriptions{}
		},
		CreateWrapper: func(
			data proto.Message) (goprotoextra.IMessageWrapper, error) {
			if msg, ok := data.(*Subscriptions); ok {
				return NewSubscriptionsWrapper(
					msg), nil
			}
			return nil, goerrors.InvalidParam
		}})

// true
// true
// false
// false
type SubscribeWrapper struct {
	goprotoextra.BaseMessageWrapper
	Data *Subscribe
}

func (self *SubscribeWrapper) Message() interface{} {
	return self.Data
}

func (self *SubscribeWrapper) messageWrapper() interface{} {
	return self
}

func NewSubscribeWrapper(
	data *Subscribe) *SubscribeWrapper {
	return &SubscribeWrapper{
		BaseMessageWrapper: goprotoextra.NewBaseMessageWrapper(),
		Data:               data,
	}
}

var _ = stream.Register(
	SubscribeTypeCode,
	stream.TypeCodeData{
		CreateMessage: func() proto.Message {
			return &Subscribe{}
		},
		CreateWrapper: func(
			data proto.Message) (goprotoextra.IMessageWrapper, error) {
			if msg, ok := data.(*Subscribe); ok {
				return NewSubscribeWrapper(
					msg), nil
			}
			return nil, goerrors.InvalidParam
		}})

func (self *Subscriptions) TypeCode() uint32 {
	return SubscriptionsTypeCode
}

func (self *Subscribe) TypeCode() uint32 {
	return SubscribeTypeCode
}
