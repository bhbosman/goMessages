// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0-devel
// 	protoc        v5.28.0
// source: marketData/marketData.proto

// TCVersion Generator: 1
package stream

import (
	stream "github.com/bhbosman/gocommon/stream"
	goerrors "github.com/bhbosman/goerrors"
	goprotoextra "github.com/bhbosman/goprotoextra"
	proto "google.golang.org/protobuf/proto"
)

// TypeCode generated from: "Order"
const OrderTypeCode uint32 = 887667868

// TypeCode generated from: "Point"
const PointTypeCode uint32 = 1986321440

// TypeCode generated from: "PublishTop5"
const PublishTop5TypeCode uint32 = 2990202154

// true
// true
// false
// false
type OrderWrapper struct {
	goprotoextra.BaseMessageWrapper
	Data *Order
}

func (self *OrderWrapper) Message() interface{} {
	return self.Data
}

func (self *OrderWrapper) messageWrapper() interface{} {
	return self
}

func NewOrderWrapper(
	data *Order) *OrderWrapper {
	return &OrderWrapper{
		BaseMessageWrapper: goprotoextra.NewBaseMessageWrapper(),
		Data:               data,
	}
}

var _ = stream.Register(
	OrderTypeCode,
	stream.TypeCodeData{
		CreateMessage: func() proto.Message {
			return &Order{}
		},
		CreateWrapper: func(
			data proto.Message) (goprotoextra.IMessageWrapper, error) {
			if msg, ok := data.(*Order); ok {
				return NewOrderWrapper(
					msg), nil
			}
			return nil, goerrors.InvalidParam
		}})

// true
// true
// false
// false
type PointWrapper struct {
	goprotoextra.BaseMessageWrapper
	Data *Point
}

func (self *PointWrapper) Message() interface{} {
	return self.Data
}

func (self *PointWrapper) messageWrapper() interface{} {
	return self
}

func NewPointWrapper(
	data *Point) *PointWrapper {
	return &PointWrapper{
		BaseMessageWrapper: goprotoextra.NewBaseMessageWrapper(),
		Data:               data,
	}
}

var _ = stream.Register(
	PointTypeCode,
	stream.TypeCodeData{
		CreateMessage: func() proto.Message {
			return &Point{}
		},
		CreateWrapper: func(
			data proto.Message) (goprotoextra.IMessageWrapper, error) {
			if msg, ok := data.(*Point); ok {
				return NewPointWrapper(
					msg), nil
			}
			return nil, goerrors.InvalidParam
		}})

// true
// true
// false
// false
type PublishTop5Wrapper struct {
	goprotoextra.BaseMessageWrapper
	Data *PublishTop5
}

func (self *PublishTop5Wrapper) Message() interface{} {
	return self.Data
}

func (self *PublishTop5Wrapper) messageWrapper() interface{} {
	return self
}

func NewPublishTop5Wrapper(
	data *PublishTop5) *PublishTop5Wrapper {
	return &PublishTop5Wrapper{
		BaseMessageWrapper: goprotoextra.NewBaseMessageWrapper(),
		Data:               data,
	}
}

var _ = stream.Register(
	PublishTop5TypeCode,
	stream.TypeCodeData{
		CreateMessage: func() proto.Message {
			return &PublishTop5{}
		},
		CreateWrapper: func(
			data proto.Message) (goprotoextra.IMessageWrapper, error) {
			if msg, ok := data.(*PublishTop5); ok {
				return NewPublishTop5Wrapper(
					msg), nil
			}
			return nil, goerrors.InvalidParam
		}})

func (self *Order) TypeCode() uint32 {
	return OrderTypeCode
}

func (self *Point) TypeCode() uint32 {
	return PointTypeCode
}

func (self *PublishTop5) TypeCode() uint32 {
	return PublishTop5TypeCode
}
