// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: marketData/marketData.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from marketData/marketData.proto</summary>
public static partial class MarketDataReflection {

  #region Descriptor
  /// <summary>File descriptor for marketData/marketData.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static MarketDataReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "ChttYXJrZXREYXRhL21hcmtldERhdGEucHJvdG8aG2dvb2dsZS9wcm90b2J1",
          "Zi9lbXB0eS5wcm90byImCgVQb2ludBINCgVQcmljZRgBIAEoARIOCgZ2b2x1",
          "bWUYAiABKAEiyQEKC1B1Ymxpc2hUb3A1EhIKCkluc3RydW1lbnQYASABKAkS",
          "DgoGU3ByZWFkGAIgASgBEhcKD1NvdXJjZVRpbWVTdGFtcBgDIAEoAxIaChJT",
          "b3VyY2VNZXNzYWdlQ291bnQYBCABKAMSEwoLVXBkYXRlQ291bnQYBSABKAMS",
          "EwoDQmlkGAYgAygLMgYuUG9pbnQSEwoDQXNrGAcgAygLMgYuUG9pbnQSDgoG",
          "U291cmNlGAggASgJEhIKClVuaXF1ZU5hbWUYCSABKAkyOgoJTXlTZXJ2aWNl",
          "Ei0KBUNoZWNrEgwuUHVibGlzaFRvcDUaFi5nb29nbGUucHJvdG9idWYuRW1w",
          "dHlCCVoHL3N0cmVhbWIGcHJvdG8z"));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { global::Google.Protobuf.WellKnownTypes.EmptyReflection.Descriptor, },
        new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::Point), global::Point.Parser, new[]{ "Price", "Volume" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PublishTop5), global::PublishTop5.Parser, new[]{ "Instrument", "Spread", "SourceTimeStamp", "SourceMessageCount", "UpdateCount", "Bid", "Ask", "Source", "UniqueName" }, null, null, null, null)
        }));
  }
  #endregion

}
#region Messages
public sealed partial class Point : pb::IMessage<Point>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<Point> _parser = new pb::MessageParser<Point>(() => new Point());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<Point> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MarketDataReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Point() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Point(Point other) : this() {
    price_ = other.price_;
    volume_ = other.volume_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Point Clone() {
    return new Point(this);
  }

  /// <summary>Field number for the "Price" field.</summary>
  public const int PriceFieldNumber = 1;
  private double price_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double Price {
    get { return price_; }
    set {
      price_ = value;
    }
  }

  /// <summary>Field number for the "volume" field.</summary>
  public const int VolumeFieldNumber = 2;
  private double volume_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double Volume {
    get { return volume_; }
    set {
      volume_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as Point);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(Point other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Price, other.Price)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Volume, other.Volume)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Price != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Price);
    if (Volume != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Volume);
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (Price != 0D) {
      output.WriteRawTag(9);
      output.WriteDouble(Price);
    }
    if (Volume != 0D) {
      output.WriteRawTag(17);
      output.WriteDouble(Volume);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (Price != 0D) {
      output.WriteRawTag(9);
      output.WriteDouble(Price);
    }
    if (Volume != 0D) {
      output.WriteRawTag(17);
      output.WriteDouble(Volume);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Price != 0D) {
      size += 1 + 8;
    }
    if (Volume != 0D) {
      size += 1 + 8;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(Point other) {
    if (other == null) {
      return;
    }
    if (other.Price != 0D) {
      Price = other.Price;
    }
    if (other.Volume != 0D) {
      Volume = other.Volume;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 9: {
          Price = input.ReadDouble();
          break;
        }
        case 17: {
          Volume = input.ReadDouble();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 9: {
          Price = input.ReadDouble();
          break;
        }
        case 17: {
          Volume = input.ReadDouble();
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class PublishTop5 : pb::IMessage<PublishTop5>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<PublishTop5> _parser = new pb::MessageParser<PublishTop5>(() => new PublishTop5());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PublishTop5> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MarketDataReflection.Descriptor.MessageTypes[1]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PublishTop5() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PublishTop5(PublishTop5 other) : this() {
    instrument_ = other.instrument_;
    spread_ = other.spread_;
    sourceTimeStamp_ = other.sourceTimeStamp_;
    sourceMessageCount_ = other.sourceMessageCount_;
    updateCount_ = other.updateCount_;
    bid_ = other.bid_.Clone();
    ask_ = other.ask_.Clone();
    source_ = other.source_;
    uniqueName_ = other.uniqueName_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PublishTop5 Clone() {
    return new PublishTop5(this);
  }

  /// <summary>Field number for the "Instrument" field.</summary>
  public const int InstrumentFieldNumber = 1;
  private string instrument_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Instrument {
    get { return instrument_; }
    set {
      instrument_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "Spread" field.</summary>
  public const int SpreadFieldNumber = 2;
  private double spread_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double Spread {
    get { return spread_; }
    set {
      spread_ = value;
    }
  }

  /// <summary>Field number for the "SourceTimeStamp" field.</summary>
  public const int SourceTimeStampFieldNumber = 3;
  private long sourceTimeStamp_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long SourceTimeStamp {
    get { return sourceTimeStamp_; }
    set {
      sourceTimeStamp_ = value;
    }
  }

  /// <summary>Field number for the "SourceMessageCount" field.</summary>
  public const int SourceMessageCountFieldNumber = 4;
  private long sourceMessageCount_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long SourceMessageCount {
    get { return sourceMessageCount_; }
    set {
      sourceMessageCount_ = value;
    }
  }

  /// <summary>Field number for the "UpdateCount" field.</summary>
  public const int UpdateCountFieldNumber = 5;
  private long updateCount_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long UpdateCount {
    get { return updateCount_; }
    set {
      updateCount_ = value;
    }
  }

  /// <summary>Field number for the "Bid" field.</summary>
  public const int BidFieldNumber = 6;
  private static readonly pb::FieldCodec<global::Point> _repeated_bid_codec
      = pb::FieldCodec.ForMessage(50, global::Point.Parser);
  private readonly pbc::RepeatedField<global::Point> bid_ = new pbc::RepeatedField<global::Point>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::Point> Bid {
    get { return bid_; }
  }

  /// <summary>Field number for the "Ask" field.</summary>
  public const int AskFieldNumber = 7;
  private static readonly pb::FieldCodec<global::Point> _repeated_ask_codec
      = pb::FieldCodec.ForMessage(58, global::Point.Parser);
  private readonly pbc::RepeatedField<global::Point> ask_ = new pbc::RepeatedField<global::Point>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::Point> Ask {
    get { return ask_; }
  }

  /// <summary>Field number for the "Source" field.</summary>
  public const int SourceFieldNumber = 8;
  private string source_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Source {
    get { return source_; }
    set {
      source_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "UniqueName" field.</summary>
  public const int UniqueNameFieldNumber = 9;
  private string uniqueName_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string UniqueName {
    get { return uniqueName_; }
    set {
      uniqueName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PublishTop5);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PublishTop5 other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Instrument != other.Instrument) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Spread, other.Spread)) return false;
    if (SourceTimeStamp != other.SourceTimeStamp) return false;
    if (SourceMessageCount != other.SourceMessageCount) return false;
    if (UpdateCount != other.UpdateCount) return false;
    if(!bid_.Equals(other.bid_)) return false;
    if(!ask_.Equals(other.ask_)) return false;
    if (Source != other.Source) return false;
    if (UniqueName != other.UniqueName) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Instrument.Length != 0) hash ^= Instrument.GetHashCode();
    if (Spread != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Spread);
    if (SourceTimeStamp != 0L) hash ^= SourceTimeStamp.GetHashCode();
    if (SourceMessageCount != 0L) hash ^= SourceMessageCount.GetHashCode();
    if (UpdateCount != 0L) hash ^= UpdateCount.GetHashCode();
    hash ^= bid_.GetHashCode();
    hash ^= ask_.GetHashCode();
    if (Source.Length != 0) hash ^= Source.GetHashCode();
    if (UniqueName.Length != 0) hash ^= UniqueName.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (Instrument.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Instrument);
    }
    if (Spread != 0D) {
      output.WriteRawTag(17);
      output.WriteDouble(Spread);
    }
    if (SourceTimeStamp != 0L) {
      output.WriteRawTag(24);
      output.WriteInt64(SourceTimeStamp);
    }
    if (SourceMessageCount != 0L) {
      output.WriteRawTag(32);
      output.WriteInt64(SourceMessageCount);
    }
    if (UpdateCount != 0L) {
      output.WriteRawTag(40);
      output.WriteInt64(UpdateCount);
    }
    bid_.WriteTo(output, _repeated_bid_codec);
    ask_.WriteTo(output, _repeated_ask_codec);
    if (Source.Length != 0) {
      output.WriteRawTag(66);
      output.WriteString(Source);
    }
    if (UniqueName.Length != 0) {
      output.WriteRawTag(74);
      output.WriteString(UniqueName);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (Instrument.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Instrument);
    }
    if (Spread != 0D) {
      output.WriteRawTag(17);
      output.WriteDouble(Spread);
    }
    if (SourceTimeStamp != 0L) {
      output.WriteRawTag(24);
      output.WriteInt64(SourceTimeStamp);
    }
    if (SourceMessageCount != 0L) {
      output.WriteRawTag(32);
      output.WriteInt64(SourceMessageCount);
    }
    if (UpdateCount != 0L) {
      output.WriteRawTag(40);
      output.WriteInt64(UpdateCount);
    }
    bid_.WriteTo(ref output, _repeated_bid_codec);
    ask_.WriteTo(ref output, _repeated_ask_codec);
    if (Source.Length != 0) {
      output.WriteRawTag(66);
      output.WriteString(Source);
    }
    if (UniqueName.Length != 0) {
      output.WriteRawTag(74);
      output.WriteString(UniqueName);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Instrument.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Instrument);
    }
    if (Spread != 0D) {
      size += 1 + 8;
    }
    if (SourceTimeStamp != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(SourceTimeStamp);
    }
    if (SourceMessageCount != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(SourceMessageCount);
    }
    if (UpdateCount != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(UpdateCount);
    }
    size += bid_.CalculateSize(_repeated_bid_codec);
    size += ask_.CalculateSize(_repeated_ask_codec);
    if (Source.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Source);
    }
    if (UniqueName.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(UniqueName);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PublishTop5 other) {
    if (other == null) {
      return;
    }
    if (other.Instrument.Length != 0) {
      Instrument = other.Instrument;
    }
    if (other.Spread != 0D) {
      Spread = other.Spread;
    }
    if (other.SourceTimeStamp != 0L) {
      SourceTimeStamp = other.SourceTimeStamp;
    }
    if (other.SourceMessageCount != 0L) {
      SourceMessageCount = other.SourceMessageCount;
    }
    if (other.UpdateCount != 0L) {
      UpdateCount = other.UpdateCount;
    }
    bid_.Add(other.bid_);
    ask_.Add(other.ask_);
    if (other.Source.Length != 0) {
      Source = other.Source;
    }
    if (other.UniqueName.Length != 0) {
      UniqueName = other.UniqueName;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Instrument = input.ReadString();
          break;
        }
        case 17: {
          Spread = input.ReadDouble();
          break;
        }
        case 24: {
          SourceTimeStamp = input.ReadInt64();
          break;
        }
        case 32: {
          SourceMessageCount = input.ReadInt64();
          break;
        }
        case 40: {
          UpdateCount = input.ReadInt64();
          break;
        }
        case 50: {
          bid_.AddEntriesFrom(input, _repeated_bid_codec);
          break;
        }
        case 58: {
          ask_.AddEntriesFrom(input, _repeated_ask_codec);
          break;
        }
        case 66: {
          Source = input.ReadString();
          break;
        }
        case 74: {
          UniqueName = input.ReadString();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 10: {
          Instrument = input.ReadString();
          break;
        }
        case 17: {
          Spread = input.ReadDouble();
          break;
        }
        case 24: {
          SourceTimeStamp = input.ReadInt64();
          break;
        }
        case 32: {
          SourceMessageCount = input.ReadInt64();
          break;
        }
        case 40: {
          UpdateCount = input.ReadInt64();
          break;
        }
        case 50: {
          bid_.AddEntriesFrom(ref input, _repeated_bid_codec);
          break;
        }
        case 58: {
          ask_.AddEntriesFrom(ref input, _repeated_ask_codec);
          break;
        }
        case 66: {
          Source = input.ReadString();
          break;
        }
        case 74: {
          UniqueName = input.ReadString();
          break;
        }
      }
    }
  }
  #endif

}

#endregion


#endregion Designer generated code
