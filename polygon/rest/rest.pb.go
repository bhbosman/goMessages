// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.12.3
// source: polygon/rest.proto

package rest

import (
	context "context"
	stream "github.com/bhbosman/gocommon/stream"
	"github.com/bhbosman/goerrors"
	goprotoextra "github.com/bhbosman/goprotoextra"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/golang/protobuf/protoc-gen-go/descriptor"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	proto1 "google.golang.org/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type GetErrorResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status       string `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	ErrorMessage string `protobuf:"bytes,2,opt,name=errorMessage,proto3" json:"errorMessage,omitempty"`
	RequestId    string `protobuf:"bytes,3,opt,name=requestId,proto3" json:"requestId,omitempty"`
}

func (x *GetErrorResponse) Reset() {
	*x = GetErrorResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_polygon_rest_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetErrorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetErrorResponse) ProtoMessage() {}

func (x *GetErrorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_polygon_rest_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetErrorResponse.ProtoReflect.Descriptor instead.
func (*GetErrorResponse) Descriptor() ([]byte, []int) {
	return file_polygon_rest_proto_rawDescGZIP(), []int{0}
}

func (x *GetErrorResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *GetErrorResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *GetErrorResponse) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (self *GetErrorResponse) TypeCode() uint32 {
	return GetErrorResponseTypeCode
}

//https://polygon.io/docs/#get_v2_reference_tickers_anchor
type GetTickerQueryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sort    string `protobuf:"bytes,1,opt,name=sort,proto3" json:"sort,omitempty"`
	Type    string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Market  string `protobuf:"bytes,3,opt,name=market,proto3" json:"market,omitempty"`
	Locale  string `protobuf:"bytes,4,opt,name=locale,proto3" json:"locale,omitempty"`
	Perpage int64  `protobuf:"varint,5,opt,name=perpage,proto3" json:"perpage,omitempty"`
	Page    int64  `protobuf:"varint,6,opt,name=page,proto3" json:"page,omitempty"`
	Active  bool   `protobuf:"varint,7,opt,name=active,proto3" json:"active,omitempty"`
}

func (x *GetTickerQueryRequest) Reset() {
	*x = GetTickerQueryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_polygon_rest_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTickerQueryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTickerQueryRequest) ProtoMessage() {}

func (x *GetTickerQueryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_polygon_rest_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTickerQueryRequest.ProtoReflect.Descriptor instead.
func (*GetTickerQueryRequest) Descriptor() ([]byte, []int) {
	return file_polygon_rest_proto_rawDescGZIP(), []int{1}
}

func (x *GetTickerQueryRequest) GetSort() string {
	if x != nil {
		return x.Sort
	}
	return ""
}

func (x *GetTickerQueryRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *GetTickerQueryRequest) GetMarket() string {
	if x != nil {
		return x.Market
	}
	return ""
}

func (x *GetTickerQueryRequest) GetLocale() string {
	if x != nil {
		return x.Locale
	}
	return ""
}

func (x *GetTickerQueryRequest) GetPerpage() int64 {
	if x != nil {
		return x.Perpage
	}
	return 0
}

func (x *GetTickerQueryRequest) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *GetTickerQueryRequest) GetActive() bool {
	if x != nil {
		return x.Active
	}
	return false
}

func (self *GetTickerQueryRequest) TypeCode() uint32 {
	return GetTickerQueryRequestTypeCode
}

type Symbol struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ticker      string               `protobuf:"bytes,1,opt,name=ticker,proto3" json:"ticker,omitempty"`
	Name        string               `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Market      string               `protobuf:"bytes,3,opt,name=market,proto3" json:"market,omitempty"`
	Locale      string               `protobuf:"bytes,4,opt,name=locale,proto3" json:"locale,omitempty"`
	Currency    string               `protobuf:"bytes,5,opt,name=currency,proto3" json:"currency,omitempty"`
	Active      bool                 `protobuf:"varint,6,opt,name=active,proto3" json:"active,omitempty"`
	PrimaryExch string               `protobuf:"bytes,7,opt,name=primaryExch,proto3" json:"primaryExch,omitempty"`
	Type        string               `protobuf:"bytes,8,opt,name=type,proto3" json:"type,omitempty"`
	Codes       map[string]string    `protobuf:"bytes,9,rep,name=codes,proto3" json:"codes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Updated     *timestamp.Timestamp `protobuf:"bytes,10,opt,name=updated,proto3" json:"updated,omitempty"`
	Url         string               `protobuf:"bytes,11,opt,name=url,proto3" json:"url,omitempty"`
	Attrs       map[string]string    `protobuf:"bytes,12,rep,name=attrs,proto3" json:"attrs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Symbol) Reset() {
	*x = Symbol{}
	if protoimpl.UnsafeEnabled {
		mi := &file_polygon_rest_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Symbol) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Symbol) ProtoMessage() {}

func (x *Symbol) ProtoReflect() protoreflect.Message {
	mi := &file_polygon_rest_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Symbol.ProtoReflect.Descriptor instead.
func (*Symbol) Descriptor() ([]byte, []int) {
	return file_polygon_rest_proto_rawDescGZIP(), []int{2}
}

func (x *Symbol) GetTicker() string {
	if x != nil {
		return x.Ticker
	}
	return ""
}

func (x *Symbol) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Symbol) GetMarket() string {
	if x != nil {
		return x.Market
	}
	return ""
}

func (x *Symbol) GetLocale() string {
	if x != nil {
		return x.Locale
	}
	return ""
}

func (x *Symbol) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *Symbol) GetActive() bool {
	if x != nil {
		return x.Active
	}
	return false
}

func (x *Symbol) GetPrimaryExch() string {
	if x != nil {
		return x.PrimaryExch
	}
	return ""
}

func (x *Symbol) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Symbol) GetCodes() map[string]string {
	if x != nil {
		return x.Codes
	}
	return nil
}

func (x *Symbol) GetUpdated() *timestamp.Timestamp {
	if x != nil {
		return x.Updated
	}
	return nil
}

func (x *Symbol) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *Symbol) GetAttrs() map[string]string {
	if x != nil {
		return x.Attrs
	}
	return nil
}

func (self *Symbol) TypeCode() uint32 {
	return SymbolTypeCode
}

type GetTickerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Symbols []*Symbol `protobuf:"bytes,1,rep,name=Symbols,proto3" json:"Symbols,omitempty"`
}

func (x *GetTickerResponse) Reset() {
	*x = GetTickerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_polygon_rest_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTickerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTickerResponse) ProtoMessage() {}

func (x *GetTickerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_polygon_rest_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTickerResponse.ProtoReflect.Descriptor instead.
func (*GetTickerResponse) Descriptor() ([]byte, []int) {
	return file_polygon_rest_proto_rawDescGZIP(), []int{3}
}

func (x *GetTickerResponse) GetSymbols() []*Symbol {
	if x != nil {
		return x.Symbols
	}
	return nil
}

func (self *GetTickerResponse) TypeCode() uint32 {
	return GetTickerResponseTypeCode
}

//https://polygon.io/docs/#get_v2_reference_types_anchor
type GetTickerTypesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Types      map[string]string `protobuf:"bytes,1,rep,name=types,proto3" json:"types,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	IndexTypes map[string]string `protobuf:"bytes,2,rep,name=indexTypes,proto3" json:"indexTypes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GetTickerTypesResponse) Reset() {
	*x = GetTickerTypesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_polygon_rest_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTickerTypesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTickerTypesResponse) ProtoMessage() {}

func (x *GetTickerTypesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_polygon_rest_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTickerTypesResponse.ProtoReflect.Descriptor instead.
func (*GetTickerTypesResponse) Descriptor() ([]byte, []int) {
	return file_polygon_rest_proto_rawDescGZIP(), []int{4}
}

func (x *GetTickerTypesResponse) GetTypes() map[string]string {
	if x != nil {
		return x.Types
	}
	return nil
}

func (x *GetTickerTypesResponse) GetIndexTypes() map[string]string {
	if x != nil {
		return x.IndexTypes
	}
	return nil
}

func (self *GetTickerTypesResponse) TypeCode() uint32 {
	return GetTickerTypesResponseTypeCode
}

//https://polygon.io/docs/#get_v1_meta_symbols__symbol__company_anchor
type GetTickerDetailsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Logo        string   `protobuf:"bytes,1,opt,name=logo,proto3" json:"logo,omitempty"`
	Exchange    string   `protobuf:"bytes,2,opt,name=exchange,proto3" json:"exchange,omitempty"`
	Name        string   `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Symbol      string   `protobuf:"bytes,4,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Cik         string   `protobuf:"bytes,5,opt,name=cik,proto3" json:"cik,omitempty"`
	Bloomberg   string   `protobuf:"bytes,6,opt,name=bloomberg,proto3" json:"bloomberg,omitempty"`
	Lei         string   `protobuf:"bytes,7,opt,name=lei,proto3" json:"lei,omitempty"`
	Sic         int64    `protobuf:"varint,8,opt,name=sic,proto3" json:"sic,omitempty"`
	Country     string   `protobuf:"bytes,9,opt,name=country,proto3" json:"country,omitempty"`
	Industry    string   `protobuf:"bytes,10,opt,name=industry,proto3" json:"industry,omitempty"`
	Sector      string   `protobuf:"bytes,11,opt,name=sector,proto3" json:"sector,omitempty"`
	Marketcap   int64    `protobuf:"varint,12,opt,name=marketcap,proto3" json:"marketcap,omitempty"`
	Employees   int64    `protobuf:"varint,13,opt,name=employees,proto3" json:"employees,omitempty"`
	Phone       string   `protobuf:"bytes,14,opt,name=phone,proto3" json:"phone,omitempty"`
	Ceo         string   `protobuf:"bytes,15,opt,name=ceo,proto3" json:"ceo,omitempty"`
	Url         string   `protobuf:"bytes,16,opt,name=url,proto3" json:"url,omitempty"`
	Description string   `protobuf:"bytes,17,opt,name=description,proto3" json:"description,omitempty"`
	Similar     []string `protobuf:"bytes,18,rep,name=similar,proto3" json:"similar,omitempty"`
	Tags        []string `protobuf:"bytes,19,rep,name=tags,proto3" json:"tags,omitempty"`
	Listdate    string   `protobuf:"bytes,20,opt,name=listdate,proto3" json:"listdate,omitempty"`
	Updated     string   `protobuf:"bytes,21,opt,name=updated,proto3" json:"updated,omitempty"`
}

func (x *GetTickerDetailsResponse) Reset() {
	*x = GetTickerDetailsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_polygon_rest_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTickerDetailsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTickerDetailsResponse) ProtoMessage() {}

func (x *GetTickerDetailsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_polygon_rest_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTickerDetailsResponse.ProtoReflect.Descriptor instead.
func (*GetTickerDetailsResponse) Descriptor() ([]byte, []int) {
	return file_polygon_rest_proto_rawDescGZIP(), []int{5}
}

func (x *GetTickerDetailsResponse) GetLogo() string {
	if x != nil {
		return x.Logo
	}
	return ""
}

func (x *GetTickerDetailsResponse) GetExchange() string {
	if x != nil {
		return x.Exchange
	}
	return ""
}

func (x *GetTickerDetailsResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetTickerDetailsResponse) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *GetTickerDetailsResponse) GetCik() string {
	if x != nil {
		return x.Cik
	}
	return ""
}

func (x *GetTickerDetailsResponse) GetBloomberg() string {
	if x != nil {
		return x.Bloomberg
	}
	return ""
}

func (x *GetTickerDetailsResponse) GetLei() string {
	if x != nil {
		return x.Lei
	}
	return ""
}

func (x *GetTickerDetailsResponse) GetSic() int64 {
	if x != nil {
		return x.Sic
	}
	return 0
}

func (x *GetTickerDetailsResponse) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *GetTickerDetailsResponse) GetIndustry() string {
	if x != nil {
		return x.Industry
	}
	return ""
}

func (x *GetTickerDetailsResponse) GetSector() string {
	if x != nil {
		return x.Sector
	}
	return ""
}

func (x *GetTickerDetailsResponse) GetMarketcap() int64 {
	if x != nil {
		return x.Marketcap
	}
	return 0
}

func (x *GetTickerDetailsResponse) GetEmployees() int64 {
	if x != nil {
		return x.Employees
	}
	return 0
}

func (x *GetTickerDetailsResponse) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *GetTickerDetailsResponse) GetCeo() string {
	if x != nil {
		return x.Ceo
	}
	return ""
}

func (x *GetTickerDetailsResponse) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *GetTickerDetailsResponse) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *GetTickerDetailsResponse) GetSimilar() []string {
	if x != nil {
		return x.Similar
	}
	return nil
}

func (x *GetTickerDetailsResponse) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *GetTickerDetailsResponse) GetListdate() string {
	if x != nil {
		return x.Listdate
	}
	return ""
}

func (x *GetTickerDetailsResponse) GetUpdated() string {
	if x != nil {
		return x.Updated
	}
	return ""
}

func (self *GetTickerDetailsResponse) TypeCode() uint32 {
	return GetTickerDetailsResponseTypeCode
}

//https://polygon.io/docs/#get_v1_meta_symbols__symbol__news_anchor
type GetTickerNewsQueryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Symbol  string `protobuf:"bytes,1,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Perpage int32  `protobuf:"varint,2,opt,name=perpage,proto3" json:"perpage,omitempty"`
	Page    int32  `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`
}

func (x *GetTickerNewsQueryRequest) Reset() {
	*x = GetTickerNewsQueryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_polygon_rest_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTickerNewsQueryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTickerNewsQueryRequest) ProtoMessage() {}

func (x *GetTickerNewsQueryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_polygon_rest_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTickerNewsQueryRequest.ProtoReflect.Descriptor instead.
func (*GetTickerNewsQueryRequest) Descriptor() ([]byte, []int) {
	return file_polygon_rest_proto_rawDescGZIP(), []int{6}
}

func (x *GetTickerNewsQueryRequest) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *GetTickerNewsQueryRequest) GetPerpage() int32 {
	if x != nil {
		return x.Perpage
	}
	return 0
}

func (x *GetTickerNewsQueryRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (self *GetTickerNewsQueryRequest) TypeCode() uint32 {
	return GetTickerNewsQueryRequestTypeCode
}

type News struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *News) Reset() {
	*x = News{}
	if protoimpl.UnsafeEnabled {
		mi := &file_polygon_rest_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *News) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*News) ProtoMessage() {}

func (x *News) ProtoReflect() protoreflect.Message {
	mi := &file_polygon_rest_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use News.ProtoReflect.Descriptor instead.
func (*News) Descriptor() ([]byte, []int) {
	return file_polygon_rest_proto_rawDescGZIP(), []int{7}
}

func (self *News) TypeCode() uint32 {
	return NewsTypeCode
}

type GetTickerNewsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	News []*News `protobuf:"bytes,1,rep,name=News,proto3" json:"News,omitempty"`
}

func (x *GetTickerNewsResponse) Reset() {
	*x = GetTickerNewsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_polygon_rest_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTickerNewsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTickerNewsResponse) ProtoMessage() {}

func (x *GetTickerNewsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_polygon_rest_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTickerNewsResponse.ProtoReflect.Descriptor instead.
func (*GetTickerNewsResponse) Descriptor() ([]byte, []int) {
	return file_polygon_rest_proto_rawDescGZIP(), []int{8}
}

func (x *GetTickerNewsResponse) GetNews() []*News {
	if x != nil {
		return x.News
	}
	return nil
}

func (self *GetTickerNewsResponse) TypeCode() uint32 {
	return GetTickerNewsResponseTypeCode
}

//https://polygon.io/docs/#get_v2_reference_markets_anchor
type Market struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Market string `protobuf:"bytes,1,opt,name=market,proto3" json:"market,omitempty"`
	Desc   string `protobuf:"bytes,2,opt,name=desc,proto3" json:"desc,omitempty"`
}

func (x *Market) Reset() {
	*x = Market{}
	if protoimpl.UnsafeEnabled {
		mi := &file_polygon_rest_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Market) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Market) ProtoMessage() {}

func (x *Market) ProtoReflect() protoreflect.Message {
	mi := &file_polygon_rest_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Market.ProtoReflect.Descriptor instead.
func (*Market) Descriptor() ([]byte, []int) {
	return file_polygon_rest_proto_rawDescGZIP(), []int{9}
}

func (x *Market) GetMarket() string {
	if x != nil {
		return x.Market
	}
	return ""
}

func (x *Market) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (self *Market) TypeCode() uint32 {
	return MarketTypeCode
}

type GetMarketsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Markets []*Market `protobuf:"bytes,1,rep,name=Markets,proto3" json:"Markets,omitempty"`
}

func (x *GetMarketsResponse) Reset() {
	*x = GetMarketsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_polygon_rest_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMarketsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMarketsResponse) ProtoMessage() {}

func (x *GetMarketsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_polygon_rest_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMarketsResponse.ProtoReflect.Descriptor instead.
func (*GetMarketsResponse) Descriptor() ([]byte, []int) {
	return file_polygon_rest_proto_rawDescGZIP(), []int{10}
}

func (x *GetMarketsResponse) GetMarkets() []*Market {
	if x != nil {
		return x.Markets
	}
	return nil
}

func (self *GetMarketsResponse) TypeCode() uint32 {
	return GetMarketsResponseTypeCode
}

//https://polygon.io/docs/#get_v2_reference_locales_anchor
type Locale struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Locale string `protobuf:"bytes,1,opt,name=locale,proto3" json:"locale,omitempty"`
	Name   string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *Locale) Reset() {
	*x = Locale{}
	if protoimpl.UnsafeEnabled {
		mi := &file_polygon_rest_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Locale) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Locale) ProtoMessage() {}

func (x *Locale) ProtoReflect() protoreflect.Message {
	mi := &file_polygon_rest_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Locale.ProtoReflect.Descriptor instead.
func (*Locale) Descriptor() ([]byte, []int) {
	return file_polygon_rest_proto_rawDescGZIP(), []int{11}
}

func (x *Locale) GetLocale() string {
	if x != nil {
		return x.Locale
	}
	return ""
}

func (x *Locale) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (self *Locale) TypeCode() uint32 {
	return LocaleTypeCode
}

type GetLocalesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Locales []*Locale `protobuf:"bytes,1,rep,name=Locales,proto3" json:"Locales,omitempty"`
}

func (x *GetLocalesResponse) Reset() {
	*x = GetLocalesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_polygon_rest_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLocalesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLocalesResponse) ProtoMessage() {}

func (x *GetLocalesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_polygon_rest_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLocalesResponse.ProtoReflect.Descriptor instead.
func (*GetLocalesResponse) Descriptor() ([]byte, []int) {
	return file_polygon_rest_proto_rawDescGZIP(), []int{12}
}

func (x *GetLocalesResponse) GetLocales() []*Locale {
	if x != nil {
		return x.Locales
	}
	return nil
}

func (self *GetLocalesResponse) TypeCode() uint32 {
	return GetLocalesResponseTypeCode
}

//https://polygon.io/docs/#get_v2_reference_splits__symbol__anchor
type Split struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ticker       string  `protobuf:"bytes,1,opt,name=ticker,proto3" json:"ticker,omitempty"`
	ExDate       string  `protobuf:"bytes,2,opt,name=exDate,proto3" json:"exDate,omitempty"`
	PaymentDate  string  `protobuf:"bytes,3,opt,name=paymentDate,proto3" json:"paymentDate,omitempty"`
	RecordDate   string  `protobuf:"bytes,4,opt,name=recordDate,proto3" json:"recordDate,omitempty"`
	DeclaredDate string  `protobuf:"bytes,5,opt,name=declaredDate,proto3" json:"declaredDate,omitempty"`
	Ratio        float64 `protobuf:"fixed64,6,opt,name=ratio,proto3" json:"ratio,omitempty"`
	Tofactor     float64 `protobuf:"fixed64,7,opt,name=tofactor,proto3" json:"tofactor,omitempty"`
	Forfactor    float64 `protobuf:"fixed64,8,opt,name=forfactor,proto3" json:"forfactor,omitempty"`
}

func (x *Split) Reset() {
	*x = Split{}
	if protoimpl.UnsafeEnabled {
		mi := &file_polygon_rest_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Split) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Split) ProtoMessage() {}

func (x *Split) ProtoReflect() protoreflect.Message {
	mi := &file_polygon_rest_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Split.ProtoReflect.Descriptor instead.
func (*Split) Descriptor() ([]byte, []int) {
	return file_polygon_rest_proto_rawDescGZIP(), []int{13}
}

func (x *Split) GetTicker() string {
	if x != nil {
		return x.Ticker
	}
	return ""
}

func (x *Split) GetExDate() string {
	if x != nil {
		return x.ExDate
	}
	return ""
}

func (x *Split) GetPaymentDate() string {
	if x != nil {
		return x.PaymentDate
	}
	return ""
}

func (x *Split) GetRecordDate() string {
	if x != nil {
		return x.RecordDate
	}
	return ""
}

func (x *Split) GetDeclaredDate() string {
	if x != nil {
		return x.DeclaredDate
	}
	return ""
}

func (x *Split) GetRatio() float64 {
	if x != nil {
		return x.Ratio
	}
	return 0
}

func (x *Split) GetTofactor() float64 {
	if x != nil {
		return x.Tofactor
	}
	return 0
}

func (x *Split) GetForfactor() float64 {
	if x != nil {
		return x.Forfactor
	}
	return 0
}

func (self *Split) TypeCode() uint32 {
	return SplitTypeCode
}

type GetStockSplitsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Splits []*Split `protobuf:"bytes,1,rep,name=Splits,proto3" json:"Splits,omitempty"`
}

func (x *GetStockSplitsResponse) Reset() {
	*x = GetStockSplitsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_polygon_rest_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStockSplitsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStockSplitsResponse) ProtoMessage() {}

func (x *GetStockSplitsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_polygon_rest_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStockSplitsResponse.ProtoReflect.Descriptor instead.
func (*GetStockSplitsResponse) Descriptor() ([]byte, []int) {
	return file_polygon_rest_proto_rawDescGZIP(), []int{14}
}

func (x *GetStockSplitsResponse) GetSplits() []*Split {
	if x != nil {
		return x.Splits
	}
	return nil
}

func (self *GetStockSplitsResponse) TypeCode() uint32 {
	return GetStockSplitsResponseTypeCode
}

//https://polygon.io/docs/#get_v2_reference_dividends__symbol__anchor
type Dividend struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Symbol       string  `protobuf:"bytes,1,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Type         string  `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	ExDate       string  `protobuf:"bytes,3,opt,name=exDate,proto3" json:"exDate,omitempty"`
	PaymentDate  string  `protobuf:"bytes,4,opt,name=paymentDate,proto3" json:"paymentDate,omitempty"`
	RecordDate   string  `protobuf:"bytes,5,opt,name=recordDate,proto3" json:"recordDate,omitempty"`
	DeclaredDate string  `protobuf:"bytes,6,opt,name=declaredDate,proto3" json:"declaredDate,omitempty"`
	Amount       float64 `protobuf:"fixed64,7,opt,name=amount,proto3" json:"amount,omitempty"`
	Qualified    string  `protobuf:"bytes,8,opt,name=qualified,proto3" json:"qualified,omitempty"`
	Flag         string  `protobuf:"bytes,9,opt,name=flag,proto3" json:"flag,omitempty"`
}

func (x *Dividend) Reset() {
	*x = Dividend{}
	if protoimpl.UnsafeEnabled {
		mi := &file_polygon_rest_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Dividend) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Dividend) ProtoMessage() {}

func (x *Dividend) ProtoReflect() protoreflect.Message {
	mi := &file_polygon_rest_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Dividend.ProtoReflect.Descriptor instead.
func (*Dividend) Descriptor() ([]byte, []int) {
	return file_polygon_rest_proto_rawDescGZIP(), []int{15}
}

func (x *Dividend) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *Dividend) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Dividend) GetExDate() string {
	if x != nil {
		return x.ExDate
	}
	return ""
}

func (x *Dividend) GetPaymentDate() string {
	if x != nil {
		return x.PaymentDate
	}
	return ""
}

func (x *Dividend) GetRecordDate() string {
	if x != nil {
		return x.RecordDate
	}
	return ""
}

func (x *Dividend) GetDeclaredDate() string {
	if x != nil {
		return x.DeclaredDate
	}
	return ""
}

func (x *Dividend) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *Dividend) GetQualified() string {
	if x != nil {
		return x.Qualified
	}
	return ""
}

func (x *Dividend) GetFlag() string {
	if x != nil {
		return x.Flag
	}
	return ""
}

func (self *Dividend) TypeCode() uint32 {
	return DividendTypeCode
}

type GetStockDividendsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dividends []*Dividend `protobuf:"bytes,1,rep,name=Dividends,proto3" json:"Dividends,omitempty"`
}

func (x *GetStockDividendsResponse) Reset() {
	*x = GetStockDividendsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_polygon_rest_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStockDividendsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStockDividendsResponse) ProtoMessage() {}

func (x *GetStockDividendsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_polygon_rest_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStockDividendsResponse.ProtoReflect.Descriptor instead.
func (*GetStockDividendsResponse) Descriptor() ([]byte, []int) {
	return file_polygon_rest_proto_rawDescGZIP(), []int{16}
}

func (x *GetStockDividendsResponse) GetDividends() []*Dividend {
	if x != nil {
		return x.Dividends
	}
	return nil
}

func (self *GetStockDividendsResponse) TypeCode() uint32 {
	return GetStockDividendsResponseTypeCode
}

//https://polygon.io/docs/#get_v2_reference_financials__symbol__anchor
type GetStockFinancialsQueryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit int32  `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Type  string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Sort  string `protobuf:"bytes,3,opt,name=sort,proto3" json:"sort,omitempty"`
}

func (x *GetStockFinancialsQueryRequest) Reset() {
	*x = GetStockFinancialsQueryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_polygon_rest_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStockFinancialsQueryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStockFinancialsQueryRequest) ProtoMessage() {}

func (x *GetStockFinancialsQueryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_polygon_rest_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStockFinancialsQueryRequest.ProtoReflect.Descriptor instead.
func (*GetStockFinancialsQueryRequest) Descriptor() ([]byte, []int) {
	return file_polygon_rest_proto_rawDescGZIP(), []int{17}
}

func (x *GetStockFinancialsQueryRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetStockFinancialsQueryRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *GetStockFinancialsQueryRequest) GetSort() string {
	if x != nil {
		return x.Sort
	}
	return ""
}

func (self *GetStockFinancialsQueryRequest) TypeCode() uint32 {
	return GetStockFinancialsQueryRequestTypeCode
}

type Financial struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ticker                                                 string `protobuf:"bytes,1,opt,name=ticker,proto3" json:"ticker,omitempty"`
	Period                                                 string `protobuf:"bytes,2,opt,name=period,proto3" json:"period,omitempty"`
	CalendarDate                                           string `protobuf:"bytes,3,opt,name=calendarDate,proto3" json:"calendarDate,omitempty"`
	ReportPeriod                                           string `protobuf:"bytes,4,opt,name=reportPeriod,proto3" json:"reportPeriod,omitempty"`
	Updated                                                string `protobuf:"bytes,5,opt,name=updated,proto3" json:"updated,omitempty"`
	AccumulatedOtherComprehensiveIncome                    int64  `protobuf:"varint,6,opt,name=accumulatedOtherComprehensiveIncome,proto3" json:"accumulatedOtherComprehensiveIncome,omitempty"`
	Assets                                                 int64  `protobuf:"varint,7,opt,name=assets,proto3" json:"assets,omitempty"`
	AssetsAverage                                          int64  `protobuf:"varint,8,opt,name=assetsAverage,proto3" json:"assetsAverage,omitempty"`
	AssetsCurrent                                          int64  `protobuf:"varint,9,opt,name=assetsCurrent,proto3" json:"assetsCurrent,omitempty"`
	AssetTurnover                                          int64  `protobuf:"varint,10,opt,name=assetTurnover,proto3" json:"assetTurnover,omitempty"`
	AssetsNonCurrent                                       int64  `protobuf:"varint,11,opt,name=assetsNonCurrent,proto3" json:"assetsNonCurrent,omitempty"`
	BookValuePerShare                                      int64  `protobuf:"varint,12,opt,name=bookValuePerShare,proto3" json:"bookValuePerShare,omitempty"`
	CapitalExpenditure                                     int64  `protobuf:"varint,13,opt,name=capitalExpenditure,proto3" json:"capitalExpenditure,omitempty"`
	CashAndEquivalents                                     int64  `protobuf:"varint,14,opt,name=cashAndEquivalents,proto3" json:"cashAndEquivalents,omitempty"`
	CashAndEquivalentsUSD                                  int64  `protobuf:"varint,15,opt,name=cashAndEquivalentsUSD,proto3" json:"cashAndEquivalentsUSD,omitempty"`
	CostOfRevenue                                          int64  `protobuf:"varint,16,opt,name=costOfRevenue,proto3" json:"costOfRevenue,omitempty"`
	ConsolidatedIncome                                     int64  `protobuf:"varint,17,opt,name=consolidatedIncome,proto3" json:"consolidatedIncome,omitempty"`
	CurrentRatio                                           int64  `protobuf:"varint,18,opt,name=currentRatio,proto3" json:"currentRatio,omitempty"`
	DebtToEquityRatio                                      int64  `protobuf:"varint,19,opt,name=debtToEquityRatio,proto3" json:"debtToEquityRatio,omitempty"`
	Debt                                                   int64  `protobuf:"varint,20,opt,name=debt,proto3" json:"debt,omitempty"`
	DebtCurrent                                            int64  `protobuf:"varint,21,opt,name=debtCurrent,proto3" json:"debtCurrent,omitempty"`
	DebtNonCurrent                                         int64  `protobuf:"varint,22,opt,name=debtNonCurrent,proto3" json:"debtNonCurrent,omitempty"`
	DebtUSD                                                int64  `protobuf:"varint,23,opt,name=debtUSD,proto3" json:"debtUSD,omitempty"`
	DeferredRevenue                                        int64  `protobuf:"varint,24,opt,name=deferredRevenue,proto3" json:"deferredRevenue,omitempty"`
	DepreciationAmortizationAndAccretion                   int64  `protobuf:"varint,25,opt,name=depreciationAmortizationAndAccretion,proto3" json:"depreciationAmortizationAndAccretion,omitempty"`
	Deposits                                               int64  `protobuf:"varint,26,opt,name=deposits,proto3" json:"deposits,omitempty"`
	DividendYield                                          int64  `protobuf:"varint,27,opt,name=dividendYield,proto3" json:"dividendYield,omitempty"`
	DividendsPerBasicCommonShare                           int64  `protobuf:"varint,28,opt,name=dividendsPerBasicCommonShare,proto3" json:"dividendsPerBasicCommonShare,omitempty"`
	EarningBeforeInterestTaxes                             int64  `protobuf:"varint,29,opt,name=earningBeforeInterestTaxes,proto3" json:"earningBeforeInterestTaxes,omitempty"`
	EarningsBeforeInterestTaxesDepreciationAmortization    int64  `protobuf:"varint,30,opt,name=earningsBeforeInterestTaxesDepreciationAmortization,proto3" json:"earningsBeforeInterestTaxesDepreciationAmortization,omitempty"`
	EBITDAMargin                                           int64  `protobuf:"varint,31,opt,name=EBITDAMargin,proto3" json:"EBITDAMargin,omitempty"`
	EarningsBeforeInterestTaxesDepreciationAmortizationUSD int64  `protobuf:"varint,32,opt,name=earningsBeforeInterestTaxesDepreciationAmortizationUSD,proto3" json:"earningsBeforeInterestTaxesDepreciationAmortizationUSD,omitempty"`
	EarningBeforeInterestTaxesUSD                          int64  `protobuf:"varint,33,opt,name=earningBeforeInterestTaxesUSD,proto3" json:"earningBeforeInterestTaxesUSD,omitempty"`
	EarningsBeforeTax                                      int64  `protobuf:"varint,34,opt,name=earningsBeforeTax,proto3" json:"earningsBeforeTax,omitempty"`
	EarningsPerBasicShare                                  int64  `protobuf:"varint,35,opt,name=earningsPerBasicShare,proto3" json:"earningsPerBasicShare,omitempty"`
	EarningsPerDilutedShare                                int64  `protobuf:"varint,36,opt,name=earningsPerDilutedShare,proto3" json:"earningsPerDilutedShare,omitempty"`
	EarningsPerBasicShareUSD                               int64  `protobuf:"varint,37,opt,name=earningsPerBasicShareUSD,proto3" json:"earningsPerBasicShareUSD,omitempty"`
	ShareholdersEquity                                     int64  `protobuf:"varint,38,opt,name=shareholdersEquity,proto3" json:"shareholdersEquity,omitempty"`
	AverageEquity                                          int64  `protobuf:"varint,39,opt,name=averageEquity,proto3" json:"averageEquity,omitempty"`
	ShareholdersEquityUSD                                  int64  `protobuf:"varint,40,opt,name=shareholdersEquityUSD,proto3" json:"shareholdersEquityUSD,omitempty"`
	EnterpriseValue                                        int64  `protobuf:"varint,41,opt,name=enterpriseValue,proto3" json:"enterpriseValue,omitempty"`
	EnterpriseValueOverEBIT                                int64  `protobuf:"varint,42,opt,name=enterpriseValueOverEBIT,proto3" json:"enterpriseValueOverEBIT,omitempty"`
	EnterpriseValueOverEBITDA                              int64  `protobuf:"varint,43,opt,name=enterpriseValueOverEBITDA,proto3" json:"enterpriseValueOverEBITDA,omitempty"`
	FreeCashFlow                                           int64  `protobuf:"varint,44,opt,name=freeCashFlow,proto3" json:"freeCashFlow,omitempty"`
	FreeCashFlowPerShare                                   int64  `protobuf:"varint,45,opt,name=freeCashFlowPerShare,proto3" json:"freeCashFlowPerShare,omitempty"`
	ForeignCurrencyUSDExchangeRate                         int64  `protobuf:"varint,46,opt,name=foreignCurrencyUSDExchangeRate,proto3" json:"foreignCurrencyUSDExchangeRate,omitempty"`
	GrossProfit                                            int64  `protobuf:"varint,47,opt,name=grossProfit,proto3" json:"grossProfit,omitempty"`
	GrossMargin                                            int64  `protobuf:"varint,48,opt,name=grossMargin,proto3" json:"grossMargin,omitempty"`
	GoodwillAndIntangibleAssets                            int64  `protobuf:"varint,49,opt,name=goodwillAndIntangibleAssets,proto3" json:"goodwillAndIntangibleAssets,omitempty"`
	InterestExpense                                        int64  `protobuf:"varint,50,opt,name=interestExpense,proto3" json:"interestExpense,omitempty"`
	InvestedCapital                                        int64  `protobuf:"varint,51,opt,name=investedCapital,proto3" json:"investedCapital,omitempty"`
	InvestedCapitalAverage                                 int64  `protobuf:"varint,52,opt,name=investedCapitalAverage,proto3" json:"investedCapitalAverage,omitempty"`
	Inventory                                              int64  `protobuf:"varint,53,opt,name=inventory,proto3" json:"inventory,omitempty"`
	Investments                                            int64  `protobuf:"varint,54,opt,name=investments,proto3" json:"investments,omitempty"`
	InvestmentsCurrent                                     int64  `protobuf:"varint,55,opt,name=investmentsCurrent,proto3" json:"investmentsCurrent,omitempty"`
	InvestmentsNonCurrent                                  int64  `protobuf:"varint,56,opt,name=investmentsNonCurrent,proto3" json:"investmentsNonCurrent,omitempty"`
	TotalLiabilities                                       int64  `protobuf:"varint,57,opt,name=totalLiabilities,proto3" json:"totalLiabilities,omitempty"`
	CurrentLiabilities                                     int64  `protobuf:"varint,58,opt,name=currentLiabilities,proto3" json:"currentLiabilities,omitempty"`
	LiabilitiesNonCurrent                                  int64  `protobuf:"varint,59,opt,name=liabilitiesNonCurrent,proto3" json:"liabilitiesNonCurrent,omitempty"`
	MarketCapitalization                                   int64  `protobuf:"varint,60,opt,name=marketCapitalization,proto3" json:"marketCapitalization,omitempty"`
	NetCashFlow                                            int64  `protobuf:"varint,61,opt,name=netCashFlow,proto3" json:"netCashFlow,omitempty"`
	NetCashFlowBusinessAcquisitionsDisposals               int64  `protobuf:"varint,62,opt,name=netCashFlowBusinessAcquisitionsDisposals,proto3" json:"netCashFlowBusinessAcquisitionsDisposals,omitempty"`
	IssuanceEquityShares                                   int64  `protobuf:"varint,63,opt,name=issuanceEquityShares,proto3" json:"issuanceEquityShares,omitempty"`
	IssuanceDebtSecurities                                 int64  `protobuf:"varint,64,opt,name=issuanceDebtSecurities,proto3" json:"issuanceDebtSecurities,omitempty"`
	PaymentDividendsOtherCashDistributions                 int64  `protobuf:"varint,65,opt,name=paymentDividendsOtherCashDistributions,proto3" json:"paymentDividendsOtherCashDistributions,omitempty"`
	NetCashFlowFromFinancing                               int64  `protobuf:"varint,66,opt,name=netCashFlowFromFinancing,proto3" json:"netCashFlowFromFinancing,omitempty"`
	NetCashFlowFromInvesting                               int64  `protobuf:"varint,67,opt,name=netCashFlowFromInvesting,proto3" json:"netCashFlowFromInvesting,omitempty"`
	NetCashFlowInvestmentAcquisitionsDisposals             int64  `protobuf:"varint,68,opt,name=netCashFlowInvestmentAcquisitionsDisposals,proto3" json:"netCashFlowInvestmentAcquisitionsDisposals,omitempty"`
	NetCashFlowFromOperations                              int64  `protobuf:"varint,69,opt,name=netCashFlowFromOperations,proto3" json:"netCashFlowFromOperations,omitempty"`
	EffectOfExchangeRateChangesOnCash                      int64  `protobuf:"varint,70,opt,name=effectOfExchangeRateChangesOnCash,proto3" json:"effectOfExchangeRateChangesOnCash,omitempty"`
	NetIncome                                              int64  `protobuf:"varint,71,opt,name=netIncome,proto3" json:"netIncome,omitempty"`
	NetIncomeCommonStock                                   int64  `protobuf:"varint,72,opt,name=netIncomeCommonStock,proto3" json:"netIncomeCommonStock,omitempty"`
	NetIncomeCommonStockUSD                                int64  `protobuf:"varint,73,opt,name=netIncomeCommonStockUSD,proto3" json:"netIncomeCommonStockUSD,omitempty"`
	NetLossIncomeFromDiscontinuedOperations                int64  `protobuf:"varint,74,opt,name=netLossIncomeFromDiscontinuedOperations,proto3" json:"netLossIncomeFromDiscontinuedOperations,omitempty"`
	NetIncomeToNonControllingInterests                     int64  `protobuf:"varint,75,opt,name=netIncomeToNonControllingInterests,proto3" json:"netIncomeToNonControllingInterests,omitempty"`
	ProfitMargin                                           int64  `protobuf:"varint,76,opt,name=profitMargin,proto3" json:"profitMargin,omitempty"`
	OperatingExpenses                                      int64  `protobuf:"varint,77,opt,name=operatingExpenses,proto3" json:"operatingExpenses,omitempty"`
	OperatingIncome                                        int64  `protobuf:"varint,78,opt,name=operatingIncome,proto3" json:"operatingIncome,omitempty"`
	TradeAndNonTradePayables                               int64  `protobuf:"varint,79,opt,name=tradeAndNonTradePayables,proto3" json:"tradeAndNonTradePayables,omitempty"`
	PayoutRatio                                            int64  `protobuf:"varint,80,opt,name=payoutRatio,proto3" json:"payoutRatio,omitempty"`
	PriceToBookValue                                       int64  `protobuf:"varint,81,opt,name=priceToBookValue,proto3" json:"priceToBookValue,omitempty"`
	PriceEarnings                                          int64  `protobuf:"varint,82,opt,name=priceEarnings,proto3" json:"priceEarnings,omitempty"`
	PriceToEarningsRatio                                   int64  `protobuf:"varint,83,opt,name=priceToEarningsRatio,proto3" json:"priceToEarningsRatio,omitempty"`
	PropertyPlantEquipmentNet                              int64  `protobuf:"varint,84,opt,name=propertyPlantEquipmentNet,proto3" json:"propertyPlantEquipmentNet,omitempty"`
	PreferredDividendsIncomeStatementImpact                int64  `protobuf:"varint,85,opt,name=preferredDividendsIncomeStatementImpact,proto3" json:"preferredDividendsIncomeStatementImpact,omitempty"`
	SharePriceAdjustedClose                                int64  `protobuf:"varint,86,opt,name=sharePriceAdjustedClose,proto3" json:"sharePriceAdjustedClose,omitempty"`
	PriceSales                                             int64  `protobuf:"varint,87,opt,name=priceSales,proto3" json:"priceSales,omitempty"`
	PriceToSalesRatio                                      int64  `protobuf:"varint,88,opt,name=priceToSalesRatio,proto3" json:"priceToSalesRatio,omitempty"`
	TradeAndNonTradeReceivables                            int64  `protobuf:"varint,89,opt,name=tradeAndNonTradeReceivables,proto3" json:"tradeAndNonTradeReceivables,omitempty"`
	AccumulatedRetainedEarningsDeficit                     int64  `protobuf:"varint,90,opt,name=accumulatedRetainedEarningsDeficit,proto3" json:"accumulatedRetainedEarningsDeficit,omitempty"`
	Revenues                                               int64  `protobuf:"varint,91,opt,name=revenues,proto3" json:"revenues,omitempty"`
	RevenuesUSD                                            int64  `protobuf:"varint,92,opt,name=revenuesUSD,proto3" json:"revenuesUSD,omitempty"`
	ResearchAndDevelopmentExpense                          int64  `protobuf:"varint,93,opt,name=researchAndDevelopmentExpense,proto3" json:"researchAndDevelopmentExpense,omitempty"`
	ReturnOnAverageAssets                                  int64  `protobuf:"varint,94,opt,name=returnOnAverageAssets,proto3" json:"returnOnAverageAssets,omitempty"`
	ReturnOnAverageEquity                                  int64  `protobuf:"varint,95,opt,name=returnOnAverageEquity,proto3" json:"returnOnAverageEquity,omitempty"`
	ReturnOnInvestedCapital                                int64  `protobuf:"varint,96,opt,name=returnOnInvestedCapital,proto3" json:"returnOnInvestedCapital,omitempty"`
	ReturnOnSales                                          int64  `protobuf:"varint,97,opt,name=returnOnSales,proto3" json:"returnOnSales,omitempty"`
	ShareBasedCompensation                                 int64  `protobuf:"varint,98,opt,name=shareBasedCompensation,proto3" json:"shareBasedCompensation,omitempty"`
	SellingGeneralAndAdministrativeExpense                 int64  `protobuf:"varint,99,opt,name=sellingGeneralAndAdministrativeExpense,proto3" json:"sellingGeneralAndAdministrativeExpense,omitempty"`
	ShareFactor                                            int64  `protobuf:"varint,100,opt,name=shareFactor,proto3" json:"shareFactor,omitempty"`
	Shares                                                 int64  `protobuf:"varint,101,opt,name=shares,proto3" json:"shares,omitempty"`
	WeightedAverageShares                                  int64  `protobuf:"varint,102,opt,name=weightedAverageShares,proto3" json:"weightedAverageShares,omitempty"`
	WeightedAverageSharesDiluted                           int64  `protobuf:"varint,103,opt,name=weightedAverageSharesDiluted,proto3" json:"weightedAverageSharesDiluted,omitempty"`
	SalesPerShare                                          int64  `protobuf:"varint,104,opt,name=salesPerShare,proto3" json:"salesPerShare,omitempty"`
	TangibleAssetValue                                     int64  `protobuf:"varint,105,opt,name=tangibleAssetValue,proto3" json:"tangibleAssetValue,omitempty"`
	TaxAssets                                              int64  `protobuf:"varint,106,opt,name=taxAssets,proto3" json:"taxAssets,omitempty"`
	IncomeTaxExpense                                       int64  `protobuf:"varint,107,opt,name=incomeTaxExpense,proto3" json:"incomeTaxExpense,omitempty"`
	TaxLiabilities                                         int64  `protobuf:"varint,108,opt,name=taxLiabilities,proto3" json:"taxLiabilities,omitempty"`
	TangibleAssetsBookValuePerShare                        int64  `protobuf:"varint,109,opt,name=tangibleAssetsBookValuePerShare,proto3" json:"tangibleAssetsBookValuePerShare,omitempty"`
	WorkingCapital                                         int64  `protobuf:"varint,110,opt,name=workingCapital,proto3" json:"workingCapital,omitempty"`
}

func (x *Financial) Reset() {
	*x = Financial{}
	if protoimpl.UnsafeEnabled {
		mi := &file_polygon_rest_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Financial) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Financial) ProtoMessage() {}

func (x *Financial) ProtoReflect() protoreflect.Message {
	mi := &file_polygon_rest_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Financial.ProtoReflect.Descriptor instead.
func (*Financial) Descriptor() ([]byte, []int) {
	return file_polygon_rest_proto_rawDescGZIP(), []int{18}
}

func (x *Financial) GetTicker() string {
	if x != nil {
		return x.Ticker
	}
	return ""
}

func (x *Financial) GetPeriod() string {
	if x != nil {
		return x.Period
	}
	return ""
}

func (x *Financial) GetCalendarDate() string {
	if x != nil {
		return x.CalendarDate
	}
	return ""
}

func (x *Financial) GetReportPeriod() string {
	if x != nil {
		return x.ReportPeriod
	}
	return ""
}

func (x *Financial) GetUpdated() string {
	if x != nil {
		return x.Updated
	}
	return ""
}

func (x *Financial) GetAccumulatedOtherComprehensiveIncome() int64 {
	if x != nil {
		return x.AccumulatedOtherComprehensiveIncome
	}
	return 0
}

func (x *Financial) GetAssets() int64 {
	if x != nil {
		return x.Assets
	}
	return 0
}

func (x *Financial) GetAssetsAverage() int64 {
	if x != nil {
		return x.AssetsAverage
	}
	return 0
}

func (x *Financial) GetAssetsCurrent() int64 {
	if x != nil {
		return x.AssetsCurrent
	}
	return 0
}

func (x *Financial) GetAssetTurnover() int64 {
	if x != nil {
		return x.AssetTurnover
	}
	return 0
}

func (x *Financial) GetAssetsNonCurrent() int64 {
	if x != nil {
		return x.AssetsNonCurrent
	}
	return 0
}

func (x *Financial) GetBookValuePerShare() int64 {
	if x != nil {
		return x.BookValuePerShare
	}
	return 0
}

func (x *Financial) GetCapitalExpenditure() int64 {
	if x != nil {
		return x.CapitalExpenditure
	}
	return 0
}

func (x *Financial) GetCashAndEquivalents() int64 {
	if x != nil {
		return x.CashAndEquivalents
	}
	return 0
}

func (x *Financial) GetCashAndEquivalentsUSD() int64 {
	if x != nil {
		return x.CashAndEquivalentsUSD
	}
	return 0
}

func (x *Financial) GetCostOfRevenue() int64 {
	if x != nil {
		return x.CostOfRevenue
	}
	return 0
}

func (x *Financial) GetConsolidatedIncome() int64 {
	if x != nil {
		return x.ConsolidatedIncome
	}
	return 0
}

func (x *Financial) GetCurrentRatio() int64 {
	if x != nil {
		return x.CurrentRatio
	}
	return 0
}

func (x *Financial) GetDebtToEquityRatio() int64 {
	if x != nil {
		return x.DebtToEquityRatio
	}
	return 0
}

func (x *Financial) GetDebt() int64 {
	if x != nil {
		return x.Debt
	}
	return 0
}

func (x *Financial) GetDebtCurrent() int64 {
	if x != nil {
		return x.DebtCurrent
	}
	return 0
}

func (x *Financial) GetDebtNonCurrent() int64 {
	if x != nil {
		return x.DebtNonCurrent
	}
	return 0
}

func (x *Financial) GetDebtUSD() int64 {
	if x != nil {
		return x.DebtUSD
	}
	return 0
}

func (x *Financial) GetDeferredRevenue() int64 {
	if x != nil {
		return x.DeferredRevenue
	}
	return 0
}

func (x *Financial) GetDepreciationAmortizationAndAccretion() int64 {
	if x != nil {
		return x.DepreciationAmortizationAndAccretion
	}
	return 0
}

func (x *Financial) GetDeposits() int64 {
	if x != nil {
		return x.Deposits
	}
	return 0
}

func (x *Financial) GetDividendYield() int64 {
	if x != nil {
		return x.DividendYield
	}
	return 0
}

func (x *Financial) GetDividendsPerBasicCommonShare() int64 {
	if x != nil {
		return x.DividendsPerBasicCommonShare
	}
	return 0
}

func (x *Financial) GetEarningBeforeInterestTaxes() int64 {
	if x != nil {
		return x.EarningBeforeInterestTaxes
	}
	return 0
}

func (x *Financial) GetEarningsBeforeInterestTaxesDepreciationAmortization() int64 {
	if x != nil {
		return x.EarningsBeforeInterestTaxesDepreciationAmortization
	}
	return 0
}

func (x *Financial) GetEBITDAMargin() int64 {
	if x != nil {
		return x.EBITDAMargin
	}
	return 0
}

func (x *Financial) GetEarningsBeforeInterestTaxesDepreciationAmortizationUSD() int64 {
	if x != nil {
		return x.EarningsBeforeInterestTaxesDepreciationAmortizationUSD
	}
	return 0
}

func (x *Financial) GetEarningBeforeInterestTaxesUSD() int64 {
	if x != nil {
		return x.EarningBeforeInterestTaxesUSD
	}
	return 0
}

func (x *Financial) GetEarningsBeforeTax() int64 {
	if x != nil {
		return x.EarningsBeforeTax
	}
	return 0
}

func (x *Financial) GetEarningsPerBasicShare() int64 {
	if x != nil {
		return x.EarningsPerBasicShare
	}
	return 0
}

func (x *Financial) GetEarningsPerDilutedShare() int64 {
	if x != nil {
		return x.EarningsPerDilutedShare
	}
	return 0
}

func (x *Financial) GetEarningsPerBasicShareUSD() int64 {
	if x != nil {
		return x.EarningsPerBasicShareUSD
	}
	return 0
}

func (x *Financial) GetShareholdersEquity() int64 {
	if x != nil {
		return x.ShareholdersEquity
	}
	return 0
}

func (x *Financial) GetAverageEquity() int64 {
	if x != nil {
		return x.AverageEquity
	}
	return 0
}

func (x *Financial) GetShareholdersEquityUSD() int64 {
	if x != nil {
		return x.ShareholdersEquityUSD
	}
	return 0
}

func (x *Financial) GetEnterpriseValue() int64 {
	if x != nil {
		return x.EnterpriseValue
	}
	return 0
}

func (x *Financial) GetEnterpriseValueOverEBIT() int64 {
	if x != nil {
		return x.EnterpriseValueOverEBIT
	}
	return 0
}

func (x *Financial) GetEnterpriseValueOverEBITDA() int64 {
	if x != nil {
		return x.EnterpriseValueOverEBITDA
	}
	return 0
}

func (x *Financial) GetFreeCashFlow() int64 {
	if x != nil {
		return x.FreeCashFlow
	}
	return 0
}

func (x *Financial) GetFreeCashFlowPerShare() int64 {
	if x != nil {
		return x.FreeCashFlowPerShare
	}
	return 0
}

func (x *Financial) GetForeignCurrencyUSDExchangeRate() int64 {
	if x != nil {
		return x.ForeignCurrencyUSDExchangeRate
	}
	return 0
}

func (x *Financial) GetGrossProfit() int64 {
	if x != nil {
		return x.GrossProfit
	}
	return 0
}

func (x *Financial) GetGrossMargin() int64 {
	if x != nil {
		return x.GrossMargin
	}
	return 0
}

func (x *Financial) GetGoodwillAndIntangibleAssets() int64 {
	if x != nil {
		return x.GoodwillAndIntangibleAssets
	}
	return 0
}

func (x *Financial) GetInterestExpense() int64 {
	if x != nil {
		return x.InterestExpense
	}
	return 0
}

func (x *Financial) GetInvestedCapital() int64 {
	if x != nil {
		return x.InvestedCapital
	}
	return 0
}

func (x *Financial) GetInvestedCapitalAverage() int64 {
	if x != nil {
		return x.InvestedCapitalAverage
	}
	return 0
}

func (x *Financial) GetInventory() int64 {
	if x != nil {
		return x.Inventory
	}
	return 0
}

func (x *Financial) GetInvestments() int64 {
	if x != nil {
		return x.Investments
	}
	return 0
}

func (x *Financial) GetInvestmentsCurrent() int64 {
	if x != nil {
		return x.InvestmentsCurrent
	}
	return 0
}

func (x *Financial) GetInvestmentsNonCurrent() int64 {
	if x != nil {
		return x.InvestmentsNonCurrent
	}
	return 0
}

func (x *Financial) GetTotalLiabilities() int64 {
	if x != nil {
		return x.TotalLiabilities
	}
	return 0
}

func (x *Financial) GetCurrentLiabilities() int64 {
	if x != nil {
		return x.CurrentLiabilities
	}
	return 0
}

func (x *Financial) GetLiabilitiesNonCurrent() int64 {
	if x != nil {
		return x.LiabilitiesNonCurrent
	}
	return 0
}

func (x *Financial) GetMarketCapitalization() int64 {
	if x != nil {
		return x.MarketCapitalization
	}
	return 0
}

func (x *Financial) GetNetCashFlow() int64 {
	if x != nil {
		return x.NetCashFlow
	}
	return 0
}

func (x *Financial) GetNetCashFlowBusinessAcquisitionsDisposals() int64 {
	if x != nil {
		return x.NetCashFlowBusinessAcquisitionsDisposals
	}
	return 0
}

func (x *Financial) GetIssuanceEquityShares() int64 {
	if x != nil {
		return x.IssuanceEquityShares
	}
	return 0
}

func (x *Financial) GetIssuanceDebtSecurities() int64 {
	if x != nil {
		return x.IssuanceDebtSecurities
	}
	return 0
}

func (x *Financial) GetPaymentDividendsOtherCashDistributions() int64 {
	if x != nil {
		return x.PaymentDividendsOtherCashDistributions
	}
	return 0
}

func (x *Financial) GetNetCashFlowFromFinancing() int64 {
	if x != nil {
		return x.NetCashFlowFromFinancing
	}
	return 0
}

func (x *Financial) GetNetCashFlowFromInvesting() int64 {
	if x != nil {
		return x.NetCashFlowFromInvesting
	}
	return 0
}

func (x *Financial) GetNetCashFlowInvestmentAcquisitionsDisposals() int64 {
	if x != nil {
		return x.NetCashFlowInvestmentAcquisitionsDisposals
	}
	return 0
}

func (x *Financial) GetNetCashFlowFromOperations() int64 {
	if x != nil {
		return x.NetCashFlowFromOperations
	}
	return 0
}

func (x *Financial) GetEffectOfExchangeRateChangesOnCash() int64 {
	if x != nil {
		return x.EffectOfExchangeRateChangesOnCash
	}
	return 0
}

func (x *Financial) GetNetIncome() int64 {
	if x != nil {
		return x.NetIncome
	}
	return 0
}

func (x *Financial) GetNetIncomeCommonStock() int64 {
	if x != nil {
		return x.NetIncomeCommonStock
	}
	return 0
}

func (x *Financial) GetNetIncomeCommonStockUSD() int64 {
	if x != nil {
		return x.NetIncomeCommonStockUSD
	}
	return 0
}

func (x *Financial) GetNetLossIncomeFromDiscontinuedOperations() int64 {
	if x != nil {
		return x.NetLossIncomeFromDiscontinuedOperations
	}
	return 0
}

func (x *Financial) GetNetIncomeToNonControllingInterests() int64 {
	if x != nil {
		return x.NetIncomeToNonControllingInterests
	}
	return 0
}

func (x *Financial) GetProfitMargin() int64 {
	if x != nil {
		return x.ProfitMargin
	}
	return 0
}

func (x *Financial) GetOperatingExpenses() int64 {
	if x != nil {
		return x.OperatingExpenses
	}
	return 0
}

func (x *Financial) GetOperatingIncome() int64 {
	if x != nil {
		return x.OperatingIncome
	}
	return 0
}

func (x *Financial) GetTradeAndNonTradePayables() int64 {
	if x != nil {
		return x.TradeAndNonTradePayables
	}
	return 0
}

func (x *Financial) GetPayoutRatio() int64 {
	if x != nil {
		return x.PayoutRatio
	}
	return 0
}

func (x *Financial) GetPriceToBookValue() int64 {
	if x != nil {
		return x.PriceToBookValue
	}
	return 0
}

func (x *Financial) GetPriceEarnings() int64 {
	if x != nil {
		return x.PriceEarnings
	}
	return 0
}

func (x *Financial) GetPriceToEarningsRatio() int64 {
	if x != nil {
		return x.PriceToEarningsRatio
	}
	return 0
}

func (x *Financial) GetPropertyPlantEquipmentNet() int64 {
	if x != nil {
		return x.PropertyPlantEquipmentNet
	}
	return 0
}

func (x *Financial) GetPreferredDividendsIncomeStatementImpact() int64 {
	if x != nil {
		return x.PreferredDividendsIncomeStatementImpact
	}
	return 0
}

func (x *Financial) GetSharePriceAdjustedClose() int64 {
	if x != nil {
		return x.SharePriceAdjustedClose
	}
	return 0
}

func (x *Financial) GetPriceSales() int64 {
	if x != nil {
		return x.PriceSales
	}
	return 0
}

func (x *Financial) GetPriceToSalesRatio() int64 {
	if x != nil {
		return x.PriceToSalesRatio
	}
	return 0
}

func (x *Financial) GetTradeAndNonTradeReceivables() int64 {
	if x != nil {
		return x.TradeAndNonTradeReceivables
	}
	return 0
}

func (x *Financial) GetAccumulatedRetainedEarningsDeficit() int64 {
	if x != nil {
		return x.AccumulatedRetainedEarningsDeficit
	}
	return 0
}

func (x *Financial) GetRevenues() int64 {
	if x != nil {
		return x.Revenues
	}
	return 0
}

func (x *Financial) GetRevenuesUSD() int64 {
	if x != nil {
		return x.RevenuesUSD
	}
	return 0
}

func (x *Financial) GetResearchAndDevelopmentExpense() int64 {
	if x != nil {
		return x.ResearchAndDevelopmentExpense
	}
	return 0
}

func (x *Financial) GetReturnOnAverageAssets() int64 {
	if x != nil {
		return x.ReturnOnAverageAssets
	}
	return 0
}

func (x *Financial) GetReturnOnAverageEquity() int64 {
	if x != nil {
		return x.ReturnOnAverageEquity
	}
	return 0
}

func (x *Financial) GetReturnOnInvestedCapital() int64 {
	if x != nil {
		return x.ReturnOnInvestedCapital
	}
	return 0
}

func (x *Financial) GetReturnOnSales() int64 {
	if x != nil {
		return x.ReturnOnSales
	}
	return 0
}

func (x *Financial) GetShareBasedCompensation() int64 {
	if x != nil {
		return x.ShareBasedCompensation
	}
	return 0
}

func (x *Financial) GetSellingGeneralAndAdministrativeExpense() int64 {
	if x != nil {
		return x.SellingGeneralAndAdministrativeExpense
	}
	return 0
}

func (x *Financial) GetShareFactor() int64 {
	if x != nil {
		return x.ShareFactor
	}
	return 0
}

func (x *Financial) GetShares() int64 {
	if x != nil {
		return x.Shares
	}
	return 0
}

func (x *Financial) GetWeightedAverageShares() int64 {
	if x != nil {
		return x.WeightedAverageShares
	}
	return 0
}

func (x *Financial) GetWeightedAverageSharesDiluted() int64 {
	if x != nil {
		return x.WeightedAverageSharesDiluted
	}
	return 0
}

func (x *Financial) GetSalesPerShare() int64 {
	if x != nil {
		return x.SalesPerShare
	}
	return 0
}

func (x *Financial) GetTangibleAssetValue() int64 {
	if x != nil {
		return x.TangibleAssetValue
	}
	return 0
}

func (x *Financial) GetTaxAssets() int64 {
	if x != nil {
		return x.TaxAssets
	}
	return 0
}

func (x *Financial) GetIncomeTaxExpense() int64 {
	if x != nil {
		return x.IncomeTaxExpense
	}
	return 0
}

func (x *Financial) GetTaxLiabilities() int64 {
	if x != nil {
		return x.TaxLiabilities
	}
	return 0
}

func (x *Financial) GetTangibleAssetsBookValuePerShare() int64 {
	if x != nil {
		return x.TangibleAssetsBookValuePerShare
	}
	return 0
}

func (x *Financial) GetWorkingCapital() int64 {
	if x != nil {
		return x.WorkingCapital
	}
	return 0
}

func (self *Financial) TypeCode() uint32 {
	return FinancialTypeCode
}

type GetStockFinancialsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Financials []*Financial `protobuf:"bytes,1,rep,name=Financials,proto3" json:"Financials,omitempty"`
}

func (x *GetStockFinancialsResponse) Reset() {
	*x = GetStockFinancialsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_polygon_rest_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStockFinancialsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStockFinancialsResponse) ProtoMessage() {}

func (x *GetStockFinancialsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_polygon_rest_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStockFinancialsResponse.ProtoReflect.Descriptor instead.
func (*GetStockFinancialsResponse) Descriptor() ([]byte, []int) {
	return file_polygon_rest_proto_rawDescGZIP(), []int{19}
}

func (x *GetStockFinancialsResponse) GetFinancials() []*Financial {
	if x != nil {
		return x.Financials
	}
	return nil
}

func (self *GetStockFinancialsResponse) TypeCode() uint32 {
	return GetStockFinancialsResponseTypeCode
}

//https://polygon.io/docs/#get_v1_marketstatus_now_anchor
type GetMarketStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Market     string            `protobuf:"bytes,1,opt,name=market,proto3" json:"market,omitempty"`
	ServerTime string            `protobuf:"bytes,2,opt,name=serverTime,proto3" json:"serverTime,omitempty"`
	Exchanges  map[string]string `protobuf:"bytes,3,rep,name=exchanges,proto3" json:"exchanges,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Currencies map[string]string `protobuf:"bytes,4,rep,name=currencies,proto3" json:"currencies,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GetMarketStatusResponse) Reset() {
	*x = GetMarketStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_polygon_rest_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMarketStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMarketStatusResponse) ProtoMessage() {}

func (x *GetMarketStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_polygon_rest_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMarketStatusResponse.ProtoReflect.Descriptor instead.
func (*GetMarketStatusResponse) Descriptor() ([]byte, []int) {
	return file_polygon_rest_proto_rawDescGZIP(), []int{20}
}

func (x *GetMarketStatusResponse) GetMarket() string {
	if x != nil {
		return x.Market
	}
	return ""
}

func (x *GetMarketStatusResponse) GetServerTime() string {
	if x != nil {
		return x.ServerTime
	}
	return ""
}

func (x *GetMarketStatusResponse) GetExchanges() map[string]string {
	if x != nil {
		return x.Exchanges
	}
	return nil
}

func (x *GetMarketStatusResponse) GetCurrencies() map[string]string {
	if x != nil {
		return x.Currencies
	}
	return nil
}

func (self *GetMarketStatusResponse) TypeCode() uint32 {
	return GetMarketStatusResponseTypeCode
}

//https://polygon.io/docs/#get_v1_marketstatus_upcoming_anchor
type MarketHoliday struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Exchange string `protobuf:"bytes,1,opt,name=exchange,proto3" json:"exchange,omitempty"`
	Name     string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Status   string `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
	Date     string `protobuf:"bytes,4,opt,name=date,proto3" json:"date,omitempty"`
	Open     string `protobuf:"bytes,5,opt,name=open,proto3" json:"open,omitempty"`
	Close    string `protobuf:"bytes,6,opt,name=close,proto3" json:"close,omitempty"`
}

func (x *MarketHoliday) Reset() {
	*x = MarketHoliday{}
	if protoimpl.UnsafeEnabled {
		mi := &file_polygon_rest_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketHoliday) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketHoliday) ProtoMessage() {}

func (x *MarketHoliday) ProtoReflect() protoreflect.Message {
	mi := &file_polygon_rest_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketHoliday.ProtoReflect.Descriptor instead.
func (*MarketHoliday) Descriptor() ([]byte, []int) {
	return file_polygon_rest_proto_rawDescGZIP(), []int{21}
}

func (x *MarketHoliday) GetExchange() string {
	if x != nil {
		return x.Exchange
	}
	return ""
}

func (x *MarketHoliday) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MarketHoliday) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *MarketHoliday) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

func (x *MarketHoliday) GetOpen() string {
	if x != nil {
		return x.Open
	}
	return ""
}

func (x *MarketHoliday) GetClose() string {
	if x != nil {
		return x.Close
	}
	return ""
}

func (self *MarketHoliday) TypeCode() uint32 {
	return MarketHolidayTypeCode
}

type GetMarketHolidaysResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MarketHolidays []*MarketHoliday `protobuf:"bytes,1,rep,name=MarketHolidays,proto3" json:"MarketHolidays,omitempty"`
}

func (x *GetMarketHolidaysResponse) Reset() {
	*x = GetMarketHolidaysResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_polygon_rest_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMarketHolidaysResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMarketHolidaysResponse) ProtoMessage() {}

func (x *GetMarketHolidaysResponse) ProtoReflect() protoreflect.Message {
	mi := &file_polygon_rest_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMarketHolidaysResponse.ProtoReflect.Descriptor instead.
func (*GetMarketHolidaysResponse) Descriptor() ([]byte, []int) {
	return file_polygon_rest_proto_rawDescGZIP(), []int{22}
}

func (x *GetMarketHolidaysResponse) GetMarketHolidays() []*MarketHoliday {
	if x != nil {
		return x.MarketHolidays
	}
	return nil
}

func (self *GetMarketHolidaysResponse) TypeCode() uint32 {
	return GetMarketHolidaysResponseTypeCode
}

type GetEquityExchangesQueryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetEquityExchangesQueryRequest) Reset() {
	*x = GetEquityExchangesQueryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_polygon_rest_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetEquityExchangesQueryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEquityExchangesQueryRequest) ProtoMessage() {}

func (x *GetEquityExchangesQueryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_polygon_rest_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEquityExchangesQueryRequest.ProtoReflect.Descriptor instead.
func (*GetEquityExchangesQueryRequest) Descriptor() ([]byte, []int) {
	return file_polygon_rest_proto_rawDescGZIP(), []int{23}
}

func (self *GetEquityExchangesQueryRequest) TypeCode() uint32 {
	return GetEquityExchangesQueryRequestTypeCode
}

type GetEquityExchangesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetEquityExchangesResponse) Reset() {
	*x = GetEquityExchangesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_polygon_rest_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetEquityExchangesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEquityExchangesResponse) ProtoMessage() {}

func (x *GetEquityExchangesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_polygon_rest_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEquityExchangesResponse.ProtoReflect.Descriptor instead.
func (*GetEquityExchangesResponse) Descriptor() ([]byte, []int) {
	return file_polygon_rest_proto_rawDescGZIP(), []int{24}
}

func (self *GetEquityExchangesResponse) TypeCode() uint32 {
	return GetEquityExchangesResponseTypeCode
}

type GetEquityPreviousCloseQueryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetEquityPreviousCloseQueryRequest) Reset() {
	*x = GetEquityPreviousCloseQueryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_polygon_rest_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetEquityPreviousCloseQueryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEquityPreviousCloseQueryRequest) ProtoMessage() {}

func (x *GetEquityPreviousCloseQueryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_polygon_rest_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEquityPreviousCloseQueryRequest.ProtoReflect.Descriptor instead.
func (*GetEquityPreviousCloseQueryRequest) Descriptor() ([]byte, []int) {
	return file_polygon_rest_proto_rawDescGZIP(), []int{25}
}

func (self *GetEquityPreviousCloseQueryRequest) TypeCode() uint32 {
	return GetEquityPreviousCloseQueryRequestTypeCode
}

type GetEquityPreviousCloseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetEquityPreviousCloseResponse) Reset() {
	*x = GetEquityPreviousCloseResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_polygon_rest_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetEquityPreviousCloseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEquityPreviousCloseResponse) ProtoMessage() {}

func (x *GetEquityPreviousCloseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_polygon_rest_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEquityPreviousCloseResponse.ProtoReflect.Descriptor instead.
func (*GetEquityPreviousCloseResponse) Descriptor() ([]byte, []int) {
	return file_polygon_rest_proto_rawDescGZIP(), []int{26}
}

func (self *GetEquityPreviousCloseResponse) TypeCode() uint32 {
	return GetEquityPreviousCloseResponseTypeCode
}

type GetEquityAggregatesBarsQueryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetEquityAggregatesBarsQueryRequest) Reset() {
	*x = GetEquityAggregatesBarsQueryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_polygon_rest_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetEquityAggregatesBarsQueryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEquityAggregatesBarsQueryRequest) ProtoMessage() {}

func (x *GetEquityAggregatesBarsQueryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_polygon_rest_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEquityAggregatesBarsQueryRequest.ProtoReflect.Descriptor instead.
func (*GetEquityAggregatesBarsQueryRequest) Descriptor() ([]byte, []int) {
	return file_polygon_rest_proto_rawDescGZIP(), []int{27}
}

func (self *GetEquityAggregatesBarsQueryRequest) TypeCode() uint32 {
	return GetEquityAggregatesBarsQueryRequestTypeCode
}

type GetEquityAggregatesBarsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetEquityAggregatesBarsResponse) Reset() {
	*x = GetEquityAggregatesBarsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_polygon_rest_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetEquityAggregatesBarsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEquityAggregatesBarsResponse) ProtoMessage() {}

func (x *GetEquityAggregatesBarsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_polygon_rest_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEquityAggregatesBarsResponse.ProtoReflect.Descriptor instead.
func (*GetEquityAggregatesBarsResponse) Descriptor() ([]byte, []int) {
	return file_polygon_rest_proto_rawDescGZIP(), []int{28}
}

func (self *GetEquityAggregatesBarsResponse) TypeCode() uint32 {
	return GetEquityAggregatesBarsResponseTypeCode
}

type GetEquityGroupedDailyBarsQueryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetEquityGroupedDailyBarsQueryRequest) Reset() {
	*x = GetEquityGroupedDailyBarsQueryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_polygon_rest_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetEquityGroupedDailyBarsQueryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEquityGroupedDailyBarsQueryRequest) ProtoMessage() {}

func (x *GetEquityGroupedDailyBarsQueryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_polygon_rest_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEquityGroupedDailyBarsQueryRequest.ProtoReflect.Descriptor instead.
func (*GetEquityGroupedDailyBarsQueryRequest) Descriptor() ([]byte, []int) {
	return file_polygon_rest_proto_rawDescGZIP(), []int{29}
}

func (self *GetEquityGroupedDailyBarsQueryRequest) TypeCode() uint32 {
	return GetEquityGroupedDailyBarsQueryRequestTypeCode
}

type GetEquityGroupedDailyBarsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetEquityGroupedDailyBarsResponse) Reset() {
	*x = GetEquityGroupedDailyBarsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_polygon_rest_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetEquityGroupedDailyBarsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEquityGroupedDailyBarsResponse) ProtoMessage() {}

func (x *GetEquityGroupedDailyBarsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_polygon_rest_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEquityGroupedDailyBarsResponse.ProtoReflect.Descriptor instead.
func (*GetEquityGroupedDailyBarsResponse) Descriptor() ([]byte, []int) {
	return file_polygon_rest_proto_rawDescGZIP(), []int{30}
}

func (self *GetEquityGroupedDailyBarsResponse) TypeCode() uint32 {
	return GetEquityGroupedDailyBarsResponseTypeCode
}

type GetEquityHistoricTradesQueryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetEquityHistoricTradesQueryRequest) Reset() {
	*x = GetEquityHistoricTradesQueryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_polygon_rest_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetEquityHistoricTradesQueryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEquityHistoricTradesQueryRequest) ProtoMessage() {}

func (x *GetEquityHistoricTradesQueryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_polygon_rest_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEquityHistoricTradesQueryRequest.ProtoReflect.Descriptor instead.
func (*GetEquityHistoricTradesQueryRequest) Descriptor() ([]byte, []int) {
	return file_polygon_rest_proto_rawDescGZIP(), []int{31}
}

func (self *GetEquityHistoricTradesQueryRequest) TypeCode() uint32 {
	return GetEquityHistoricTradesQueryRequestTypeCode
}

type GetEquityHistoricTradesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetEquityHistoricTradesResponse) Reset() {
	*x = GetEquityHistoricTradesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_polygon_rest_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetEquityHistoricTradesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEquityHistoricTradesResponse) ProtoMessage() {}

func (x *GetEquityHistoricTradesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_polygon_rest_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEquityHistoricTradesResponse.ProtoReflect.Descriptor instead.
func (*GetEquityHistoricTradesResponse) Descriptor() ([]byte, []int) {
	return file_polygon_rest_proto_rawDescGZIP(), []int{32}
}

func (self *GetEquityHistoricTradesResponse) TypeCode() uint32 {
	return GetEquityHistoricTradesResponseTypeCode
}

type GetEquityHistoricQuotesNBBOQueryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetEquityHistoricQuotesNBBOQueryRequest) Reset() {
	*x = GetEquityHistoricQuotesNBBOQueryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_polygon_rest_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetEquityHistoricQuotesNBBOQueryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEquityHistoricQuotesNBBOQueryRequest) ProtoMessage() {}

func (x *GetEquityHistoricQuotesNBBOQueryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_polygon_rest_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEquityHistoricQuotesNBBOQueryRequest.ProtoReflect.Descriptor instead.
func (*GetEquityHistoricQuotesNBBOQueryRequest) Descriptor() ([]byte, []int) {
	return file_polygon_rest_proto_rawDescGZIP(), []int{33}
}

func (self *GetEquityHistoricQuotesNBBOQueryRequest) TypeCode() uint32 {
	return GetEquityHistoricQuotesNBBOQueryRequestTypeCode
}

type GetEquityHistoricQuotesNBBOResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetEquityHistoricQuotesNBBOResponse) Reset() {
	*x = GetEquityHistoricQuotesNBBOResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_polygon_rest_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetEquityHistoricQuotesNBBOResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEquityHistoricQuotesNBBOResponse) ProtoMessage() {}

func (x *GetEquityHistoricQuotesNBBOResponse) ProtoReflect() protoreflect.Message {
	mi := &file_polygon_rest_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEquityHistoricQuotesNBBOResponse.ProtoReflect.Descriptor instead.
func (*GetEquityHistoricQuotesNBBOResponse) Descriptor() ([]byte, []int) {
	return file_polygon_rest_proto_rawDescGZIP(), []int{34}
}

func (self *GetEquityHistoricQuotesNBBOResponse) TypeCode() uint32 {
	return GetEquityHistoricQuotesNBBOResponseTypeCode
}

type GetEquityLastTradeForSymbolQueryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetEquityLastTradeForSymbolQueryRequest) Reset() {
	*x = GetEquityLastTradeForSymbolQueryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_polygon_rest_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetEquityLastTradeForSymbolQueryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEquityLastTradeForSymbolQueryRequest) ProtoMessage() {}

func (x *GetEquityLastTradeForSymbolQueryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_polygon_rest_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEquityLastTradeForSymbolQueryRequest.ProtoReflect.Descriptor instead.
func (*GetEquityLastTradeForSymbolQueryRequest) Descriptor() ([]byte, []int) {
	return file_polygon_rest_proto_rawDescGZIP(), []int{35}
}

func (self *GetEquityLastTradeForSymbolQueryRequest) TypeCode() uint32 {
	return GetEquityLastTradeForSymbolQueryRequestTypeCode
}

type GetEquityLastTradeForSymbolResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetEquityLastTradeForSymbolResponse) Reset() {
	*x = GetEquityLastTradeForSymbolResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_polygon_rest_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetEquityLastTradeForSymbolResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEquityLastTradeForSymbolResponse) ProtoMessage() {}

func (x *GetEquityLastTradeForSymbolResponse) ProtoReflect() protoreflect.Message {
	mi := &file_polygon_rest_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEquityLastTradeForSymbolResponse.ProtoReflect.Descriptor instead.
func (*GetEquityLastTradeForSymbolResponse) Descriptor() ([]byte, []int) {
	return file_polygon_rest_proto_rawDescGZIP(), []int{36}
}

func (self *GetEquityLastTradeForSymbolResponse) TypeCode() uint32 {
	return GetEquityLastTradeForSymbolResponseTypeCode
}

type GetEquityLastQuoteForSymbolQueryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetEquityLastQuoteForSymbolQueryRequest) Reset() {
	*x = GetEquityLastQuoteForSymbolQueryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_polygon_rest_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetEquityLastQuoteForSymbolQueryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEquityLastQuoteForSymbolQueryRequest) ProtoMessage() {}

func (x *GetEquityLastQuoteForSymbolQueryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_polygon_rest_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEquityLastQuoteForSymbolQueryRequest.ProtoReflect.Descriptor instead.
func (*GetEquityLastQuoteForSymbolQueryRequest) Descriptor() ([]byte, []int) {
	return file_polygon_rest_proto_rawDescGZIP(), []int{37}
}

func (self *GetEquityLastQuoteForSymbolQueryRequest) TypeCode() uint32 {
	return GetEquityLastQuoteForSymbolQueryRequestTypeCode
}

type GetEquityLastQuoteForSymbolResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetEquityLastQuoteForSymbolResponse) Reset() {
	*x = GetEquityLastQuoteForSymbolResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_polygon_rest_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetEquityLastQuoteForSymbolResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEquityLastQuoteForSymbolResponse) ProtoMessage() {}

func (x *GetEquityLastQuoteForSymbolResponse) ProtoReflect() protoreflect.Message {
	mi := &file_polygon_rest_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEquityLastQuoteForSymbolResponse.ProtoReflect.Descriptor instead.
func (*GetEquityLastQuoteForSymbolResponse) Descriptor() ([]byte, []int) {
	return file_polygon_rest_proto_rawDescGZIP(), []int{38}
}

func (self *GetEquityLastQuoteForSymbolResponse) TypeCode() uint32 {
	return GetEquityLastQuoteForSymbolResponseTypeCode
}

type GetEquityDailyOpenCloseQueryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetEquityDailyOpenCloseQueryRequest) Reset() {
	*x = GetEquityDailyOpenCloseQueryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_polygon_rest_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetEquityDailyOpenCloseQueryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEquityDailyOpenCloseQueryRequest) ProtoMessage() {}

func (x *GetEquityDailyOpenCloseQueryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_polygon_rest_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEquityDailyOpenCloseQueryRequest.ProtoReflect.Descriptor instead.
func (*GetEquityDailyOpenCloseQueryRequest) Descriptor() ([]byte, []int) {
	return file_polygon_rest_proto_rawDescGZIP(), []int{39}
}

func (self *GetEquityDailyOpenCloseQueryRequest) TypeCode() uint32 {
	return GetEquityDailyOpenCloseQueryRequestTypeCode
}

type GetEquityDailyOpenCloseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetEquityDailyOpenCloseResponse) Reset() {
	*x = GetEquityDailyOpenCloseResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_polygon_rest_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetEquityDailyOpenCloseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEquityDailyOpenCloseResponse) ProtoMessage() {}

func (x *GetEquityDailyOpenCloseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_polygon_rest_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEquityDailyOpenCloseResponse.ProtoReflect.Descriptor instead.
func (*GetEquityDailyOpenCloseResponse) Descriptor() ([]byte, []int) {
	return file_polygon_rest_proto_rawDescGZIP(), []int{40}
}

func (self *GetEquityDailyOpenCloseResponse) TypeCode() uint32 {
	return GetEquityDailyOpenCloseResponseTypeCode
}

type GetEquityConditionMappingsQueryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetEquityConditionMappingsQueryRequest) Reset() {
	*x = GetEquityConditionMappingsQueryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_polygon_rest_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetEquityConditionMappingsQueryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEquityConditionMappingsQueryRequest) ProtoMessage() {}

func (x *GetEquityConditionMappingsQueryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_polygon_rest_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEquityConditionMappingsQueryRequest.ProtoReflect.Descriptor instead.
func (*GetEquityConditionMappingsQueryRequest) Descriptor() ([]byte, []int) {
	return file_polygon_rest_proto_rawDescGZIP(), []int{41}
}

func (self *GetEquityConditionMappingsQueryRequest) TypeCode() uint32 {
	return GetEquityConditionMappingsQueryRequestTypeCode
}

type GetEquityConditionMappingsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetEquityConditionMappingsResponse) Reset() {
	*x = GetEquityConditionMappingsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_polygon_rest_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetEquityConditionMappingsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEquityConditionMappingsResponse) ProtoMessage() {}

func (x *GetEquityConditionMappingsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_polygon_rest_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEquityConditionMappingsResponse.ProtoReflect.Descriptor instead.
func (*GetEquityConditionMappingsResponse) Descriptor() ([]byte, []int) {
	return file_polygon_rest_proto_rawDescGZIP(), []int{42}
}

func (self *GetEquityConditionMappingsResponse) TypeCode() uint32 {
	return GetEquityConditionMappingsResponseTypeCode
}

type GetEquitySnapshotAllTickersQueryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetEquitySnapshotAllTickersQueryRequest) Reset() {
	*x = GetEquitySnapshotAllTickersQueryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_polygon_rest_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetEquitySnapshotAllTickersQueryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEquitySnapshotAllTickersQueryRequest) ProtoMessage() {}

func (x *GetEquitySnapshotAllTickersQueryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_polygon_rest_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEquitySnapshotAllTickersQueryRequest.ProtoReflect.Descriptor instead.
func (*GetEquitySnapshotAllTickersQueryRequest) Descriptor() ([]byte, []int) {
	return file_polygon_rest_proto_rawDescGZIP(), []int{43}
}

func (self *GetEquitySnapshotAllTickersQueryRequest) TypeCode() uint32 {
	return GetEquitySnapshotAllTickersQueryRequestTypeCode
}

type GetEquitySnapshotAllTickersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetEquitySnapshotAllTickersResponse) Reset() {
	*x = GetEquitySnapshotAllTickersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_polygon_rest_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetEquitySnapshotAllTickersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEquitySnapshotAllTickersResponse) ProtoMessage() {}

func (x *GetEquitySnapshotAllTickersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_polygon_rest_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEquitySnapshotAllTickersResponse.ProtoReflect.Descriptor instead.
func (*GetEquitySnapshotAllTickersResponse) Descriptor() ([]byte, []int) {
	return file_polygon_rest_proto_rawDescGZIP(), []int{44}
}

func (self *GetEquitySnapshotAllTickersResponse) TypeCode() uint32 {
	return GetEquitySnapshotAllTickersResponseTypeCode
}

type GetEquitySnapshotSingleTickerQueryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetEquitySnapshotSingleTickerQueryRequest) Reset() {
	*x = GetEquitySnapshotSingleTickerQueryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_polygon_rest_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetEquitySnapshotSingleTickerQueryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEquitySnapshotSingleTickerQueryRequest) ProtoMessage() {}

func (x *GetEquitySnapshotSingleTickerQueryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_polygon_rest_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEquitySnapshotSingleTickerQueryRequest.ProtoReflect.Descriptor instead.
func (*GetEquitySnapshotSingleTickerQueryRequest) Descriptor() ([]byte, []int) {
	return file_polygon_rest_proto_rawDescGZIP(), []int{45}
}

func (self *GetEquitySnapshotSingleTickerQueryRequest) TypeCode() uint32 {
	return GetEquitySnapshotSingleTickerQueryRequestTypeCode
}

type GetEquitySnapshotSingleTickerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetEquitySnapshotSingleTickerResponse) Reset() {
	*x = GetEquitySnapshotSingleTickerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_polygon_rest_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetEquitySnapshotSingleTickerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEquitySnapshotSingleTickerResponse) ProtoMessage() {}

func (x *GetEquitySnapshotSingleTickerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_polygon_rest_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEquitySnapshotSingleTickerResponse.ProtoReflect.Descriptor instead.
func (*GetEquitySnapshotSingleTickerResponse) Descriptor() ([]byte, []int) {
	return file_polygon_rest_proto_rawDescGZIP(), []int{46}
}

func (self *GetEquitySnapshotSingleTickerResponse) TypeCode() uint32 {
	return GetEquitySnapshotSingleTickerResponseTypeCode
}

type GetEquitySnapshotGainersLosersQueryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetEquitySnapshotGainersLosersQueryRequest) Reset() {
	*x = GetEquitySnapshotGainersLosersQueryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_polygon_rest_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetEquitySnapshotGainersLosersQueryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEquitySnapshotGainersLosersQueryRequest) ProtoMessage() {}

func (x *GetEquitySnapshotGainersLosersQueryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_polygon_rest_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEquitySnapshotGainersLosersQueryRequest.ProtoReflect.Descriptor instead.
func (*GetEquitySnapshotGainersLosersQueryRequest) Descriptor() ([]byte, []int) {
	return file_polygon_rest_proto_rawDescGZIP(), []int{47}
}

func (self *GetEquitySnapshotGainersLosersQueryRequest) TypeCode() uint32 {
	return GetEquitySnapshotGainersLosersQueryRequestTypeCode
}

type GetEquitySnapshotGainersLosersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetEquitySnapshotGainersLosersResponse) Reset() {
	*x = GetEquitySnapshotGainersLosersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_polygon_rest_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetEquitySnapshotGainersLosersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEquitySnapshotGainersLosersResponse) ProtoMessage() {}

func (x *GetEquitySnapshotGainersLosersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_polygon_rest_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEquitySnapshotGainersLosersResponse.ProtoReflect.Descriptor instead.
func (*GetEquitySnapshotGainersLosersResponse) Descriptor() ([]byte, []int) {
	return file_polygon_rest_proto_rawDescGZIP(), []int{48}
}

func (self *GetEquitySnapshotGainersLosersResponse) TypeCode() uint32 {
	return GetEquitySnapshotGainersLosersResponseTypeCode
}

type GetForexPreviousCloseQueryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetForexPreviousCloseQueryRequest) Reset() {
	*x = GetForexPreviousCloseQueryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_polygon_rest_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetForexPreviousCloseQueryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetForexPreviousCloseQueryRequest) ProtoMessage() {}

func (x *GetForexPreviousCloseQueryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_polygon_rest_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetForexPreviousCloseQueryRequest.ProtoReflect.Descriptor instead.
func (*GetForexPreviousCloseQueryRequest) Descriptor() ([]byte, []int) {
	return file_polygon_rest_proto_rawDescGZIP(), []int{49}
}

func (self *GetForexPreviousCloseQueryRequest) TypeCode() uint32 {
	return GetForexPreviousCloseQueryRequestTypeCode
}

type GetForexPreviousCloseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetForexPreviousCloseResponse) Reset() {
	*x = GetForexPreviousCloseResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_polygon_rest_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetForexPreviousCloseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetForexPreviousCloseResponse) ProtoMessage() {}

func (x *GetForexPreviousCloseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_polygon_rest_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetForexPreviousCloseResponse.ProtoReflect.Descriptor instead.
func (*GetForexPreviousCloseResponse) Descriptor() ([]byte, []int) {
	return file_polygon_rest_proto_rawDescGZIP(), []int{50}
}

func (self *GetForexPreviousCloseResponse) TypeCode() uint32 {
	return GetForexPreviousCloseResponseTypeCode
}

type GetForexAggregatesBarsQueryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetForexAggregatesBarsQueryRequest) Reset() {
	*x = GetForexAggregatesBarsQueryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_polygon_rest_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetForexAggregatesBarsQueryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetForexAggregatesBarsQueryRequest) ProtoMessage() {}

func (x *GetForexAggregatesBarsQueryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_polygon_rest_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetForexAggregatesBarsQueryRequest.ProtoReflect.Descriptor instead.
func (*GetForexAggregatesBarsQueryRequest) Descriptor() ([]byte, []int) {
	return file_polygon_rest_proto_rawDescGZIP(), []int{51}
}

func (self *GetForexAggregatesBarsQueryRequest) TypeCode() uint32 {
	return GetForexAggregatesBarsQueryRequestTypeCode
}

type GetForexAggregatesBarsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetForexAggregatesBarsResponse) Reset() {
	*x = GetForexAggregatesBarsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_polygon_rest_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetForexAggregatesBarsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetForexAggregatesBarsResponse) ProtoMessage() {}

func (x *GetForexAggregatesBarsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_polygon_rest_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetForexAggregatesBarsResponse.ProtoReflect.Descriptor instead.
func (*GetForexAggregatesBarsResponse) Descriptor() ([]byte, []int) {
	return file_polygon_rest_proto_rawDescGZIP(), []int{52}
}

func (self *GetForexAggregatesBarsResponse) TypeCode() uint32 {
	return GetForexAggregatesBarsResponseTypeCode
}

type GetForexGroupedDailyBarsQueryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetForexGroupedDailyBarsQueryRequest) Reset() {
	*x = GetForexGroupedDailyBarsQueryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_polygon_rest_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetForexGroupedDailyBarsQueryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetForexGroupedDailyBarsQueryRequest) ProtoMessage() {}

func (x *GetForexGroupedDailyBarsQueryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_polygon_rest_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetForexGroupedDailyBarsQueryRequest.ProtoReflect.Descriptor instead.
func (*GetForexGroupedDailyBarsQueryRequest) Descriptor() ([]byte, []int) {
	return file_polygon_rest_proto_rawDescGZIP(), []int{53}
}

func (self *GetForexGroupedDailyBarsQueryRequest) TypeCode() uint32 {
	return GetForexGroupedDailyBarsQueryRequestTypeCode
}

type GetForexGroupedDailyBarsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetForexGroupedDailyBarsResponse) Reset() {
	*x = GetForexGroupedDailyBarsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_polygon_rest_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetForexGroupedDailyBarsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetForexGroupedDailyBarsResponse) ProtoMessage() {}

func (x *GetForexGroupedDailyBarsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_polygon_rest_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetForexGroupedDailyBarsResponse.ProtoReflect.Descriptor instead.
func (*GetForexGroupedDailyBarsResponse) Descriptor() ([]byte, []int) {
	return file_polygon_rest_proto_rawDescGZIP(), []int{54}
}

func (self *GetForexGroupedDailyBarsResponse) TypeCode() uint32 {
	return GetForexGroupedDailyBarsResponseTypeCode
}

type GetForexHistoricForexTicksQueryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetForexHistoricForexTicksQueryRequest) Reset() {
	*x = GetForexHistoricForexTicksQueryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_polygon_rest_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetForexHistoricForexTicksQueryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetForexHistoricForexTicksQueryRequest) ProtoMessage() {}

func (x *GetForexHistoricForexTicksQueryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_polygon_rest_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetForexHistoricForexTicksQueryRequest.ProtoReflect.Descriptor instead.
func (*GetForexHistoricForexTicksQueryRequest) Descriptor() ([]byte, []int) {
	return file_polygon_rest_proto_rawDescGZIP(), []int{55}
}

func (self *GetForexHistoricForexTicksQueryRequest) TypeCode() uint32 {
	return GetForexHistoricForexTicksQueryRequestTypeCode
}

type GetForexHistoricForexTicksResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetForexHistoricForexTicksResponse) Reset() {
	*x = GetForexHistoricForexTicksResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_polygon_rest_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetForexHistoricForexTicksResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetForexHistoricForexTicksResponse) ProtoMessage() {}

func (x *GetForexHistoricForexTicksResponse) ProtoReflect() protoreflect.Message {
	mi := &file_polygon_rest_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetForexHistoricForexTicksResponse.ProtoReflect.Descriptor instead.
func (*GetForexHistoricForexTicksResponse) Descriptor() ([]byte, []int) {
	return file_polygon_rest_proto_rawDescGZIP(), []int{56}
}

func (self *GetForexHistoricForexTicksResponse) TypeCode() uint32 {
	return GetForexHistoricForexTicksResponseTypeCode
}

type GetForexRealTimeCurrencyConversionQueryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetForexRealTimeCurrencyConversionQueryRequest) Reset() {
	*x = GetForexRealTimeCurrencyConversionQueryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_polygon_rest_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetForexRealTimeCurrencyConversionQueryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetForexRealTimeCurrencyConversionQueryRequest) ProtoMessage() {}

func (x *GetForexRealTimeCurrencyConversionQueryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_polygon_rest_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetForexRealTimeCurrencyConversionQueryRequest.ProtoReflect.Descriptor instead.
func (*GetForexRealTimeCurrencyConversionQueryRequest) Descriptor() ([]byte, []int) {
	return file_polygon_rest_proto_rawDescGZIP(), []int{57}
}

func (self *GetForexRealTimeCurrencyConversionQueryRequest) TypeCode() uint32 {
	return GetForexRealTimeCurrencyConversionQueryRequestTypeCode
}

type GetForexRealTimeCurrencyConversionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetForexRealTimeCurrencyConversionResponse) Reset() {
	*x = GetForexRealTimeCurrencyConversionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_polygon_rest_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetForexRealTimeCurrencyConversionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetForexRealTimeCurrencyConversionResponse) ProtoMessage() {}

func (x *GetForexRealTimeCurrencyConversionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_polygon_rest_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetForexRealTimeCurrencyConversionResponse.ProtoReflect.Descriptor instead.
func (*GetForexRealTimeCurrencyConversionResponse) Descriptor() ([]byte, []int) {
	return file_polygon_rest_proto_rawDescGZIP(), []int{58}
}

func (self *GetForexRealTimeCurrencyConversionResponse) TypeCode() uint32 {
	return GetForexRealTimeCurrencyConversionResponseTypeCode
}

type GetForexLastQuoteForCurrencyPairQueryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetForexLastQuoteForCurrencyPairQueryRequest) Reset() {
	*x = GetForexLastQuoteForCurrencyPairQueryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_polygon_rest_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetForexLastQuoteForCurrencyPairQueryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetForexLastQuoteForCurrencyPairQueryRequest) ProtoMessage() {}

func (x *GetForexLastQuoteForCurrencyPairQueryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_polygon_rest_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetForexLastQuoteForCurrencyPairQueryRequest.ProtoReflect.Descriptor instead.
func (*GetForexLastQuoteForCurrencyPairQueryRequest) Descriptor() ([]byte, []int) {
	return file_polygon_rest_proto_rawDescGZIP(), []int{59}
}

func (self *GetForexLastQuoteForCurrencyPairQueryRequest) TypeCode() uint32 {
	return GetForexLastQuoteForCurrencyPairQueryRequestTypeCode
}

type GetForexLastQuoteForCurrencyPairResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetForexLastQuoteForCurrencyPairResponse) Reset() {
	*x = GetForexLastQuoteForCurrencyPairResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_polygon_rest_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetForexLastQuoteForCurrencyPairResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetForexLastQuoteForCurrencyPairResponse) ProtoMessage() {}

func (x *GetForexLastQuoteForCurrencyPairResponse) ProtoReflect() protoreflect.Message {
	mi := &file_polygon_rest_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetForexLastQuoteForCurrencyPairResponse.ProtoReflect.Descriptor instead.
func (*GetForexLastQuoteForCurrencyPairResponse) Descriptor() ([]byte, []int) {
	return file_polygon_rest_proto_rawDescGZIP(), []int{60}
}

func (self *GetForexLastQuoteForCurrencyPairResponse) TypeCode() uint32 {
	return GetForexLastQuoteForCurrencyPairResponseTypeCode
}

type GetForexSnapshotAllTickersQueryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetForexSnapshotAllTickersQueryRequest) Reset() {
	*x = GetForexSnapshotAllTickersQueryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_polygon_rest_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetForexSnapshotAllTickersQueryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetForexSnapshotAllTickersQueryRequest) ProtoMessage() {}

func (x *GetForexSnapshotAllTickersQueryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_polygon_rest_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetForexSnapshotAllTickersQueryRequest.ProtoReflect.Descriptor instead.
func (*GetForexSnapshotAllTickersQueryRequest) Descriptor() ([]byte, []int) {
	return file_polygon_rest_proto_rawDescGZIP(), []int{61}
}

func (self *GetForexSnapshotAllTickersQueryRequest) TypeCode() uint32 {
	return GetForexSnapshotAllTickersQueryRequestTypeCode
}

type GetForexSnapshotAllTickersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetForexSnapshotAllTickersResponse) Reset() {
	*x = GetForexSnapshotAllTickersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_polygon_rest_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetForexSnapshotAllTickersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetForexSnapshotAllTickersResponse) ProtoMessage() {}

func (x *GetForexSnapshotAllTickersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_polygon_rest_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetForexSnapshotAllTickersResponse.ProtoReflect.Descriptor instead.
func (*GetForexSnapshotAllTickersResponse) Descriptor() ([]byte, []int) {
	return file_polygon_rest_proto_rawDescGZIP(), []int{62}
}

func (self *GetForexSnapshotAllTickersResponse) TypeCode() uint32 {
	return GetForexSnapshotAllTickersResponseTypeCode
}

type GetForexSnapshotGainersLosersQueryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetForexSnapshotGainersLosersQueryRequest) Reset() {
	*x = GetForexSnapshotGainersLosersQueryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_polygon_rest_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetForexSnapshotGainersLosersQueryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetForexSnapshotGainersLosersQueryRequest) ProtoMessage() {}

func (x *GetForexSnapshotGainersLosersQueryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_polygon_rest_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetForexSnapshotGainersLosersQueryRequest.ProtoReflect.Descriptor instead.
func (*GetForexSnapshotGainersLosersQueryRequest) Descriptor() ([]byte, []int) {
	return file_polygon_rest_proto_rawDescGZIP(), []int{63}
}

func (self *GetForexSnapshotGainersLosersQueryRequest) TypeCode() uint32 {
	return GetForexSnapshotGainersLosersQueryRequestTypeCode
}

type GetForexSnapshotGainersLosersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetForexSnapshotGainersLosersResponse) Reset() {
	*x = GetForexSnapshotGainersLosersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_polygon_rest_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetForexSnapshotGainersLosersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetForexSnapshotGainersLosersResponse) ProtoMessage() {}

func (x *GetForexSnapshotGainersLosersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_polygon_rest_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetForexSnapshotGainersLosersResponse.ProtoReflect.Descriptor instead.
func (*GetForexSnapshotGainersLosersResponse) Descriptor() ([]byte, []int) {
	return file_polygon_rest_proto_rawDescGZIP(), []int{64}
}

func (self *GetForexSnapshotGainersLosersResponse) TypeCode() uint32 {
	return GetForexSnapshotGainersLosersResponseTypeCode
}

type GetCryptoPreviousCloseQueryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetCryptoPreviousCloseQueryRequest) Reset() {
	*x = GetCryptoPreviousCloseQueryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_polygon_rest_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCryptoPreviousCloseQueryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCryptoPreviousCloseQueryRequest) ProtoMessage() {}

func (x *GetCryptoPreviousCloseQueryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_polygon_rest_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCryptoPreviousCloseQueryRequest.ProtoReflect.Descriptor instead.
func (*GetCryptoPreviousCloseQueryRequest) Descriptor() ([]byte, []int) {
	return file_polygon_rest_proto_rawDescGZIP(), []int{65}
}

func (self *GetCryptoPreviousCloseQueryRequest) TypeCode() uint32 {
	return GetCryptoPreviousCloseQueryRequestTypeCode
}

type GetCryptoPreviousCloseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetCryptoPreviousCloseResponse) Reset() {
	*x = GetCryptoPreviousCloseResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_polygon_rest_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCryptoPreviousCloseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCryptoPreviousCloseResponse) ProtoMessage() {}

func (x *GetCryptoPreviousCloseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_polygon_rest_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCryptoPreviousCloseResponse.ProtoReflect.Descriptor instead.
func (*GetCryptoPreviousCloseResponse) Descriptor() ([]byte, []int) {
	return file_polygon_rest_proto_rawDescGZIP(), []int{66}
}

func (self *GetCryptoPreviousCloseResponse) TypeCode() uint32 {
	return GetCryptoPreviousCloseResponseTypeCode
}

type GetCryptoAggregatesBarsQueryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetCryptoAggregatesBarsQueryRequest) Reset() {
	*x = GetCryptoAggregatesBarsQueryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_polygon_rest_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCryptoAggregatesBarsQueryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCryptoAggregatesBarsQueryRequest) ProtoMessage() {}

func (x *GetCryptoAggregatesBarsQueryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_polygon_rest_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCryptoAggregatesBarsQueryRequest.ProtoReflect.Descriptor instead.
func (*GetCryptoAggregatesBarsQueryRequest) Descriptor() ([]byte, []int) {
	return file_polygon_rest_proto_rawDescGZIP(), []int{67}
}

func (self *GetCryptoAggregatesBarsQueryRequest) TypeCode() uint32 {
	return GetCryptoAggregatesBarsQueryRequestTypeCode
}

type GetCryptoAggregatesBarsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetCryptoAggregatesBarsResponse) Reset() {
	*x = GetCryptoAggregatesBarsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_polygon_rest_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCryptoAggregatesBarsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCryptoAggregatesBarsResponse) ProtoMessage() {}

func (x *GetCryptoAggregatesBarsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_polygon_rest_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCryptoAggregatesBarsResponse.ProtoReflect.Descriptor instead.
func (*GetCryptoAggregatesBarsResponse) Descriptor() ([]byte, []int) {
	return file_polygon_rest_proto_rawDescGZIP(), []int{68}
}

func (self *GetCryptoAggregatesBarsResponse) TypeCode() uint32 {
	return GetCryptoAggregatesBarsResponseTypeCode
}

type GetCryptoGroupedDailyBarsQueryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetCryptoGroupedDailyBarsQueryRequest) Reset() {
	*x = GetCryptoGroupedDailyBarsQueryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_polygon_rest_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCryptoGroupedDailyBarsQueryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCryptoGroupedDailyBarsQueryRequest) ProtoMessage() {}

func (x *GetCryptoGroupedDailyBarsQueryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_polygon_rest_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCryptoGroupedDailyBarsQueryRequest.ProtoReflect.Descriptor instead.
func (*GetCryptoGroupedDailyBarsQueryRequest) Descriptor() ([]byte, []int) {
	return file_polygon_rest_proto_rawDescGZIP(), []int{69}
}

func (self *GetCryptoGroupedDailyBarsQueryRequest) TypeCode() uint32 {
	return GetCryptoGroupedDailyBarsQueryRequestTypeCode
}

type GetCryptoGroupedDailyBarsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetCryptoGroupedDailyBarsResponse) Reset() {
	*x = GetCryptoGroupedDailyBarsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_polygon_rest_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCryptoGroupedDailyBarsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCryptoGroupedDailyBarsResponse) ProtoMessage() {}

func (x *GetCryptoGroupedDailyBarsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_polygon_rest_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCryptoGroupedDailyBarsResponse.ProtoReflect.Descriptor instead.
func (*GetCryptoGroupedDailyBarsResponse) Descriptor() ([]byte, []int) {
	return file_polygon_rest_proto_rawDescGZIP(), []int{70}
}

func (self *GetCryptoGroupedDailyBarsResponse) TypeCode() uint32 {
	return GetCryptoGroupedDailyBarsResponseTypeCode
}

type GetCryptoCryptoExchangesQueryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetCryptoCryptoExchangesQueryRequest) Reset() {
	*x = GetCryptoCryptoExchangesQueryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_polygon_rest_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCryptoCryptoExchangesQueryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCryptoCryptoExchangesQueryRequest) ProtoMessage() {}

func (x *GetCryptoCryptoExchangesQueryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_polygon_rest_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCryptoCryptoExchangesQueryRequest.ProtoReflect.Descriptor instead.
func (*GetCryptoCryptoExchangesQueryRequest) Descriptor() ([]byte, []int) {
	return file_polygon_rest_proto_rawDescGZIP(), []int{71}
}

func (self *GetCryptoCryptoExchangesQueryRequest) TypeCode() uint32 {
	return GetCryptoCryptoExchangesQueryRequestTypeCode
}

type GetCryptoCryptoExchangesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetCryptoCryptoExchangesResponse) Reset() {
	*x = GetCryptoCryptoExchangesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_polygon_rest_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCryptoCryptoExchangesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCryptoCryptoExchangesResponse) ProtoMessage() {}

func (x *GetCryptoCryptoExchangesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_polygon_rest_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCryptoCryptoExchangesResponse.ProtoReflect.Descriptor instead.
func (*GetCryptoCryptoExchangesResponse) Descriptor() ([]byte, []int) {
	return file_polygon_rest_proto_rawDescGZIP(), []int{72}
}

func (self *GetCryptoCryptoExchangesResponse) TypeCode() uint32 {
	return GetCryptoCryptoExchangesResponseTypeCode
}

type GetCryptoLastTradeForCryptoPairQueryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetCryptoLastTradeForCryptoPairQueryRequest) Reset() {
	*x = GetCryptoLastTradeForCryptoPairQueryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_polygon_rest_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCryptoLastTradeForCryptoPairQueryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCryptoLastTradeForCryptoPairQueryRequest) ProtoMessage() {}

func (x *GetCryptoLastTradeForCryptoPairQueryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_polygon_rest_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCryptoLastTradeForCryptoPairQueryRequest.ProtoReflect.Descriptor instead.
func (*GetCryptoLastTradeForCryptoPairQueryRequest) Descriptor() ([]byte, []int) {
	return file_polygon_rest_proto_rawDescGZIP(), []int{73}
}

func (self *GetCryptoLastTradeForCryptoPairQueryRequest) TypeCode() uint32 {
	return GetCryptoLastTradeForCryptoPairQueryRequestTypeCode
}

type GetCryptoLastTradeForCryptoPairResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetCryptoLastTradeForCryptoPairResponse) Reset() {
	*x = GetCryptoLastTradeForCryptoPairResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_polygon_rest_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCryptoLastTradeForCryptoPairResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCryptoLastTradeForCryptoPairResponse) ProtoMessage() {}

func (x *GetCryptoLastTradeForCryptoPairResponse) ProtoReflect() protoreflect.Message {
	mi := &file_polygon_rest_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCryptoLastTradeForCryptoPairResponse.ProtoReflect.Descriptor instead.
func (*GetCryptoLastTradeForCryptoPairResponse) Descriptor() ([]byte, []int) {
	return file_polygon_rest_proto_rawDescGZIP(), []int{74}
}

func (self *GetCryptoLastTradeForCryptoPairResponse) TypeCode() uint32 {
	return GetCryptoLastTradeForCryptoPairResponseTypeCode
}

type GetCryptoDailyOpenCloseQueryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetCryptoDailyOpenCloseQueryRequest) Reset() {
	*x = GetCryptoDailyOpenCloseQueryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_polygon_rest_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCryptoDailyOpenCloseQueryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCryptoDailyOpenCloseQueryRequest) ProtoMessage() {}

func (x *GetCryptoDailyOpenCloseQueryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_polygon_rest_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCryptoDailyOpenCloseQueryRequest.ProtoReflect.Descriptor instead.
func (*GetCryptoDailyOpenCloseQueryRequest) Descriptor() ([]byte, []int) {
	return file_polygon_rest_proto_rawDescGZIP(), []int{75}
}

func (self *GetCryptoDailyOpenCloseQueryRequest) TypeCode() uint32 {
	return GetCryptoDailyOpenCloseQueryRequestTypeCode
}

type GetCryptoDailyOpenCloseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetCryptoDailyOpenCloseResponse) Reset() {
	*x = GetCryptoDailyOpenCloseResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_polygon_rest_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCryptoDailyOpenCloseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCryptoDailyOpenCloseResponse) ProtoMessage() {}

func (x *GetCryptoDailyOpenCloseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_polygon_rest_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCryptoDailyOpenCloseResponse.ProtoReflect.Descriptor instead.
func (*GetCryptoDailyOpenCloseResponse) Descriptor() ([]byte, []int) {
	return file_polygon_rest_proto_rawDescGZIP(), []int{76}
}

func (self *GetCryptoDailyOpenCloseResponse) TypeCode() uint32 {
	return GetCryptoDailyOpenCloseResponseTypeCode
}

type GetCryptoHistoricCryptoTradesQueryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetCryptoHistoricCryptoTradesQueryRequest) Reset() {
	*x = GetCryptoHistoricCryptoTradesQueryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_polygon_rest_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCryptoHistoricCryptoTradesQueryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCryptoHistoricCryptoTradesQueryRequest) ProtoMessage() {}

func (x *GetCryptoHistoricCryptoTradesQueryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_polygon_rest_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCryptoHistoricCryptoTradesQueryRequest.ProtoReflect.Descriptor instead.
func (*GetCryptoHistoricCryptoTradesQueryRequest) Descriptor() ([]byte, []int) {
	return file_polygon_rest_proto_rawDescGZIP(), []int{77}
}

func (self *GetCryptoHistoricCryptoTradesQueryRequest) TypeCode() uint32 {
	return GetCryptoHistoricCryptoTradesQueryRequestTypeCode
}

type GetCryptoHistoricCryptoTradesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetCryptoHistoricCryptoTradesResponse) Reset() {
	*x = GetCryptoHistoricCryptoTradesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_polygon_rest_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCryptoHistoricCryptoTradesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCryptoHistoricCryptoTradesResponse) ProtoMessage() {}

func (x *GetCryptoHistoricCryptoTradesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_polygon_rest_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCryptoHistoricCryptoTradesResponse.ProtoReflect.Descriptor instead.
func (*GetCryptoHistoricCryptoTradesResponse) Descriptor() ([]byte, []int) {
	return file_polygon_rest_proto_rawDescGZIP(), []int{78}
}

func (self *GetCryptoHistoricCryptoTradesResponse) TypeCode() uint32 {
	return GetCryptoHistoricCryptoTradesResponseTypeCode
}

type GetCryptoSnapshotAllTickersQueryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetCryptoSnapshotAllTickersQueryRequest) Reset() {
	*x = GetCryptoSnapshotAllTickersQueryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_polygon_rest_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCryptoSnapshotAllTickersQueryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCryptoSnapshotAllTickersQueryRequest) ProtoMessage() {}

func (x *GetCryptoSnapshotAllTickersQueryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_polygon_rest_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCryptoSnapshotAllTickersQueryRequest.ProtoReflect.Descriptor instead.
func (*GetCryptoSnapshotAllTickersQueryRequest) Descriptor() ([]byte, []int) {
	return file_polygon_rest_proto_rawDescGZIP(), []int{79}
}

func (self *GetCryptoSnapshotAllTickersQueryRequest) TypeCode() uint32 {
	return GetCryptoSnapshotAllTickersQueryRequestTypeCode
}

type GetCryptoSnapshotAllTickersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetCryptoSnapshotAllTickersResponse) Reset() {
	*x = GetCryptoSnapshotAllTickersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_polygon_rest_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCryptoSnapshotAllTickersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCryptoSnapshotAllTickersResponse) ProtoMessage() {}

func (x *GetCryptoSnapshotAllTickersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_polygon_rest_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCryptoSnapshotAllTickersResponse.ProtoReflect.Descriptor instead.
func (*GetCryptoSnapshotAllTickersResponse) Descriptor() ([]byte, []int) {
	return file_polygon_rest_proto_rawDescGZIP(), []int{80}
}

func (self *GetCryptoSnapshotAllTickersResponse) TypeCode() uint32 {
	return GetCryptoSnapshotAllTickersResponseTypeCode
}

type GetCryptoSnapshotSingleTickerQueryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetCryptoSnapshotSingleTickerQueryRequest) Reset() {
	*x = GetCryptoSnapshotSingleTickerQueryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_polygon_rest_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCryptoSnapshotSingleTickerQueryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCryptoSnapshotSingleTickerQueryRequest) ProtoMessage() {}

func (x *GetCryptoSnapshotSingleTickerQueryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_polygon_rest_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCryptoSnapshotSingleTickerQueryRequest.ProtoReflect.Descriptor instead.
func (*GetCryptoSnapshotSingleTickerQueryRequest) Descriptor() ([]byte, []int) {
	return file_polygon_rest_proto_rawDescGZIP(), []int{81}
}

func (self *GetCryptoSnapshotSingleTickerQueryRequest) TypeCode() uint32 {
	return GetCryptoSnapshotSingleTickerQueryRequestTypeCode
}

type GetCryptoSnapshotSingleTickerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetCryptoSnapshotSingleTickerResponse) Reset() {
	*x = GetCryptoSnapshotSingleTickerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_polygon_rest_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCryptoSnapshotSingleTickerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCryptoSnapshotSingleTickerResponse) ProtoMessage() {}

func (x *GetCryptoSnapshotSingleTickerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_polygon_rest_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCryptoSnapshotSingleTickerResponse.ProtoReflect.Descriptor instead.
func (*GetCryptoSnapshotSingleTickerResponse) Descriptor() ([]byte, []int) {
	return file_polygon_rest_proto_rawDescGZIP(), []int{82}
}

func (self *GetCryptoSnapshotSingleTickerResponse) TypeCode() uint32 {
	return GetCryptoSnapshotSingleTickerResponseTypeCode
}

type GetCryptoSnapshotSingleTickerFullBookL2QueryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetCryptoSnapshotSingleTickerFullBookL2QueryRequest) Reset() {
	*x = GetCryptoSnapshotSingleTickerFullBookL2QueryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_polygon_rest_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCryptoSnapshotSingleTickerFullBookL2QueryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCryptoSnapshotSingleTickerFullBookL2QueryRequest) ProtoMessage() {}

func (x *GetCryptoSnapshotSingleTickerFullBookL2QueryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_polygon_rest_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCryptoSnapshotSingleTickerFullBookL2QueryRequest.ProtoReflect.Descriptor instead.
func (*GetCryptoSnapshotSingleTickerFullBookL2QueryRequest) Descriptor() ([]byte, []int) {
	return file_polygon_rest_proto_rawDescGZIP(), []int{83}
}

func (self *GetCryptoSnapshotSingleTickerFullBookL2QueryRequest) TypeCode() uint32 {
	return GetCryptoSnapshotSingleTickerFullBookL2QueryRequestTypeCode
}

type GetCryptoSnapshotSingleTickerFullBookL2Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetCryptoSnapshotSingleTickerFullBookL2Response) Reset() {
	*x = GetCryptoSnapshotSingleTickerFullBookL2Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_polygon_rest_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCryptoSnapshotSingleTickerFullBookL2Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCryptoSnapshotSingleTickerFullBookL2Response) ProtoMessage() {}

func (x *GetCryptoSnapshotSingleTickerFullBookL2Response) ProtoReflect() protoreflect.Message {
	mi := &file_polygon_rest_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCryptoSnapshotSingleTickerFullBookL2Response.ProtoReflect.Descriptor instead.
func (*GetCryptoSnapshotSingleTickerFullBookL2Response) Descriptor() ([]byte, []int) {
	return file_polygon_rest_proto_rawDescGZIP(), []int{84}
}

func (self *GetCryptoSnapshotSingleTickerFullBookL2Response) TypeCode() uint32 {
	return GetCryptoSnapshotSingleTickerFullBookL2ResponseTypeCode
}

type GetCryptoSnapshotGainersLosersQueryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetCryptoSnapshotGainersLosersQueryRequest) Reset() {
	*x = GetCryptoSnapshotGainersLosersQueryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_polygon_rest_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCryptoSnapshotGainersLosersQueryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCryptoSnapshotGainersLosersQueryRequest) ProtoMessage() {}

func (x *GetCryptoSnapshotGainersLosersQueryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_polygon_rest_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCryptoSnapshotGainersLosersQueryRequest.ProtoReflect.Descriptor instead.
func (*GetCryptoSnapshotGainersLosersQueryRequest) Descriptor() ([]byte, []int) {
	return file_polygon_rest_proto_rawDescGZIP(), []int{85}
}

func (self *GetCryptoSnapshotGainersLosersQueryRequest) TypeCode() uint32 {
	return GetCryptoSnapshotGainersLosersQueryRequestTypeCode
}

type GetCryptoSnapshotGainersLosersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetCryptoSnapshotGainersLosersResponse) Reset() {
	*x = GetCryptoSnapshotGainersLosersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_polygon_rest_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCryptoSnapshotGainersLosersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCryptoSnapshotGainersLosersResponse) ProtoMessage() {}

func (x *GetCryptoSnapshotGainersLosersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_polygon_rest_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCryptoSnapshotGainersLosersResponse.ProtoReflect.Descriptor instead.
func (*GetCryptoSnapshotGainersLosersResponse) Descriptor() ([]byte, []int) {
	return file_polygon_rest_proto_rawDescGZIP(), []int{86}
}

func (self *GetCryptoSnapshotGainersLosersResponse) TypeCode() uint32 {
	return GetCryptoSnapshotGainersLosersResponseTypeCode
}

var File_polygon_rest_proto protoreflect.FileDescriptor

var file_polygon_rest_proto_rawDesc = []byte{
	0x0a, 0x12, 0x70, 0x6f, 0x6c, 0x79, 0x67, 0x6f, 0x6e, 0x2f, 0x72, 0x65, 0x73, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x6c, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0xb5, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x54, 0x69, 0x63,
	0x6b, 0x65, 0x72, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73,
	0x6f, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x65, 0x72, 0x70, 0x61,
	0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x70, 0x65, 0x72, 0x70, 0x61, 0x67,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x22, 0xde, 0x03,
	0x0a, 0x06, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x69, 0x63, 0x6b,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x6f,
	0x63, 0x61, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x69, 0x6d,
	0x61, 0x72, 0x79, 0x45, 0x78, 0x63, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70,
	0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x45, 0x78, 0x63, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x28,
	0x0a, 0x05, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x05, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x34, 0x0a, 0x07, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x10,
	0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c,
	0x12, 0x28, 0x0a, 0x05, 0x61, 0x74, 0x74, 0x72, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x05, 0x61, 0x74, 0x74, 0x72, 0x73, 0x1a, 0x38, 0x0a, 0x0a, 0x43, 0x6f,
	0x64, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x38, 0x0a, 0x0a, 0x41, 0x74, 0x74, 0x72, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x36,
	0x0a, 0x11, 0x47, 0x65, 0x74, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x07, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x52, 0x07, 0x53,
	0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x22, 0x94, 0x02, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x54, 0x69,
	0x63, 0x6b, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x38, 0x0a, 0x05, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x47, 0x0a, 0x0a, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x54, 0x79, 0x70, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x54, 0x79,
	0x70, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x54,
	0x79, 0x70, 0x65, 0x73, 0x1a, 0x38, 0x0a, 0x0a, 0x54, 0x79, 0x70, 0x65, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3d,
	0x0a, 0x0f, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x54, 0x79, 0x70, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x94, 0x04,
	0x0a, 0x18, 0x47, 0x65, 0x74, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x6f,
	0x67, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x6f, 0x67, 0x6f, 0x12, 0x1a,
	0x0a, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x69, 0x6b, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x63, 0x69, 0x6b, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x6c, 0x6f, 0x6f,
	0x6d, 0x62, 0x65, 0x72, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x6c, 0x6f,
	0x6f, 0x6d, 0x62, 0x65, 0x72, 0x67, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x65, 0x69, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6c, 0x65, 0x69, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x69, 0x63, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x73, 0x69, 0x63, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x64, 0x75, 0x73, 0x74, 0x72, 0x79,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x64, 0x75, 0x73, 0x74, 0x72, 0x79,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x63, 0x61, 0x70, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x63, 0x61, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79,
	0x65, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x65, 0x6d, 0x70, 0x6c, 0x6f,
	0x79, 0x65, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x65,
	0x6f, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x63, 0x65, 0x6f, 0x12, 0x10, 0x0a, 0x03,
	0x75, 0x72, 0x6c, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x20,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x69, 0x6d, 0x69, 0x6c, 0x61, 0x72, 0x18, 0x12, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x07, 0x73, 0x69, 0x6d, 0x69, 0x6c, 0x61, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61,
	0x67, 0x73, 0x18, 0x13, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x1a,
	0x0a, 0x08, 0x6c, 0x69, 0x73, 0x74, 0x64, 0x61, 0x74, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6c, 0x69, 0x73, 0x74, 0x64, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x22, 0x61, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x54, 0x69, 0x63, 0x6b, 0x65,
	0x72, 0x4e, 0x65, 0x77, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x65, 0x72,
	0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x70, 0x65, 0x72, 0x70,
	0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x22, 0x06, 0x0a, 0x04, 0x4e, 0x65, 0x77, 0x73, 0x22,
	0x32, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x4e, 0x65, 0x77, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x19, 0x0a, 0x04, 0x4e, 0x65, 0x77, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x4e, 0x65, 0x77, 0x73, 0x52, 0x04, 0x4e,
	0x65, 0x77, 0x73, 0x22, 0x34, 0x0a, 0x06, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x22, 0x37, 0x0a, 0x12, 0x47, 0x65, 0x74,
	0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x21, 0x0a, 0x07, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x07, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x52, 0x07, 0x4d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x73, 0x22, 0x34, 0x0a, 0x06, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x6f,
	0x63, 0x61, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x37, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x4c,
	0x6f, 0x63, 0x61, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21,
	0x0a, 0x07, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x07, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x52, 0x07, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x65,
	0x73, 0x22, 0xed, 0x01, 0x0a, 0x05, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x74,
	0x69, 0x63, 0x6b, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x69, 0x63,
	0x6b, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x78, 0x44, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x78, 0x44, 0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x70,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x44, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x22, 0x0a,
	0x0c, 0x64, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x65, 0x64, 0x44, 0x61, 0x74,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x05, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x6f, 0x66, 0x61, 0x63,
	0x74, 0x6f, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x74, 0x6f, 0x66, 0x61, 0x63,
	0x74, 0x6f, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x6f, 0x72, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x66, 0x6f, 0x72, 0x66, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x22, 0x38, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x53, 0x70, 0x6c,
	0x69, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x06, 0x53,
	0x70, 0x6c, 0x69, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x53, 0x70,
	0x6c, 0x69, 0x74, 0x52, 0x06, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x73, 0x22, 0xfe, 0x01, 0x0a, 0x08,
	0x44, 0x69, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62,
	0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x78, 0x44, 0x61, 0x74, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x78, 0x44, 0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x44, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x22,
	0x0a, 0x0c, 0x64, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x65, 0x64, 0x44, 0x61,
	0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x71, 0x75,
	0x61, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x71,
	0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x6c, 0x61, 0x67,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x6c, 0x61, 0x67, 0x22, 0x44, 0x0a, 0x19,
	0x47, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x44, 0x69, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x64,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x09, 0x44, 0x69, 0x76,
	0x69, 0x64, 0x65, 0x6e, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x44,
	0x69, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x64, 0x52, 0x09, 0x44, 0x69, 0x76, 0x69, 0x64, 0x65, 0x6e,
	0x64, 0x73, 0x22, 0x5e, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x46, 0x69,
	0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x6f,
	0x72, 0x74, 0x22, 0x83, 0x2c, 0x0a, 0x09, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c,
	0x12, 0x16, 0x0a, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x12, 0x22, 0x0a, 0x0c, 0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x44, 0x61, 0x74, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x12, 0x50, 0x0a, 0x23, 0x61, 0x63, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65,
	0x64, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x68, 0x65, 0x6e, 0x73,
	0x69, 0x76, 0x65, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x23, 0x61, 0x63, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x4f, 0x74, 0x68, 0x65,
	0x72, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x68, 0x65, 0x6e, 0x73, 0x69, 0x76, 0x65, 0x49, 0x6e,
	0x63, 0x6f, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x12, 0x24, 0x0a, 0x0d,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0d, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x41, 0x76, 0x65, 0x72, 0x61,
	0x67, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x73, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x54, 0x75, 0x72, 0x6e, 0x6f, 0x76, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0d, 0x61, 0x73, 0x73, 0x65, 0x74, 0x54, 0x75, 0x72, 0x6e, 0x6f, 0x76, 0x65, 0x72, 0x12, 0x2a,
	0x0a, 0x10, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x4e, 0x6f, 0x6e, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73,
	0x4e, 0x6f, 0x6e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x62, 0x6f,
	0x6f, 0x6b, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x50, 0x65, 0x72, 0x53, 0x68, 0x61, 0x72, 0x65, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x62, 0x6f, 0x6f, 0x6b, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x50, 0x65, 0x72, 0x53, 0x68, 0x61, 0x72, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x63, 0x61, 0x70, 0x69,
	0x74, 0x61, 0x6c, 0x45, 0x78, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x74, 0x75, 0x72, 0x65, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x63, 0x61, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x45, 0x78, 0x70,
	0x65, 0x6e, 0x64, 0x69, 0x74, 0x75, 0x72, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x63, 0x61, 0x73, 0x68,
	0x41, 0x6e, 0x64, 0x45, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x63, 0x61, 0x73, 0x68, 0x41, 0x6e, 0x64, 0x45, 0x71, 0x75,
	0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x34, 0x0a, 0x15, 0x63, 0x61, 0x73, 0x68,
	0x41, 0x6e, 0x64, 0x45, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x73, 0x55, 0x53,
	0x44, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x63, 0x61, 0x73, 0x68, 0x41, 0x6e, 0x64,
	0x45, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x73, 0x55, 0x53, 0x44, 0x12, 0x24,
	0x0a, 0x0d, 0x63, 0x6f, 0x73, 0x74, 0x4f, 0x66, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x63, 0x6f, 0x73, 0x74, 0x4f, 0x66, 0x52, 0x65, 0x76,
	0x65, 0x6e, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x12, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x64, 0x49, 0x6e,
	0x63, 0x6f, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52,
	0x61, 0x74, 0x69, 0x6f, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x2c, 0x0a, 0x11, 0x64, 0x65, 0x62, 0x74,
	0x54, 0x6f, 0x45, 0x71, 0x75, 0x69, 0x74, 0x79, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x11, 0x64, 0x65, 0x62, 0x74, 0x54, 0x6f, 0x45, 0x71, 0x75, 0x69, 0x74,
	0x79, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x62, 0x74, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x64, 0x65, 0x62, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65,
	0x62, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0b, 0x64, 0x65, 0x62, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0e,
	0x64, 0x65, 0x62, 0x74, 0x4e, 0x6f, 0x6e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x64, 0x65, 0x62, 0x74, 0x4e, 0x6f, 0x6e, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x62, 0x74, 0x55, 0x53, 0x44, 0x18,
	0x17, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x64, 0x65, 0x62, 0x74, 0x55, 0x53, 0x44, 0x12, 0x28,
	0x0a, 0x0f, 0x64, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75,
	0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x64, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65,
	0x64, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x12, 0x52, 0x0a, 0x24, 0x64, 0x65, 0x70, 0x72,
	0x65, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6d, 0x6f, 0x72, 0x74, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6e, 0x64, 0x41, 0x63, 0x63, 0x72, 0x65, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x19, 0x20, 0x01, 0x28, 0x03, 0x52, 0x24, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x69, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6d, 0x6f, 0x72, 0x74, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x41, 0x6e, 0x64, 0x41, 0x63, 0x63, 0x72, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08,
	0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x73, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x64, 0x69, 0x76, 0x69,
	0x64, 0x65, 0x6e, 0x64, 0x59, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0d, 0x64, 0x69, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x64, 0x59, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x42,
	0x0a, 0x1c, 0x64, 0x69, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x64, 0x73, 0x50, 0x65, 0x72, 0x42, 0x61,
	0x73, 0x69, 0x63, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x18, 0x1c,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x1c, 0x64, 0x69, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x64, 0x73, 0x50,
	0x65, 0x72, 0x42, 0x61, 0x73, 0x69, 0x63, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x53, 0x68, 0x61,
	0x72, 0x65, 0x12, 0x3e, 0x0a, 0x1a, 0x65, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x42, 0x65, 0x66,
	0x6f, 0x72, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x54, 0x61, 0x78, 0x65, 0x73,
	0x18, 0x1d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1a, 0x65, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x42,
	0x65, 0x66, 0x6f, 0x72, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x54, 0x61, 0x78,
	0x65, 0x73, 0x12, 0x70, 0x0a, 0x33, 0x65, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x42, 0x65,
	0x66, 0x6f, 0x72, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x54, 0x61, 0x78, 0x65,
	0x73, 0x44, 0x65, 0x70, 0x72, 0x65, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6d, 0x6f,
	0x72, 0x74, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x33, 0x65, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x54, 0x61, 0x78, 0x65, 0x73, 0x44, 0x65, 0x70, 0x72,
	0x65, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6d, 0x6f, 0x72, 0x74, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x45, 0x42, 0x49, 0x54, 0x44, 0x41, 0x4d, 0x61,
	0x72, 0x67, 0x69, 0x6e, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x45, 0x42, 0x49, 0x54,
	0x44, 0x41, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x12, 0x76, 0x0a, 0x36, 0x65, 0x61, 0x72, 0x6e,
	0x69, 0x6e, 0x67, 0x73, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65,
	0x73, 0x74, 0x54, 0x61, 0x78, 0x65, 0x73, 0x44, 0x65, 0x70, 0x72, 0x65, 0x63, 0x69, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x41, 0x6d, 0x6f, 0x72, 0x74, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55,
	0x53, 0x44, 0x18, 0x20, 0x20, 0x01, 0x28, 0x03, 0x52, 0x36, 0x65, 0x61, 0x72, 0x6e, 0x69, 0x6e,
	0x67, 0x73, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74,
	0x54, 0x61, 0x78, 0x65, 0x73, 0x44, 0x65, 0x70, 0x72, 0x65, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x41, 0x6d, 0x6f, 0x72, 0x74, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x53, 0x44,
	0x12, 0x44, 0x0a, 0x1d, 0x65, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x42, 0x65, 0x66, 0x6f, 0x72,
	0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x54, 0x61, 0x78, 0x65, 0x73, 0x55, 0x53,
	0x44, 0x18, 0x21, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1d, 0x65, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67,
	0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x54, 0x61,
	0x78, 0x65, 0x73, 0x55, 0x53, 0x44, 0x12, 0x2c, 0x0a, 0x11, 0x65, 0x61, 0x72, 0x6e, 0x69, 0x6e,
	0x67, 0x73, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x54, 0x61, 0x78, 0x18, 0x22, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x11, 0x65, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x42, 0x65, 0x66, 0x6f, 0x72,
	0x65, 0x54, 0x61, 0x78, 0x12, 0x34, 0x0a, 0x15, 0x65, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x73,
	0x50, 0x65, 0x72, 0x42, 0x61, 0x73, 0x69, 0x63, 0x53, 0x68, 0x61, 0x72, 0x65, 0x18, 0x23, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x15, 0x65, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x50, 0x65, 0x72,
	0x42, 0x61, 0x73, 0x69, 0x63, 0x53, 0x68, 0x61, 0x72, 0x65, 0x12, 0x38, 0x0a, 0x17, 0x65, 0x61,
	0x72, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x50, 0x65, 0x72, 0x44, 0x69, 0x6c, 0x75, 0x74, 0x65, 0x64,
	0x53, 0x68, 0x61, 0x72, 0x65, 0x18, 0x24, 0x20, 0x01, 0x28, 0x03, 0x52, 0x17, 0x65, 0x61, 0x72,
	0x6e, 0x69, 0x6e, 0x67, 0x73, 0x50, 0x65, 0x72, 0x44, 0x69, 0x6c, 0x75, 0x74, 0x65, 0x64, 0x53,
	0x68, 0x61, 0x72, 0x65, 0x12, 0x3a, 0x0a, 0x18, 0x65, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x73,
	0x50, 0x65, 0x72, 0x42, 0x61, 0x73, 0x69, 0x63, 0x53, 0x68, 0x61, 0x72, 0x65, 0x55, 0x53, 0x44,
	0x18, 0x25, 0x20, 0x01, 0x28, 0x03, 0x52, 0x18, 0x65, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x73,
	0x50, 0x65, 0x72, 0x42, 0x61, 0x73, 0x69, 0x63, 0x53, 0x68, 0x61, 0x72, 0x65, 0x55, 0x53, 0x44,
	0x12, 0x2e, 0x0a, 0x12, 0x73, 0x68, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x73,
	0x45, 0x71, 0x75, 0x69, 0x74, 0x79, 0x18, 0x26, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x73, 0x45, 0x71, 0x75, 0x69, 0x74, 0x79,
	0x12, 0x24, 0x0a, 0x0d, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x45, 0x71, 0x75, 0x69, 0x74,
	0x79, 0x18, 0x27, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65,
	0x45, 0x71, 0x75, 0x69, 0x74, 0x79, 0x12, 0x34, 0x0a, 0x15, 0x73, 0x68, 0x61, 0x72, 0x65, 0x68,
	0x6f, 0x6c, 0x64, 0x65, 0x72, 0x73, 0x45, 0x71, 0x75, 0x69, 0x74, 0x79, 0x55, 0x53, 0x44, 0x18,
	0x28, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x73, 0x68, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x6c, 0x64,
	0x65, 0x72, 0x73, 0x45, 0x71, 0x75, 0x69, 0x74, 0x79, 0x55, 0x53, 0x44, 0x12, 0x28, 0x0a, 0x0f,
	0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x29, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73,
	0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x38, 0x0a, 0x17, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70,
	0x72, 0x69, 0x73, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x45, 0x42, 0x49,
	0x54, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x17, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72,
	0x69, 0x73, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x45, 0x42, 0x49, 0x54,
	0x12, 0x3c, 0x0a, 0x19, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x45, 0x42, 0x49, 0x54, 0x44, 0x41, 0x18, 0x2b, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x19, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x45, 0x42, 0x49, 0x54, 0x44, 0x41, 0x12, 0x22,
	0x0a, 0x0c, 0x66, 0x72, 0x65, 0x65, 0x43, 0x61, 0x73, 0x68, 0x46, 0x6c, 0x6f, 0x77, 0x18, 0x2c,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x66, 0x72, 0x65, 0x65, 0x43, 0x61, 0x73, 0x68, 0x46, 0x6c,
	0x6f, 0x77, 0x12, 0x32, 0x0a, 0x14, 0x66, 0x72, 0x65, 0x65, 0x43, 0x61, 0x73, 0x68, 0x46, 0x6c,
	0x6f, 0x77, 0x50, 0x65, 0x72, 0x53, 0x68, 0x61, 0x72, 0x65, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x14, 0x66, 0x72, 0x65, 0x65, 0x43, 0x61, 0x73, 0x68, 0x46, 0x6c, 0x6f, 0x77, 0x50, 0x65,
	0x72, 0x53, 0x68, 0x61, 0x72, 0x65, 0x12, 0x46, 0x0a, 0x1e, 0x66, 0x6f, 0x72, 0x65, 0x69, 0x67,
	0x6e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x55, 0x53, 0x44, 0x45, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x52, 0x61, 0x74, 0x65, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1e,
	0x66, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x55,
	0x53, 0x44, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x67, 0x72, 0x6f, 0x73, 0x73, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x18, 0x2f, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0b, 0x67, 0x72, 0x6f, 0x73, 0x73, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74,
	0x12, 0x20, 0x0a, 0x0b, 0x67, 0x72, 0x6f, 0x73, 0x73, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x18,
	0x30, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x67, 0x72, 0x6f, 0x73, 0x73, 0x4d, 0x61, 0x72, 0x67,
	0x69, 0x6e, 0x12, 0x40, 0x0a, 0x1b, 0x67, 0x6f, 0x6f, 0x64, 0x77, 0x69, 0x6c, 0x6c, 0x41, 0x6e,
	0x64, 0x49, 0x6e, 0x74, 0x61, 0x6e, 0x67, 0x69, 0x62, 0x6c, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74,
	0x73, 0x18, 0x31, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1b, 0x67, 0x6f, 0x6f, 0x64, 0x77, 0x69, 0x6c,
	0x6c, 0x41, 0x6e, 0x64, 0x49, 0x6e, 0x74, 0x61, 0x6e, 0x67, 0x69, 0x62, 0x6c, 0x65, 0x41, 0x73,
	0x73, 0x65, 0x74, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74,
	0x45, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x18, 0x32, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x45, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x12, 0x28,
	0x0a, 0x0f, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x65, 0x64, 0x43, 0x61, 0x70, 0x69, 0x74, 0x61,
	0x6c, 0x18, 0x33, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x65,
	0x64, 0x43, 0x61, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x12, 0x36, 0x0a, 0x16, 0x69, 0x6e, 0x76, 0x65,
	0x73, 0x74, 0x65, 0x64, 0x43, 0x61, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x41, 0x76, 0x65, 0x72, 0x61,
	0x67, 0x65, 0x18, 0x34, 0x20, 0x01, 0x28, 0x03, 0x52, 0x16, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74,
	0x65, 0x64, 0x43, 0x61, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x35, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x20,
	0x0a, 0x0b, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x36, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0b, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x12, 0x2e, 0x0a, 0x12, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x37, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x69, 0x6e,
	0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x12, 0x34, 0x0a, 0x15, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x4e,
	0x6f, 0x6e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x38, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x15, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x4e, 0x6f, 0x6e, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4c,
	0x69, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x39, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4c, 0x69, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69,
	0x65, 0x73, 0x12, 0x2e, 0x0a, 0x12, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69,
	0x65, 0x73, 0x12, 0x34, 0x0a, 0x15, 0x6c, 0x69, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x4e, 0x6f, 0x6e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x3b, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x15, 0x6c, 0x69, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x4e, 0x6f,
	0x6e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x14, 0x6d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x43, 0x61, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x3c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x43, 0x61,
	0x70, 0x69, 0x74, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b,
	0x6e, 0x65, 0x74, 0x43, 0x61, 0x73, 0x68, 0x46, 0x6c, 0x6f, 0x77, 0x18, 0x3d, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0b, 0x6e, 0x65, 0x74, 0x43, 0x61, 0x73, 0x68, 0x46, 0x6c, 0x6f, 0x77, 0x12, 0x5a,
	0x0a, 0x28, 0x6e, 0x65, 0x74, 0x43, 0x61, 0x73, 0x68, 0x46, 0x6c, 0x6f, 0x77, 0x42, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x41, 0x63, 0x71, 0x75, 0x69, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x44, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x73, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x28, 0x6e, 0x65, 0x74, 0x43, 0x61, 0x73, 0x68, 0x46, 0x6c, 0x6f, 0x77, 0x42, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x41, 0x63, 0x71, 0x75, 0x69, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x44, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x73, 0x12, 0x32, 0x0a, 0x14, 0x69, 0x73,
	0x73, 0x75, 0x61, 0x6e, 0x63, 0x65, 0x45, 0x71, 0x75, 0x69, 0x74, 0x79, 0x53, 0x68, 0x61, 0x72,
	0x65, 0x73, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x69, 0x73, 0x73, 0x75, 0x61, 0x6e,
	0x63, 0x65, 0x45, 0x71, 0x75, 0x69, 0x74, 0x79, 0x53, 0x68, 0x61, 0x72, 0x65, 0x73, 0x12, 0x36,
	0x0a, 0x16, 0x69, 0x73, 0x73, 0x75, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x65, 0x62, 0x74, 0x53, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x40, 0x20, 0x01, 0x28, 0x03, 0x52, 0x16,
	0x69, 0x73, 0x73, 0x75, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x65, 0x62, 0x74, 0x53, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x56, 0x0a, 0x26, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x44, 0x69, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x64, 0x73, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x43,
	0x61, 0x73, 0x68, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x41, 0x20, 0x01, 0x28, 0x03, 0x52, 0x26, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x44,
	0x69, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x64, 0x73, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x43, 0x61, 0x73,
	0x68, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3a,
	0x0a, 0x18, 0x6e, 0x65, 0x74, 0x43, 0x61, 0x73, 0x68, 0x46, 0x6c, 0x6f, 0x77, 0x46, 0x72, 0x6f,
	0x6d, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x6e, 0x67, 0x18, 0x42, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x18, 0x6e, 0x65, 0x74, 0x43, 0x61, 0x73, 0x68, 0x46, 0x6c, 0x6f, 0x77, 0x46, 0x72, 0x6f,
	0x6d, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x6e, 0x67, 0x12, 0x3a, 0x0a, 0x18, 0x6e, 0x65,
	0x74, 0x43, 0x61, 0x73, 0x68, 0x46, 0x6c, 0x6f, 0x77, 0x46, 0x72, 0x6f, 0x6d, 0x49, 0x6e, 0x76,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x43, 0x20, 0x01, 0x28, 0x03, 0x52, 0x18, 0x6e, 0x65,
	0x74, 0x43, 0x61, 0x73, 0x68, 0x46, 0x6c, 0x6f, 0x77, 0x46, 0x72, 0x6f, 0x6d, 0x49, 0x6e, 0x76,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x5e, 0x0a, 0x2a, 0x6e, 0x65, 0x74, 0x43, 0x61, 0x73,
	0x68, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x41,
	0x63, 0x71, 0x75, 0x69, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x44, 0x69, 0x73, 0x70, 0x6f,
	0x73, 0x61, 0x6c, 0x73, 0x18, 0x44, 0x20, 0x01, 0x28, 0x03, 0x52, 0x2a, 0x6e, 0x65, 0x74, 0x43,
	0x61, 0x73, 0x68, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e,
	0x74, 0x41, 0x63, 0x71, 0x75, 0x69, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x44, 0x69, 0x73,
	0x70, 0x6f, 0x73, 0x61, 0x6c, 0x73, 0x12, 0x3c, 0x0a, 0x19, 0x6e, 0x65, 0x74, 0x43, 0x61, 0x73,
	0x68, 0x46, 0x6c, 0x6f, 0x77, 0x46, 0x72, 0x6f, 0x6d, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x45, 0x20, 0x01, 0x28, 0x03, 0x52, 0x19, 0x6e, 0x65, 0x74, 0x43, 0x61,
	0x73, 0x68, 0x46, 0x6c, 0x6f, 0x77, 0x46, 0x72, 0x6f, 0x6d, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x4c, 0x0a, 0x21, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x4f, 0x66,
	0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x73, 0x4f, 0x6e, 0x43, 0x61, 0x73, 0x68, 0x18, 0x46, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x21, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x4f, 0x66, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x52, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x4f, 0x6e, 0x43, 0x61,
	0x73, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x65, 0x74, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x18,
	0x47, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6e, 0x65, 0x74, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65,
	0x12, 0x32, 0x0a, 0x14, 0x6e, 0x65, 0x74, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x43, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x18, 0x48, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14,
	0x6e, 0x65, 0x74, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x53,
	0x74, 0x6f, 0x63, 0x6b, 0x12, 0x38, 0x0a, 0x17, 0x6e, 0x65, 0x74, 0x49, 0x6e, 0x63, 0x6f, 0x6d,
	0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x55, 0x53, 0x44, 0x18,
	0x49, 0x20, 0x01, 0x28, 0x03, 0x52, 0x17, 0x6e, 0x65, 0x74, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65,
	0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x55, 0x53, 0x44, 0x12, 0x58,
	0x0a, 0x27, 0x6e, 0x65, 0x74, 0x4c, 0x6f, 0x73, 0x73, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x46,
	0x72, 0x6f, 0x6d, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x64, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x4a, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x27, 0x6e, 0x65, 0x74, 0x4c, 0x6f, 0x73, 0x73, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x46, 0x72,
	0x6f, 0x6d, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x64, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x4e, 0x0a, 0x22, 0x6e, 0x65, 0x74, 0x49,
	0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x54, 0x6f, 0x4e, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x73, 0x18, 0x4b,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x22, 0x6e, 0x65, 0x74, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x54,
	0x6f, 0x4e, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x66,
	0x69, 0x74, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x18, 0x4c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x12, 0x2c, 0x0a, 0x11,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x45, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x65,
	0x73, 0x18, 0x4d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6e, 0x67, 0x45, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x18, 0x4e, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e,
	0x63, 0x6f, 0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x18, 0x74, 0x72, 0x61, 0x64, 0x65, 0x41, 0x6e, 0x64,
	0x4e, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x50, 0x61, 0x79, 0x61, 0x62, 0x6c, 0x65, 0x73,
	0x18, 0x4f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x18, 0x74, 0x72, 0x61, 0x64, 0x65, 0x41, 0x6e, 0x64,
	0x4e, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x50, 0x61, 0x79, 0x61, 0x62, 0x6c, 0x65, 0x73,
	0x12, 0x20, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x18,
	0x50, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x52, 0x61, 0x74,
	0x69, 0x6f, 0x12, 0x2a, 0x0a, 0x10, 0x70, 0x72, 0x69, 0x63, 0x65, 0x54, 0x6f, 0x42, 0x6f, 0x6f,
	0x6b, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x51, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x54, 0x6f, 0x42, 0x6f, 0x6f, 0x6b, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x24,
	0x0a, 0x0d, 0x70, 0x72, 0x69, 0x63, 0x65, 0x45, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x18,
	0x52, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x70, 0x72, 0x69, 0x63, 0x65, 0x45, 0x61, 0x72, 0x6e,
	0x69, 0x6e, 0x67, 0x73, 0x12, 0x32, 0x0a, 0x14, 0x70, 0x72, 0x69, 0x63, 0x65, 0x54, 0x6f, 0x45,
	0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x53, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x14, 0x70, 0x72, 0x69, 0x63, 0x65, 0x54, 0x6f, 0x45, 0x61, 0x72, 0x6e, 0x69,
	0x6e, 0x67, 0x73, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x3c, 0x0a, 0x19, 0x70, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x79, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65,
	0x6e, 0x74, 0x4e, 0x65, 0x74, 0x18, 0x54, 0x20, 0x01, 0x28, 0x03, 0x52, 0x19, 0x70, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x79, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d,
	0x65, 0x6e, 0x74, 0x4e, 0x65, 0x74, 0x12, 0x58, 0x0a, 0x27, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x72, 0x65, 0x64, 0x44, 0x69, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x64, 0x73, 0x49, 0x6e, 0x63, 0x6f,
	0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6d, 0x70, 0x61, 0x63,
	0x74, 0x18, 0x55, 0x20, 0x01, 0x28, 0x03, 0x52, 0x27, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72,
	0x65, 0x64, 0x44, 0x69, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x64, 0x73, 0x49, 0x6e, 0x63, 0x6f, 0x6d,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6d, 0x70, 0x61, 0x63, 0x74,
	0x12, 0x38, 0x0a, 0x17, 0x73, 0x68, 0x61, 0x72, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x41, 0x64,
	0x6a, 0x75, 0x73, 0x74, 0x65, 0x64, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x18, 0x56, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x17, 0x73, 0x68, 0x61, 0x72, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x41, 0x64, 0x6a,
	0x75, 0x73, 0x74, 0x65, 0x64, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x18, 0x57, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x54, 0x6f, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x18,
	0x58, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x70, 0x72, 0x69, 0x63, 0x65, 0x54, 0x6f, 0x53, 0x61,
	0x6c, 0x65, 0x73, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x40, 0x0a, 0x1b, 0x74, 0x72, 0x61, 0x64,
	0x65, 0x41, 0x6e, 0x64, 0x4e, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x59, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1b, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x41, 0x6e, 0x64, 0x4e, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x4e, 0x0a, 0x22, 0x61, 0x63,
	0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x52, 0x65, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x64, 0x45, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x44, 0x65, 0x66, 0x69, 0x63, 0x69, 0x74,
	0x18, 0x5a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x22, 0x61, 0x63, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61,
	0x74, 0x65, 0x64, 0x52, 0x65, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x45, 0x61, 0x72, 0x6e, 0x69,
	0x6e, 0x67, 0x73, 0x44, 0x65, 0x66, 0x69, 0x63, 0x69, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65,
	0x76, 0x65, 0x6e, 0x75, 0x65, 0x73, 0x18, 0x5b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x72, 0x65,
	0x76, 0x65, 0x6e, 0x75, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75,
	0x65, 0x73, 0x55, 0x53, 0x44, 0x18, 0x5c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x72, 0x65, 0x76,
	0x65, 0x6e, 0x75, 0x65, 0x73, 0x55, 0x53, 0x44, 0x12, 0x44, 0x0a, 0x1d, 0x72, 0x65, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x41, 0x6e, 0x64, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x6d, 0x65,
	0x6e, 0x74, 0x45, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x18, 0x5d, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x1d, 0x72, 0x65, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x41, 0x6e, 0x64, 0x44, 0x65, 0x76, 0x65,
	0x6c, 0x6f, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x12, 0x34,
	0x0a, 0x15, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x4f, 0x6e, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67,
	0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x73, 0x18, 0x5e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x72,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x4f, 0x6e, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x41, 0x73,
	0x73, 0x65, 0x74, 0x73, 0x12, 0x34, 0x0a, 0x15, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x4f, 0x6e,
	0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x45, 0x71, 0x75, 0x69, 0x74, 0x79, 0x18, 0x5f, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x15, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x4f, 0x6e, 0x41, 0x76, 0x65,
	0x72, 0x61, 0x67, 0x65, 0x45, 0x71, 0x75, 0x69, 0x74, 0x79, 0x12, 0x38, 0x0a, 0x17, 0x72, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x4f, 0x6e, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x65, 0x64, 0x43, 0x61,
	0x70, 0x69, 0x74, 0x61, 0x6c, 0x18, 0x60, 0x20, 0x01, 0x28, 0x03, 0x52, 0x17, 0x72, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x4f, 0x6e, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x65, 0x64, 0x43, 0x61, 0x70,
	0x69, 0x74, 0x61, 0x6c, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x4f, 0x6e,
	0x53, 0x61, 0x6c, 0x65, 0x73, 0x18, 0x61, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x72, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x4f, 0x6e, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x12, 0x36, 0x0a, 0x16, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x42, 0x61, 0x73, 0x65, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x6e, 0x73, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x62, 0x20, 0x01, 0x28, 0x03, 0x52, 0x16, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x42, 0x61, 0x73, 0x65, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x6e, 0x73, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x56, 0x0a, 0x26, 0x73, 0x65, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x47, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x6c, 0x41, 0x6e, 0x64, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x69, 0x76, 0x65, 0x45, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x18, 0x63, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x26, 0x73, 0x65, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x47, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x6c, 0x41, 0x6e, 0x64, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x69, 0x76, 0x65, 0x45, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x64, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0b, 0x73, 0x68, 0x61, 0x72, 0x65, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x73, 0x18, 0x65, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x73, 0x12, 0x34, 0x0a, 0x15, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x65, 0x64,
	0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x53, 0x68, 0x61, 0x72, 0x65, 0x73, 0x18, 0x66, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x15, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x65, 0x64, 0x41, 0x76, 0x65,
	0x72, 0x61, 0x67, 0x65, 0x53, 0x68, 0x61, 0x72, 0x65, 0x73, 0x12, 0x42, 0x0a, 0x1c, 0x77, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x65, 0x64, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x53, 0x68, 0x61,
	0x72, 0x65, 0x73, 0x44, 0x69, 0x6c, 0x75, 0x74, 0x65, 0x64, 0x18, 0x67, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x1c, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x65, 0x64, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67,
	0x65, 0x53, 0x68, 0x61, 0x72, 0x65, 0x73, 0x44, 0x69, 0x6c, 0x75, 0x74, 0x65, 0x64, 0x12, 0x24,
	0x0a, 0x0d, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x50, 0x65, 0x72, 0x53, 0x68, 0x61, 0x72, 0x65, 0x18,
	0x68, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x50, 0x65, 0x72, 0x53,
	0x68, 0x61, 0x72, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x74, 0x61, 0x6e, 0x67, 0x69, 0x62, 0x6c, 0x65,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x69, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x12, 0x74, 0x61, 0x6e, 0x67, 0x69, 0x62, 0x6c, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x61, 0x78, 0x41, 0x73, 0x73, 0x65, 0x74,
	0x73, 0x18, 0x6a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x61, 0x78, 0x41, 0x73, 0x73, 0x65,
	0x74, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x54, 0x61, 0x78, 0x45,
	0x78, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x18, 0x6b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x69, 0x6e,
	0x63, 0x6f, 0x6d, 0x65, 0x54, 0x61, 0x78, 0x45, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x12, 0x26,
	0x0a, 0x0e, 0x74, 0x61, 0x78, 0x4c, 0x69, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x18, 0x6c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x74, 0x61, 0x78, 0x4c, 0x69, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x48, 0x0a, 0x1f, 0x74, 0x61, 0x6e, 0x67, 0x69, 0x62,
	0x6c, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x73, 0x42, 0x6f, 0x6f, 0x6b, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x50, 0x65, 0x72, 0x53, 0x68, 0x61, 0x72, 0x65, 0x18, 0x6d, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x1f, 0x74, 0x61, 0x6e, 0x67, 0x69, 0x62, 0x6c, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x73, 0x42,
	0x6f, 0x6f, 0x6b, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x50, 0x65, 0x72, 0x53, 0x68, 0x61, 0x72, 0x65,
	0x12, 0x26, 0x0a, 0x0e, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x43, 0x61, 0x70, 0x69, 0x74,
	0x61, 0x6c, 0x18, 0x6e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e,
	0x67, 0x43, 0x61, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x22, 0x48, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x53,
	0x74, 0x6f, 0x63, 0x6b, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x0a, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63,
	0x69, 0x61, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x46, 0x69, 0x6e,
	0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x52, 0x0a, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61,
	0x6c, 0x73, 0x22, 0xdf, 0x02, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x45, 0x0a, 0x09, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x47, 0x65, 0x74, 0x4d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x09, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x48, 0x0a,
	0x0a, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x1a, 0x3c, 0x0a, 0x0e, 0x45, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3d, 0x0a, 0x0f, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0x95, 0x01, 0x0a, 0x0d, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x48,
	0x6f, 0x6c, 0x69, 0x64, 0x61, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x22, 0x53, 0x0a, 0x19,
	0x47, 0x65, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x48, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x79,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x0e, 0x4d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x48, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x79, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x48, 0x6f, 0x6c, 0x69, 0x64, 0x61,
	0x79, 0x52, 0x0e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x48, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x79,
	0x73, 0x22, 0x20, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x45, 0x71, 0x75, 0x69, 0x74, 0x79, 0x45, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x22, 0x1c, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x45, 0x71, 0x75, 0x69, 0x74, 0x79,
	0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x24, 0x0a, 0x22, 0x47, 0x65, 0x74, 0x45, 0x71, 0x75, 0x69, 0x74, 0x79, 0x50, 0x72,
	0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x20, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x45, 0x71,
	0x75, 0x69, 0x74, 0x79, 0x50, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x43, 0x6c, 0x6f, 0x73,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x25, 0x0a, 0x23, 0x47, 0x65, 0x74,
	0x45, 0x71, 0x75, 0x69, 0x74, 0x79, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x73,
	0x42, 0x61, 0x72, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0x21, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x45, 0x71, 0x75, 0x69, 0x74, 0x79, 0x41, 0x67, 0x67,
	0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x73, 0x42, 0x61, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x27, 0x0a, 0x25, 0x47, 0x65, 0x74, 0x45, 0x71, 0x75, 0x69, 0x74, 0x79,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x65, 0x64, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x42, 0x61, 0x72, 0x73,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x23, 0x0a, 0x21,
	0x47, 0x65, 0x74, 0x45, 0x71, 0x75, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x65, 0x64,
	0x44, 0x61, 0x69, 0x6c, 0x79, 0x42, 0x61, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x25, 0x0a, 0x23, 0x47, 0x65, 0x74, 0x45, 0x71, 0x75, 0x69, 0x74, 0x79, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x21, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x45,
	0x71, 0x75, 0x69, 0x74, 0x79, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x54, 0x72, 0x61,
	0x64, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x29, 0x0a, 0x27, 0x47,
	0x65, 0x74, 0x45, 0x71, 0x75, 0x69, 0x74, 0x79, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63,
	0x51, 0x75, 0x6f, 0x74, 0x65, 0x73, 0x4e, 0x42, 0x42, 0x4f, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x25, 0x0a, 0x23, 0x47, 0x65, 0x74, 0x45, 0x71, 0x75,
	0x69, 0x74, 0x79, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x51, 0x75, 0x6f, 0x74, 0x65,
	0x73, 0x4e, 0x42, 0x42, 0x4f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x29, 0x0a,
	0x27, 0x47, 0x65, 0x74, 0x45, 0x71, 0x75, 0x69, 0x74, 0x79, 0x4c, 0x61, 0x73, 0x74, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x46, 0x6f, 0x72, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x25, 0x0a, 0x23, 0x47, 0x65, 0x74, 0x45,
	0x71, 0x75, 0x69, 0x74, 0x79, 0x4c, 0x61, 0x73, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x46, 0x6f,
	0x72, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x29, 0x0a, 0x27, 0x47, 0x65, 0x74, 0x45, 0x71, 0x75, 0x69, 0x74, 0x79, 0x4c, 0x61, 0x73, 0x74,
	0x51, 0x75, 0x6f, 0x74, 0x65, 0x46, 0x6f, 0x72, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x25, 0x0a, 0x23, 0x47, 0x65,
	0x74, 0x45, 0x71, 0x75, 0x69, 0x74, 0x79, 0x4c, 0x61, 0x73, 0x74, 0x51, 0x75, 0x6f, 0x74, 0x65,
	0x46, 0x6f, 0x72, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x25, 0x0a, 0x23, 0x47, 0x65, 0x74, 0x45, 0x71, 0x75, 0x69, 0x74, 0x79, 0x44, 0x61,
	0x69, 0x6c, 0x79, 0x4f, 0x70, 0x65, 0x6e, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x21, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x45,
	0x71, 0x75, 0x69, 0x74, 0x79, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x4f, 0x70, 0x65, 0x6e, 0x43, 0x6c,
	0x6f, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x28, 0x0a, 0x26, 0x47,
	0x65, 0x74, 0x45, 0x71, 0x75, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x24, 0x0a, 0x22, 0x47, 0x65, 0x74, 0x45, 0x71, 0x75, 0x69,
	0x74, 0x79, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x70, 0x70, 0x69,
	0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x29, 0x0a, 0x27, 0x47,
	0x65, 0x74, 0x45, 0x71, 0x75, 0x69, 0x74, 0x79, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x41, 0x6c, 0x6c, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x25, 0x0a, 0x23, 0x47, 0x65, 0x74, 0x45, 0x71, 0x75,
	0x69, 0x74, 0x79, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x41, 0x6c, 0x6c, 0x54, 0x69,
	0x63, 0x6b, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2b, 0x0a,
	0x29, 0x47, 0x65, 0x74, 0x45, 0x71, 0x75, 0x69, 0x74, 0x79, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68,
	0x6f, 0x74, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x27, 0x0a, 0x25, 0x47, 0x65,
	0x74, 0x45, 0x71, 0x75, 0x69, 0x74, 0x79, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x53,
	0x69, 0x6e, 0x67, 0x6c, 0x65, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x2c, 0x0a, 0x2a, 0x47, 0x65, 0x74, 0x45, 0x71, 0x75, 0x69, 0x74, 0x79,
	0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x47, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x4c,
	0x6f, 0x73, 0x65, 0x72, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x22, 0x28, 0x0a, 0x26, 0x47, 0x65, 0x74, 0x45, 0x71, 0x75, 0x69, 0x74, 0x79, 0x53, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x47, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x4c, 0x6f, 0x73,
	0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x23, 0x0a, 0x21, 0x47,
	0x65, 0x74, 0x46, 0x6f, 0x72, 0x65, 0x78, 0x50, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x43,
	0x6c, 0x6f, 0x73, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0x1f, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x46, 0x6f, 0x72, 0x65, 0x78, 0x50, 0x72, 0x65, 0x76,
	0x69, 0x6f, 0x75, 0x73, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x24, 0x0a, 0x22, 0x47, 0x65, 0x74, 0x46, 0x6f, 0x72, 0x65, 0x78, 0x41, 0x67, 0x67,
	0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x73, 0x42, 0x61, 0x72, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x20, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x46, 0x6f,
	0x72, 0x65, 0x78, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x73, 0x42, 0x61, 0x72,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x26, 0x0a, 0x24, 0x47, 0x65, 0x74,
	0x46, 0x6f, 0x72, 0x65, 0x78, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x65, 0x64, 0x44, 0x61, 0x69, 0x6c,
	0x79, 0x42, 0x61, 0x72, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x22, 0x22, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x46, 0x6f, 0x72, 0x65, 0x78, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x65, 0x64, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x42, 0x61, 0x72, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x28, 0x0a, 0x26, 0x47, 0x65, 0x74, 0x46, 0x6f, 0x72, 0x65,
	0x78, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x46, 0x6f, 0x72, 0x65, 0x78, 0x54, 0x69,
	0x63, 0x6b, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22,
	0x24, 0x0a, 0x22, 0x47, 0x65, 0x74, 0x46, 0x6f, 0x72, 0x65, 0x78, 0x48, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x69, 0x63, 0x46, 0x6f, 0x72, 0x65, 0x78, 0x54, 0x69, 0x63, 0x6b, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x30, 0x0a, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x6f, 0x72, 0x65,
	0x78, 0x52, 0x65, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x2c, 0x0a, 0x2a, 0x47, 0x65, 0x74, 0x46, 0x6f,
	0x72, 0x65, 0x78, 0x52, 0x65, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2e, 0x0a, 0x2c, 0x47, 0x65, 0x74, 0x46, 0x6f, 0x72, 0x65,
	0x78, 0x4c, 0x61, 0x73, 0x74, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x46, 0x6f, 0x72, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x50, 0x61, 0x69, 0x72, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x2a, 0x0a, 0x28, 0x47, 0x65, 0x74, 0x46, 0x6f, 0x72, 0x65,
	0x78, 0x4c, 0x61, 0x73, 0x74, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x46, 0x6f, 0x72, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x50, 0x61, 0x69, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x28, 0x0a, 0x26, 0x47, 0x65, 0x74, 0x46, 0x6f, 0x72, 0x65, 0x78, 0x53, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x41, 0x6c, 0x6c, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x24, 0x0a, 0x22, 0x47,
	0x65, 0x74, 0x46, 0x6f, 0x72, 0x65, 0x78, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x41,
	0x6c, 0x6c, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x2b, 0x0a, 0x29, 0x47, 0x65, 0x74, 0x46, 0x6f, 0x72, 0x65, 0x78, 0x53, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x47, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x4c, 0x6f, 0x73, 0x65,
	0x72, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x27,
	0x0a, 0x25, 0x47, 0x65, 0x74, 0x46, 0x6f, 0x72, 0x65, 0x78, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68,
	0x6f, 0x74, 0x47, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x4c, 0x6f, 0x73, 0x65, 0x72, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x24, 0x0a, 0x22, 0x47, 0x65, 0x74, 0x43, 0x72,
	0x79, 0x70, 0x74, 0x6f, 0x50, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x43, 0x6c, 0x6f, 0x73,
	0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x20, 0x0a,
	0x1e, 0x47, 0x65, 0x74, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x50, 0x72, 0x65, 0x76, 0x69, 0x6f,
	0x75, 0x73, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x25, 0x0a, 0x23, 0x47, 0x65, 0x74, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x41, 0x67, 0x67, 0x72,
	0x65, 0x67, 0x61, 0x74, 0x65, 0x73, 0x42, 0x61, 0x72, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x21, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x43, 0x72, 0x79,
	0x70, 0x74, 0x6f, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x73, 0x42, 0x61, 0x72,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x27, 0x0a, 0x25, 0x47, 0x65, 0x74,
	0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x65, 0x64, 0x44, 0x61, 0x69,
	0x6c, 0x79, 0x42, 0x61, 0x72, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x22, 0x23, 0x0a, 0x21, 0x47, 0x65, 0x74, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x65, 0x64, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x42, 0x61, 0x72, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x26, 0x0a, 0x24, 0x47, 0x65, 0x74, 0x43, 0x72,
	0x79, 0x70, 0x74, 0x6f, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22,
	0x22, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x43, 0x72, 0x79, 0x70,
	0x74, 0x6f, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x2d, 0x0a, 0x2b, 0x47, 0x65, 0x74, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f,
	0x4c, 0x61, 0x73, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x46, 0x6f, 0x72, 0x43, 0x72, 0x79, 0x70,
	0x74, 0x6f, 0x50, 0x61, 0x69, 0x72, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x22, 0x29, 0x0a, 0x27, 0x47, 0x65, 0x74, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x4c,
	0x61, 0x73, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x46, 0x6f, 0x72, 0x43, 0x72, 0x79, 0x70, 0x74,
	0x6f, 0x50, 0x61, 0x69, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x25, 0x0a,
	0x23, 0x47, 0x65, 0x74, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x4f,
	0x70, 0x65, 0x6e, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x22, 0x21, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x43, 0x72, 0x79, 0x70, 0x74,
	0x6f, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x4f, 0x70, 0x65, 0x6e, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2b, 0x0a, 0x29, 0x47, 0x65, 0x74, 0x43, 0x72,
	0x79, 0x70, 0x74, 0x6f, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x43, 0x72, 0x79, 0x70,
	0x74, 0x6f, 0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x22, 0x27, 0x0a, 0x25, 0x47, 0x65, 0x74, 0x43, 0x72, 0x79, 0x70, 0x74,
	0x6f, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x54,
	0x72, 0x61, 0x64, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x29, 0x0a,
	0x27, 0x47, 0x65, 0x74, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68,
	0x6f, 0x74, 0x41, 0x6c, 0x6c, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x25, 0x0a, 0x23, 0x47, 0x65, 0x74, 0x43,
	0x72, 0x79, 0x70, 0x74, 0x6f, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x41, 0x6c, 0x6c,
	0x54, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x2b, 0x0a, 0x29, 0x47, 0x65, 0x74, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x53, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x72,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x27, 0x0a, 0x25,
	0x47, 0x65, 0x74, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x35, 0x0a, 0x33, 0x47, 0x65, 0x74, 0x43, 0x72, 0x79, 0x70,
	0x74, 0x6f, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65,
	0x54, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x46, 0x75, 0x6c, 0x6c, 0x42, 0x6f, 0x6f, 0x6b, 0x4c, 0x32,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x31, 0x0a, 0x2f,
	0x47, 0x65, 0x74, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x46, 0x75, 0x6c,
	0x6c, 0x42, 0x6f, 0x6f, 0x6b, 0x4c, 0x32, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x2c, 0x0a, 0x2a, 0x47, 0x65, 0x74, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x53, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x47, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x4c, 0x6f, 0x73, 0x65, 0x72,
	0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x28, 0x0a,
	0x26, 0x47, 0x65, 0x74, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68,
	0x6f, 0x74, 0x47, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x4c, 0x6f, 0x73, 0x65, 0x72, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x07, 0x5a, 0x05, 0x2f, 0x72, 0x65, 0x73, 0x74,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_polygon_rest_proto_rawDescOnce sync.Once
	file_polygon_rest_proto_rawDescData = file_polygon_rest_proto_rawDesc
)

func file_polygon_rest_proto_rawDescGZIP() []byte {
	file_polygon_rest_proto_rawDescOnce.Do(func() {
		file_polygon_rest_proto_rawDescData = protoimpl.X.CompressGZIP(file_polygon_rest_proto_rawDescData)
	})
	return file_polygon_rest_proto_rawDescData
}

var file_polygon_rest_proto_msgTypes = make([]protoimpl.MessageInfo, 93)
var file_polygon_rest_proto_goTypes = []interface{}{
	(*GetErrorResponse)(nil),                                    // 0: GetErrorResponse
	(*GetTickerQueryRequest)(nil),                               // 1: GetTickerQueryRequest
	(*Symbol)(nil),                                              // 2: Symbol
	(*GetTickerResponse)(nil),                                   // 3: GetTickerResponse
	(*GetTickerTypesResponse)(nil),                              // 4: GetTickerTypesResponse
	(*GetTickerDetailsResponse)(nil),                            // 5: GetTickerDetailsResponse
	(*GetTickerNewsQueryRequest)(nil),                           // 6: GetTickerNewsQueryRequest
	(*News)(nil),                                                // 7: News
	(*GetTickerNewsResponse)(nil),                               // 8: GetTickerNewsResponse
	(*Market)(nil),                                              // 9: Market
	(*GetMarketsResponse)(nil),                                  // 10: GetMarketsResponse
	(*Locale)(nil),                                              // 11: Locale
	(*GetLocalesResponse)(nil),                                  // 12: GetLocalesResponse
	(*Split)(nil),                                               // 13: Split
	(*GetStockSplitsResponse)(nil),                              // 14: GetStockSplitsResponse
	(*Dividend)(nil),                                            // 15: Dividend
	(*GetStockDividendsResponse)(nil),                           // 16: GetStockDividendsResponse
	(*GetStockFinancialsQueryRequest)(nil),                      // 17: GetStockFinancialsQueryRequest
	(*Financial)(nil),                                           // 18: Financial
	(*GetStockFinancialsResponse)(nil),                          // 19: GetStockFinancialsResponse
	(*GetMarketStatusResponse)(nil),                             // 20: GetMarketStatusResponse
	(*MarketHoliday)(nil),                                       // 21: MarketHoliday
	(*GetMarketHolidaysResponse)(nil),                           // 22: GetMarketHolidaysResponse
	(*GetEquityExchangesQueryRequest)(nil),                      // 23: GetEquityExchangesQueryRequest
	(*GetEquityExchangesResponse)(nil),                          // 24: GetEquityExchangesResponse
	(*GetEquityPreviousCloseQueryRequest)(nil),                  // 25: GetEquityPreviousCloseQueryRequest
	(*GetEquityPreviousCloseResponse)(nil),                      // 26: GetEquityPreviousCloseResponse
	(*GetEquityAggregatesBarsQueryRequest)(nil),                 // 27: GetEquityAggregatesBarsQueryRequest
	(*GetEquityAggregatesBarsResponse)(nil),                     // 28: GetEquityAggregatesBarsResponse
	(*GetEquityGroupedDailyBarsQueryRequest)(nil),               // 29: GetEquityGroupedDailyBarsQueryRequest
	(*GetEquityGroupedDailyBarsResponse)(nil),                   // 30: GetEquityGroupedDailyBarsResponse
	(*GetEquityHistoricTradesQueryRequest)(nil),                 // 31: GetEquityHistoricTradesQueryRequest
	(*GetEquityHistoricTradesResponse)(nil),                     // 32: GetEquityHistoricTradesResponse
	(*GetEquityHistoricQuotesNBBOQueryRequest)(nil),             // 33: GetEquityHistoricQuotesNBBOQueryRequest
	(*GetEquityHistoricQuotesNBBOResponse)(nil),                 // 34: GetEquityHistoricQuotesNBBOResponse
	(*GetEquityLastTradeForSymbolQueryRequest)(nil),             // 35: GetEquityLastTradeForSymbolQueryRequest
	(*GetEquityLastTradeForSymbolResponse)(nil),                 // 36: GetEquityLastTradeForSymbolResponse
	(*GetEquityLastQuoteForSymbolQueryRequest)(nil),             // 37: GetEquityLastQuoteForSymbolQueryRequest
	(*GetEquityLastQuoteForSymbolResponse)(nil),                 // 38: GetEquityLastQuoteForSymbolResponse
	(*GetEquityDailyOpenCloseQueryRequest)(nil),                 // 39: GetEquityDailyOpenCloseQueryRequest
	(*GetEquityDailyOpenCloseResponse)(nil),                     // 40: GetEquityDailyOpenCloseResponse
	(*GetEquityConditionMappingsQueryRequest)(nil),              // 41: GetEquityConditionMappingsQueryRequest
	(*GetEquityConditionMappingsResponse)(nil),                  // 42: GetEquityConditionMappingsResponse
	(*GetEquitySnapshotAllTickersQueryRequest)(nil),             // 43: GetEquitySnapshotAllTickersQueryRequest
	(*GetEquitySnapshotAllTickersResponse)(nil),                 // 44: GetEquitySnapshotAllTickersResponse
	(*GetEquitySnapshotSingleTickerQueryRequest)(nil),           // 45: GetEquitySnapshotSingleTickerQueryRequest
	(*GetEquitySnapshotSingleTickerResponse)(nil),               // 46: GetEquitySnapshotSingleTickerResponse
	(*GetEquitySnapshotGainersLosersQueryRequest)(nil),          // 47: GetEquitySnapshotGainersLosersQueryRequest
	(*GetEquitySnapshotGainersLosersResponse)(nil),              // 48: GetEquitySnapshotGainersLosersResponse
	(*GetForexPreviousCloseQueryRequest)(nil),                   // 49: GetForexPreviousCloseQueryRequest
	(*GetForexPreviousCloseResponse)(nil),                       // 50: GetForexPreviousCloseResponse
	(*GetForexAggregatesBarsQueryRequest)(nil),                  // 51: GetForexAggregatesBarsQueryRequest
	(*GetForexAggregatesBarsResponse)(nil),                      // 52: GetForexAggregatesBarsResponse
	(*GetForexGroupedDailyBarsQueryRequest)(nil),                // 53: GetForexGroupedDailyBarsQueryRequest
	(*GetForexGroupedDailyBarsResponse)(nil),                    // 54: GetForexGroupedDailyBarsResponse
	(*GetForexHistoricForexTicksQueryRequest)(nil),              // 55: GetForexHistoricForexTicksQueryRequest
	(*GetForexHistoricForexTicksResponse)(nil),                  // 56: GetForexHistoricForexTicksResponse
	(*GetForexRealTimeCurrencyConversionQueryRequest)(nil),      // 57: GetForexRealTimeCurrencyConversionQueryRequest
	(*GetForexRealTimeCurrencyConversionResponse)(nil),          // 58: GetForexRealTimeCurrencyConversionResponse
	(*GetForexLastQuoteForCurrencyPairQueryRequest)(nil),        // 59: GetForexLastQuoteForCurrencyPairQueryRequest
	(*GetForexLastQuoteForCurrencyPairResponse)(nil),            // 60: GetForexLastQuoteForCurrencyPairResponse
	(*GetForexSnapshotAllTickersQueryRequest)(nil),              // 61: GetForexSnapshotAllTickersQueryRequest
	(*GetForexSnapshotAllTickersResponse)(nil),                  // 62: GetForexSnapshotAllTickersResponse
	(*GetForexSnapshotGainersLosersQueryRequest)(nil),           // 63: GetForexSnapshotGainersLosersQueryRequest
	(*GetForexSnapshotGainersLosersResponse)(nil),               // 64: GetForexSnapshotGainersLosersResponse
	(*GetCryptoPreviousCloseQueryRequest)(nil),                  // 65: GetCryptoPreviousCloseQueryRequest
	(*GetCryptoPreviousCloseResponse)(nil),                      // 66: GetCryptoPreviousCloseResponse
	(*GetCryptoAggregatesBarsQueryRequest)(nil),                 // 67: GetCryptoAggregatesBarsQueryRequest
	(*GetCryptoAggregatesBarsResponse)(nil),                     // 68: GetCryptoAggregatesBarsResponse
	(*GetCryptoGroupedDailyBarsQueryRequest)(nil),               // 69: GetCryptoGroupedDailyBarsQueryRequest
	(*GetCryptoGroupedDailyBarsResponse)(nil),                   // 70: GetCryptoGroupedDailyBarsResponse
	(*GetCryptoCryptoExchangesQueryRequest)(nil),                // 71: GetCryptoCryptoExchangesQueryRequest
	(*GetCryptoCryptoExchangesResponse)(nil),                    // 72: GetCryptoCryptoExchangesResponse
	(*GetCryptoLastTradeForCryptoPairQueryRequest)(nil),         // 73: GetCryptoLastTradeForCryptoPairQueryRequest
	(*GetCryptoLastTradeForCryptoPairResponse)(nil),             // 74: GetCryptoLastTradeForCryptoPairResponse
	(*GetCryptoDailyOpenCloseQueryRequest)(nil),                 // 75: GetCryptoDailyOpenCloseQueryRequest
	(*GetCryptoDailyOpenCloseResponse)(nil),                     // 76: GetCryptoDailyOpenCloseResponse
	(*GetCryptoHistoricCryptoTradesQueryRequest)(nil),           // 77: GetCryptoHistoricCryptoTradesQueryRequest
	(*GetCryptoHistoricCryptoTradesResponse)(nil),               // 78: GetCryptoHistoricCryptoTradesResponse
	(*GetCryptoSnapshotAllTickersQueryRequest)(nil),             // 79: GetCryptoSnapshotAllTickersQueryRequest
	(*GetCryptoSnapshotAllTickersResponse)(nil),                 // 80: GetCryptoSnapshotAllTickersResponse
	(*GetCryptoSnapshotSingleTickerQueryRequest)(nil),           // 81: GetCryptoSnapshotSingleTickerQueryRequest
	(*GetCryptoSnapshotSingleTickerResponse)(nil),               // 82: GetCryptoSnapshotSingleTickerResponse
	(*GetCryptoSnapshotSingleTickerFullBookL2QueryRequest)(nil), // 83: GetCryptoSnapshotSingleTickerFullBookL2QueryRequest
	(*GetCryptoSnapshotSingleTickerFullBookL2Response)(nil),     // 84: GetCryptoSnapshotSingleTickerFullBookL2Response
	(*GetCryptoSnapshotGainersLosersQueryRequest)(nil),          // 85: GetCryptoSnapshotGainersLosersQueryRequest
	(*GetCryptoSnapshotGainersLosersResponse)(nil),              // 86: GetCryptoSnapshotGainersLosersResponse
	nil,                         // 87: Symbol.CodesEntry
	nil,                         // 88: Symbol.AttrsEntry
	nil,                         // 89: GetTickerTypesResponse.TypesEntry
	nil,                         // 90: GetTickerTypesResponse.IndexTypesEntry
	nil,                         // 91: GetMarketStatusResponse.ExchangesEntry
	nil,                         // 92: GetMarketStatusResponse.CurrenciesEntry
	(*timestamp.Timestamp)(nil), // 93: google.protobuf.Timestamp
}
var file_polygon_rest_proto_depIdxs = []int32{
	87, // 0: Symbol.codes:type_name -> Symbol.CodesEntry
	93, // 1: Symbol.updated:type_name -> google.protobuf.Timestamp
	88, // 2: Symbol.attrs:type_name -> Symbol.AttrsEntry
	2,  // 3: GetTickerResponse.Symbols:type_name -> Symbol
	89, // 4: GetTickerTypesResponse.types:type_name -> GetTickerTypesResponse.TypesEntry
	90, // 5: GetTickerTypesResponse.indexTypes:type_name -> GetTickerTypesResponse.IndexTypesEntry
	7,  // 6: GetTickerNewsResponse.News:type_name -> News
	9,  // 7: GetMarketsResponse.Markets:type_name -> Market
	11, // 8: GetLocalesResponse.Locales:type_name -> Locale
	13, // 9: GetStockSplitsResponse.Splits:type_name -> Split
	15, // 10: GetStockDividendsResponse.Dividends:type_name -> Dividend
	18, // 11: GetStockFinancialsResponse.Financials:type_name -> Financial
	91, // 12: GetMarketStatusResponse.exchanges:type_name -> GetMarketStatusResponse.ExchangesEntry
	92, // 13: GetMarketStatusResponse.currencies:type_name -> GetMarketStatusResponse.CurrenciesEntry
	21, // 14: GetMarketHolidaysResponse.MarketHolidays:type_name -> MarketHoliday
	15, // [15:15] is the sub-list for method output_type
	15, // [15:15] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_polygon_rest_proto_init() }
func file_polygon_rest_proto_init() {
	if File_polygon_rest_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_polygon_rest_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetErrorResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_polygon_rest_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTickerQueryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_polygon_rest_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Symbol); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_polygon_rest_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTickerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_polygon_rest_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTickerTypesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_polygon_rest_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTickerDetailsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_polygon_rest_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTickerNewsQueryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_polygon_rest_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*News); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_polygon_rest_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTickerNewsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_polygon_rest_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Market); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_polygon_rest_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMarketsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_polygon_rest_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Locale); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_polygon_rest_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLocalesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_polygon_rest_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Split); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_polygon_rest_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStockSplitsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_polygon_rest_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Dividend); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_polygon_rest_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStockDividendsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_polygon_rest_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStockFinancialsQueryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_polygon_rest_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Financial); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_polygon_rest_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStockFinancialsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_polygon_rest_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMarketStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_polygon_rest_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketHoliday); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_polygon_rest_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMarketHolidaysResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_polygon_rest_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetEquityExchangesQueryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_polygon_rest_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetEquityExchangesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_polygon_rest_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetEquityPreviousCloseQueryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_polygon_rest_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetEquityPreviousCloseResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_polygon_rest_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetEquityAggregatesBarsQueryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_polygon_rest_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetEquityAggregatesBarsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_polygon_rest_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetEquityGroupedDailyBarsQueryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_polygon_rest_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetEquityGroupedDailyBarsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_polygon_rest_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetEquityHistoricTradesQueryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_polygon_rest_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetEquityHistoricTradesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_polygon_rest_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetEquityHistoricQuotesNBBOQueryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_polygon_rest_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetEquityHistoricQuotesNBBOResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_polygon_rest_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetEquityLastTradeForSymbolQueryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_polygon_rest_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetEquityLastTradeForSymbolResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_polygon_rest_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetEquityLastQuoteForSymbolQueryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_polygon_rest_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetEquityLastQuoteForSymbolResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_polygon_rest_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetEquityDailyOpenCloseQueryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_polygon_rest_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetEquityDailyOpenCloseResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_polygon_rest_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetEquityConditionMappingsQueryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_polygon_rest_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetEquityConditionMappingsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_polygon_rest_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetEquitySnapshotAllTickersQueryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_polygon_rest_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetEquitySnapshotAllTickersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_polygon_rest_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetEquitySnapshotSingleTickerQueryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_polygon_rest_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetEquitySnapshotSingleTickerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_polygon_rest_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetEquitySnapshotGainersLosersQueryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_polygon_rest_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetEquitySnapshotGainersLosersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_polygon_rest_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetForexPreviousCloseQueryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_polygon_rest_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetForexPreviousCloseResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_polygon_rest_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetForexAggregatesBarsQueryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_polygon_rest_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetForexAggregatesBarsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_polygon_rest_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetForexGroupedDailyBarsQueryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_polygon_rest_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetForexGroupedDailyBarsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_polygon_rest_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetForexHistoricForexTicksQueryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_polygon_rest_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetForexHistoricForexTicksResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_polygon_rest_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetForexRealTimeCurrencyConversionQueryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_polygon_rest_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetForexRealTimeCurrencyConversionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_polygon_rest_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetForexLastQuoteForCurrencyPairQueryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_polygon_rest_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetForexLastQuoteForCurrencyPairResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_polygon_rest_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetForexSnapshotAllTickersQueryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_polygon_rest_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetForexSnapshotAllTickersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_polygon_rest_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetForexSnapshotGainersLosersQueryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_polygon_rest_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetForexSnapshotGainersLosersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_polygon_rest_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCryptoPreviousCloseQueryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_polygon_rest_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCryptoPreviousCloseResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_polygon_rest_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCryptoAggregatesBarsQueryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_polygon_rest_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCryptoAggregatesBarsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_polygon_rest_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCryptoGroupedDailyBarsQueryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_polygon_rest_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCryptoGroupedDailyBarsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_polygon_rest_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCryptoCryptoExchangesQueryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_polygon_rest_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCryptoCryptoExchangesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_polygon_rest_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCryptoLastTradeForCryptoPairQueryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_polygon_rest_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCryptoLastTradeForCryptoPairResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_polygon_rest_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCryptoDailyOpenCloseQueryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_polygon_rest_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCryptoDailyOpenCloseResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_polygon_rest_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCryptoHistoricCryptoTradesQueryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_polygon_rest_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCryptoHistoricCryptoTradesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_polygon_rest_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCryptoSnapshotAllTickersQueryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_polygon_rest_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCryptoSnapshotAllTickersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_polygon_rest_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCryptoSnapshotSingleTickerQueryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_polygon_rest_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCryptoSnapshotSingleTickerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_polygon_rest_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCryptoSnapshotSingleTickerFullBookL2QueryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_polygon_rest_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCryptoSnapshotSingleTickerFullBookL2Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_polygon_rest_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCryptoSnapshotGainersLosersQueryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_polygon_rest_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCryptoSnapshotGainersLosersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_polygon_rest_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   93,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_polygon_rest_proto_goTypes,
		DependencyIndexes: file_polygon_rest_proto_depIdxs,
		MessageInfos:      file_polygon_rest_proto_msgTypes,
	}.Build()
	File_polygon_rest_proto = out.File
	file_polygon_rest_proto_rawDesc = nil
	file_polygon_rest_proto_goTypes = nil
	file_polygon_rest_proto_depIdxs = nil
}

const GetErrorResponseTypeCode uint32 = 369664556
const GetTickerQueryRequestTypeCode uint32 = 3568212786
const SymbolTypeCode uint32 = 1308761427
const GetTickerResponseTypeCode uint32 = 956824568
const GetTickerTypesResponseTypeCode uint32 = 2481750686
const GetTickerDetailsResponseTypeCode uint32 = 3921999961
const GetTickerNewsQueryRequestTypeCode uint32 = 1915581287
const NewsTypeCode uint32 = 2079199788
const GetTickerNewsResponseTypeCode uint32 = 320081378
const MarketTypeCode uint32 = 3229878419
const GetMarketsResponseTypeCode uint32 = 3708503845
const LocaleTypeCode uint32 = 1738100151
const GetLocalesResponseTypeCode uint32 = 1198518713
const SplitTypeCode uint32 = 3852383078
const GetStockSplitsResponseTypeCode uint32 = 3602784201
const DividendTypeCode uint32 = 131406462
const GetStockDividendsResponseTypeCode uint32 = 1273527087
const GetStockFinancialsQueryRequestTypeCode uint32 = 1093190923
const FinancialTypeCode uint32 = 1125392261
const GetStockFinancialsResponseTypeCode uint32 = 3711237055
const GetMarketStatusResponseTypeCode uint32 = 650064688
const MarketHolidayTypeCode uint32 = 2806934197
const GetMarketHolidaysResponseTypeCode uint32 = 1466441428
const GetEquityExchangesQueryRequestTypeCode uint32 = 1349096708
const GetEquityExchangesResponseTypeCode uint32 = 656276966
const GetEquityPreviousCloseQueryRequestTypeCode uint32 = 1522478140
const GetEquityPreviousCloseResponseTypeCode uint32 = 3986610584
const GetEquityAggregatesBarsQueryRequestTypeCode uint32 = 1788477246
const GetEquityAggregatesBarsResponseTypeCode uint32 = 2417211884
const GetEquityGroupedDailyBarsQueryRequestTypeCode uint32 = 1074794067
const GetEquityGroupedDailyBarsResponseTypeCode uint32 = 363593442
const GetEquityHistoricTradesQueryRequestTypeCode uint32 = 3354817695
const GetEquityHistoricTradesResponseTypeCode uint32 = 1549511616
const GetEquityHistoricQuotesNBBOQueryRequestTypeCode uint32 = 4058539937
const GetEquityHistoricQuotesNBBOResponseTypeCode uint32 = 170327305
const GetEquityLastTradeForSymbolQueryRequestTypeCode uint32 = 3253193073
const GetEquityLastTradeForSymbolResponseTypeCode uint32 = 1984558747
const GetEquityLastQuoteForSymbolQueryRequestTypeCode uint32 = 737078501
const GetEquityLastQuoteForSymbolResponseTypeCode uint32 = 387407244
const GetEquityDailyOpenCloseQueryRequestTypeCode uint32 = 1196186742
const GetEquityDailyOpenCloseResponseTypeCode uint32 = 2724460981
const GetEquityConditionMappingsQueryRequestTypeCode uint32 = 3717733889
const GetEquityConditionMappingsResponseTypeCode uint32 = 2286266795
const GetEquitySnapshotAllTickersQueryRequestTypeCode uint32 = 1033874898
const GetEquitySnapshotAllTickersResponseTypeCode uint32 = 1165114329
const GetEquitySnapshotSingleTickerQueryRequestTypeCode uint32 = 557281853
const GetEquitySnapshotSingleTickerResponseTypeCode uint32 = 2864925970
const GetEquitySnapshotGainersLosersQueryRequestTypeCode uint32 = 3643697309
const GetEquitySnapshotGainersLosersResponseTypeCode uint32 = 2843180713
const GetForexPreviousCloseQueryRequestTypeCode uint32 = 1151857808
const GetForexPreviousCloseResponseTypeCode uint32 = 3314473837
const GetForexAggregatesBarsQueryRequestTypeCode uint32 = 2051307990
const GetForexAggregatesBarsResponseTypeCode uint32 = 2270163497
const GetForexGroupedDailyBarsQueryRequestTypeCode uint32 = 2788588009
const GetForexGroupedDailyBarsResponseTypeCode uint32 = 263342996
const GetForexHistoricForexTicksQueryRequestTypeCode uint32 = 1052710151
const GetForexHistoricForexTicksResponseTypeCode uint32 = 1976461497
const GetForexRealTimeCurrencyConversionQueryRequestTypeCode uint32 = 2060608448
const GetForexRealTimeCurrencyConversionResponseTypeCode uint32 = 2898205122
const GetForexLastQuoteForCurrencyPairQueryRequestTypeCode uint32 = 1000625165
const GetForexLastQuoteForCurrencyPairResponseTypeCode uint32 = 493462478
const GetForexSnapshotAllTickersQueryRequestTypeCode uint32 = 1294992531
const GetForexSnapshotAllTickersResponseTypeCode uint32 = 3948814825
const GetForexSnapshotGainersLosersQueryRequestTypeCode uint32 = 3005977209
const GetForexSnapshotGainersLosersResponseTypeCode uint32 = 1633265411
const GetCryptoPreviousCloseQueryRequestTypeCode uint32 = 2584698133
const GetCryptoPreviousCloseResponseTypeCode uint32 = 567515518
const GetCryptoAggregatesBarsQueryRequestTypeCode uint32 = 3269424905
const GetCryptoAggregatesBarsResponseTypeCode uint32 = 4012107650
const GetCryptoGroupedDailyBarsQueryRequestTypeCode uint32 = 1679780888
const GetCryptoGroupedDailyBarsResponseTypeCode uint32 = 4153345179
const GetCryptoCryptoExchangesQueryRequestTypeCode uint32 = 2318695807
const GetCryptoCryptoExchangesResponseTypeCode uint32 = 1929042948
const GetCryptoLastTradeForCryptoPairQueryRequestTypeCode uint32 = 4128514571
const GetCryptoLastTradeForCryptoPairResponseTypeCode uint32 = 1913279516
const GetCryptoDailyOpenCloseQueryRequestTypeCode uint32 = 4010464321
const GetCryptoDailyOpenCloseResponseTypeCode uint32 = 3713247195
const GetCryptoHistoricCryptoTradesQueryRequestTypeCode uint32 = 1604543804
const GetCryptoHistoricCryptoTradesResponseTypeCode uint32 = 2298915338
const GetCryptoSnapshotAllTickersQueryRequestTypeCode uint32 = 3230589044
const GetCryptoSnapshotAllTickersResponseTypeCode uint32 = 3979654126
const GetCryptoSnapshotSingleTickerQueryRequestTypeCode uint32 = 2967108733
const GetCryptoSnapshotSingleTickerResponseTypeCode uint32 = 2395746137
const GetCryptoSnapshotSingleTickerFullBookL2QueryRequestTypeCode uint32 = 1193676702
const GetCryptoSnapshotSingleTickerFullBookL2ResponseTypeCode uint32 = 2692322714
const GetCryptoSnapshotGainersLosersQueryRequestTypeCode uint32 = 1905393402
const GetCryptoSnapshotGainersLosersResponseTypeCode uint32 = 1165060757

//true
//true
//false
//false
type GetErrorResponseWrapper struct {
	goprotoextra.BaseMessageWrapper
	Data *GetErrorResponse
}

func (self *GetErrorResponseWrapper) Message() interface{} {
	return self.Data
}

func (self *GetErrorResponseWrapper) messageWrapper() interface{} {
	return self
}

func NewGetErrorResponseWrapper(
	cancelCtx context.Context,
	cancelFunc context.CancelFunc,
	toReactor goprotoextra.ToReactorFunc,
	toConnection goprotoextra.ToConnectionFunc,
	data *GetErrorResponse) *GetErrorResponseWrapper {
	return &GetErrorResponseWrapper{
		BaseMessageWrapper: goprotoextra.NewBaseMessageWrapper(
			cancelCtx,
			cancelFunc,
			toReactor,
			toConnection),
		Data: data,
	}
}

var _ = stream.Register(
	GetErrorResponseTypeCode,
	stream.TypeCodeData{
		CreateMessage: func() proto1.Message {
			return &GetErrorResponse{}
		},
		CreateWrapper: func(
			cancelCtx context.Context,
			cancelFunc context.CancelFunc,
			toReactor goprotoextra.ToReactorFunc,
			toConnection goprotoextra.ToConnectionFunc,
			data proto1.Message) (goprotoextra.IMessageWrapper, error) {
			if msg, ok := data.(*GetErrorResponse); ok {
				return NewGetErrorResponseWrapper(
					cancelCtx,
					cancelFunc,
					toReactor,
					toConnection,
					msg), nil
			}
			return nil, goerrors.InvalidParam
		}})

//true
//true
//false
//false
type GetTickerQueryRequestWrapper struct {
	goprotoextra.BaseMessageWrapper
	Data *GetTickerQueryRequest
}

func (self *GetTickerQueryRequestWrapper) Message() interface{} {
	return self.Data
}

func (self *GetTickerQueryRequestWrapper) messageWrapper() interface{} {
	return self
}

func NewGetTickerQueryRequestWrapper(
	cancelCtx context.Context,
	cancelFunc context.CancelFunc,
	toReactor goprotoextra.ToReactorFunc,
	toConnection goprotoextra.ToConnectionFunc,
	data *GetTickerQueryRequest) *GetTickerQueryRequestWrapper {
	return &GetTickerQueryRequestWrapper{
		BaseMessageWrapper: goprotoextra.NewBaseMessageWrapper(
			cancelCtx,
			cancelFunc,
			toReactor,
			toConnection),
		Data: data,
	}
}

var _ = stream.Register(
	GetTickerQueryRequestTypeCode,
	stream.TypeCodeData{
		CreateMessage: func() proto1.Message {
			return &GetTickerQueryRequest{}
		},
		CreateWrapper: func(
			cancelCtx context.Context,
			cancelFunc context.CancelFunc,
			toReactor goprotoextra.ToReactorFunc,
			toConnection goprotoextra.ToConnectionFunc,
			data proto1.Message) (goprotoextra.IMessageWrapper, error) {
			if msg, ok := data.(*GetTickerQueryRequest); ok {
				return NewGetTickerQueryRequestWrapper(
					cancelCtx,
					cancelFunc,
					toReactor,
					toConnection,
					msg), nil
			}
			return nil, goerrors.InvalidParam
		}})

//true
//true
//false
//false
type SymbolWrapper struct {
	goprotoextra.BaseMessageWrapper
	Data *Symbol
}

func (self *SymbolWrapper) Message() interface{} {
	return self.Data
}

func (self *SymbolWrapper) messageWrapper() interface{} {
	return self
}

func NewSymbolWrapper(
	cancelCtx context.Context,
	cancelFunc context.CancelFunc,
	toReactor goprotoextra.ToReactorFunc,
	toConnection goprotoextra.ToConnectionFunc,
	data *Symbol) *SymbolWrapper {
	return &SymbolWrapper{
		BaseMessageWrapper: goprotoextra.NewBaseMessageWrapper(
			cancelCtx,
			cancelFunc,
			toReactor,
			toConnection),
		Data: data,
	}
}

var _ = stream.Register(
	SymbolTypeCode,
	stream.TypeCodeData{
		CreateMessage: func() proto1.Message {
			return &Symbol{}
		},
		CreateWrapper: func(
			cancelCtx context.Context,
			cancelFunc context.CancelFunc,
			toReactor goprotoextra.ToReactorFunc,
			toConnection goprotoextra.ToConnectionFunc,
			data proto1.Message) (goprotoextra.IMessageWrapper, error) {
			if msg, ok := data.(*Symbol); ok {
				return NewSymbolWrapper(
					cancelCtx,
					cancelFunc,
					toReactor,
					toConnection,
					msg), nil
			}
			return nil, goerrors.InvalidParam
		}})

//true
//true
//false
//false
type GetTickerResponseWrapper struct {
	goprotoextra.BaseMessageWrapper
	Data *GetTickerResponse
}

func (self *GetTickerResponseWrapper) Message() interface{} {
	return self.Data
}

func (self *GetTickerResponseWrapper) messageWrapper() interface{} {
	return self
}

func NewGetTickerResponseWrapper(
	cancelCtx context.Context,
	cancelFunc context.CancelFunc,
	toReactor goprotoextra.ToReactorFunc,
	toConnection goprotoextra.ToConnectionFunc,
	data *GetTickerResponse) *GetTickerResponseWrapper {
	return &GetTickerResponseWrapper{
		BaseMessageWrapper: goprotoextra.NewBaseMessageWrapper(
			cancelCtx,
			cancelFunc,
			toReactor,
			toConnection),
		Data: data,
	}
}

var _ = stream.Register(
	GetTickerResponseTypeCode,
	stream.TypeCodeData{
		CreateMessage: func() proto1.Message {
			return &GetTickerResponse{}
		},
		CreateWrapper: func(
			cancelCtx context.Context,
			cancelFunc context.CancelFunc,
			toReactor goprotoextra.ToReactorFunc,
			toConnection goprotoextra.ToConnectionFunc,
			data proto1.Message) (goprotoextra.IMessageWrapper, error) {
			if msg, ok := data.(*GetTickerResponse); ok {
				return NewGetTickerResponseWrapper(
					cancelCtx,
					cancelFunc,
					toReactor,
					toConnection,
					msg), nil
			}
			return nil, goerrors.InvalidParam
		}})

//true
//true
//false
//false
type GetTickerTypesResponseWrapper struct {
	goprotoextra.BaseMessageWrapper
	Data *GetTickerTypesResponse
}

func (self *GetTickerTypesResponseWrapper) Message() interface{} {
	return self.Data
}

func (self *GetTickerTypesResponseWrapper) messageWrapper() interface{} {
	return self
}

func NewGetTickerTypesResponseWrapper(
	cancelCtx context.Context,
	cancelFunc context.CancelFunc,
	toReactor goprotoextra.ToReactorFunc,
	toConnection goprotoextra.ToConnectionFunc,
	data *GetTickerTypesResponse) *GetTickerTypesResponseWrapper {
	return &GetTickerTypesResponseWrapper{
		BaseMessageWrapper: goprotoextra.NewBaseMessageWrapper(
			cancelCtx,
			cancelFunc,
			toReactor,
			toConnection),
		Data: data,
	}
}

var _ = stream.Register(
	GetTickerTypesResponseTypeCode,
	stream.TypeCodeData{
		CreateMessage: func() proto1.Message {
			return &GetTickerTypesResponse{}
		},
		CreateWrapper: func(
			cancelCtx context.Context,
			cancelFunc context.CancelFunc,
			toReactor goprotoextra.ToReactorFunc,
			toConnection goprotoextra.ToConnectionFunc,
			data proto1.Message) (goprotoextra.IMessageWrapper, error) {
			if msg, ok := data.(*GetTickerTypesResponse); ok {
				return NewGetTickerTypesResponseWrapper(
					cancelCtx,
					cancelFunc,
					toReactor,
					toConnection,
					msg), nil
			}
			return nil, goerrors.InvalidParam
		}})

//true
//true
//false
//false
type GetTickerDetailsResponseWrapper struct {
	goprotoextra.BaseMessageWrapper
	Data *GetTickerDetailsResponse
}

func (self *GetTickerDetailsResponseWrapper) Message() interface{} {
	return self.Data
}

func (self *GetTickerDetailsResponseWrapper) messageWrapper() interface{} {
	return self
}

func NewGetTickerDetailsResponseWrapper(
	cancelCtx context.Context,
	cancelFunc context.CancelFunc,
	toReactor goprotoextra.ToReactorFunc,
	toConnection goprotoextra.ToConnectionFunc,
	data *GetTickerDetailsResponse) *GetTickerDetailsResponseWrapper {
	return &GetTickerDetailsResponseWrapper{
		BaseMessageWrapper: goprotoextra.NewBaseMessageWrapper(
			cancelCtx,
			cancelFunc,
			toReactor,
			toConnection),
		Data: data,
	}
}

var _ = stream.Register(
	GetTickerDetailsResponseTypeCode,
	stream.TypeCodeData{
		CreateMessage: func() proto1.Message {
			return &GetTickerDetailsResponse{}
		},
		CreateWrapper: func(
			cancelCtx context.Context,
			cancelFunc context.CancelFunc,
			toReactor goprotoextra.ToReactorFunc,
			toConnection goprotoextra.ToConnectionFunc,
			data proto1.Message) (goprotoextra.IMessageWrapper, error) {
			if msg, ok := data.(*GetTickerDetailsResponse); ok {
				return NewGetTickerDetailsResponseWrapper(
					cancelCtx,
					cancelFunc,
					toReactor,
					toConnection,
					msg), nil
			}
			return nil, goerrors.InvalidParam
		}})

//true
//true
//false
//false
type GetTickerNewsQueryRequestWrapper struct {
	goprotoextra.BaseMessageWrapper
	Data *GetTickerNewsQueryRequest
}

func (self *GetTickerNewsQueryRequestWrapper) Message() interface{} {
	return self.Data
}

func (self *GetTickerNewsQueryRequestWrapper) messageWrapper() interface{} {
	return self
}

func NewGetTickerNewsQueryRequestWrapper(
	cancelCtx context.Context,
	cancelFunc context.CancelFunc,
	toReactor goprotoextra.ToReactorFunc,
	toConnection goprotoextra.ToConnectionFunc,
	data *GetTickerNewsQueryRequest) *GetTickerNewsQueryRequestWrapper {
	return &GetTickerNewsQueryRequestWrapper{
		BaseMessageWrapper: goprotoextra.NewBaseMessageWrapper(
			cancelCtx,
			cancelFunc,
			toReactor,
			toConnection),
		Data: data,
	}
}

var _ = stream.Register(
	GetTickerNewsQueryRequestTypeCode,
	stream.TypeCodeData{
		CreateMessage: func() proto1.Message {
			return &GetTickerNewsQueryRequest{}
		},
		CreateWrapper: func(
			cancelCtx context.Context,
			cancelFunc context.CancelFunc,
			toReactor goprotoextra.ToReactorFunc,
			toConnection goprotoextra.ToConnectionFunc,
			data proto1.Message) (goprotoextra.IMessageWrapper, error) {
			if msg, ok := data.(*GetTickerNewsQueryRequest); ok {
				return NewGetTickerNewsQueryRequestWrapper(
					cancelCtx,
					cancelFunc,
					toReactor,
					toConnection,
					msg), nil
			}
			return nil, goerrors.InvalidParam
		}})

//true
//true
//false
//false
type NewsWrapper struct {
	goprotoextra.BaseMessageWrapper
	Data *News
}

func (self *NewsWrapper) Message() interface{} {
	return self.Data
}

func (self *NewsWrapper) messageWrapper() interface{} {
	return self
}

func NewNewsWrapper(
	cancelCtx context.Context,
	cancelFunc context.CancelFunc,
	toReactor goprotoextra.ToReactorFunc,
	toConnection goprotoextra.ToConnectionFunc,
	data *News) *NewsWrapper {
	return &NewsWrapper{
		BaseMessageWrapper: goprotoextra.NewBaseMessageWrapper(
			cancelCtx,
			cancelFunc,
			toReactor,
			toConnection),
		Data: data,
	}
}

var _ = stream.Register(
	NewsTypeCode,
	stream.TypeCodeData{
		CreateMessage: func() proto1.Message {
			return &News{}
		},
		CreateWrapper: func(
			cancelCtx context.Context,
			cancelFunc context.CancelFunc,
			toReactor goprotoextra.ToReactorFunc,
			toConnection goprotoextra.ToConnectionFunc,
			data proto1.Message) (goprotoextra.IMessageWrapper, error) {
			if msg, ok := data.(*News); ok {
				return NewNewsWrapper(
					cancelCtx,
					cancelFunc,
					toReactor,
					toConnection,
					msg), nil
			}
			return nil, goerrors.InvalidParam
		}})

//true
//true
//false
//false
type GetTickerNewsResponseWrapper struct {
	goprotoextra.BaseMessageWrapper
	Data *GetTickerNewsResponse
}

func (self *GetTickerNewsResponseWrapper) Message() interface{} {
	return self.Data
}

func (self *GetTickerNewsResponseWrapper) messageWrapper() interface{} {
	return self
}

func NewGetTickerNewsResponseWrapper(
	cancelCtx context.Context,
	cancelFunc context.CancelFunc,
	toReactor goprotoextra.ToReactorFunc,
	toConnection goprotoextra.ToConnectionFunc,
	data *GetTickerNewsResponse) *GetTickerNewsResponseWrapper {
	return &GetTickerNewsResponseWrapper{
		BaseMessageWrapper: goprotoextra.NewBaseMessageWrapper(
			cancelCtx,
			cancelFunc,
			toReactor,
			toConnection),
		Data: data,
	}
}

var _ = stream.Register(
	GetTickerNewsResponseTypeCode,
	stream.TypeCodeData{
		CreateMessage: func() proto1.Message {
			return &GetTickerNewsResponse{}
		},
		CreateWrapper: func(
			cancelCtx context.Context,
			cancelFunc context.CancelFunc,
			toReactor goprotoextra.ToReactorFunc,
			toConnection goprotoextra.ToConnectionFunc,
			data proto1.Message) (goprotoextra.IMessageWrapper, error) {
			if msg, ok := data.(*GetTickerNewsResponse); ok {
				return NewGetTickerNewsResponseWrapper(
					cancelCtx,
					cancelFunc,
					toReactor,
					toConnection,
					msg), nil
			}
			return nil, goerrors.InvalidParam
		}})

//true
//true
//false
//false
type MarketWrapper struct {
	goprotoextra.BaseMessageWrapper
	Data *Market
}

func (self *MarketWrapper) Message() interface{} {
	return self.Data
}

func (self *MarketWrapper) messageWrapper() interface{} {
	return self
}

func NewMarketWrapper(
	cancelCtx context.Context,
	cancelFunc context.CancelFunc,
	toReactor goprotoextra.ToReactorFunc,
	toConnection goprotoextra.ToConnectionFunc,
	data *Market) *MarketWrapper {
	return &MarketWrapper{
		BaseMessageWrapper: goprotoextra.NewBaseMessageWrapper(
			cancelCtx,
			cancelFunc,
			toReactor,
			toConnection),
		Data: data,
	}
}

var _ = stream.Register(
	MarketTypeCode,
	stream.TypeCodeData{
		CreateMessage: func() proto1.Message {
			return &Market{}
		},
		CreateWrapper: func(
			cancelCtx context.Context,
			cancelFunc context.CancelFunc,
			toReactor goprotoextra.ToReactorFunc,
			toConnection goprotoextra.ToConnectionFunc,
			data proto1.Message) (goprotoextra.IMessageWrapper, error) {
			if msg, ok := data.(*Market); ok {
				return NewMarketWrapper(
					cancelCtx,
					cancelFunc,
					toReactor,
					toConnection,
					msg), nil
			}
			return nil, goerrors.InvalidParam
		}})

//true
//true
//false
//false
type GetMarketsResponseWrapper struct {
	goprotoextra.BaseMessageWrapper
	Data *GetMarketsResponse
}

func (self *GetMarketsResponseWrapper) Message() interface{} {
	return self.Data
}

func (self *GetMarketsResponseWrapper) messageWrapper() interface{} {
	return self
}

func NewGetMarketsResponseWrapper(
	cancelCtx context.Context,
	cancelFunc context.CancelFunc,
	toReactor goprotoextra.ToReactorFunc,
	toConnection goprotoextra.ToConnectionFunc,
	data *GetMarketsResponse) *GetMarketsResponseWrapper {
	return &GetMarketsResponseWrapper{
		BaseMessageWrapper: goprotoextra.NewBaseMessageWrapper(
			cancelCtx,
			cancelFunc,
			toReactor,
			toConnection),
		Data: data,
	}
}

var _ = stream.Register(
	GetMarketsResponseTypeCode,
	stream.TypeCodeData{
		CreateMessage: func() proto1.Message {
			return &GetMarketsResponse{}
		},
		CreateWrapper: func(
			cancelCtx context.Context,
			cancelFunc context.CancelFunc,
			toReactor goprotoextra.ToReactorFunc,
			toConnection goprotoextra.ToConnectionFunc,
			data proto1.Message) (goprotoextra.IMessageWrapper, error) {
			if msg, ok := data.(*GetMarketsResponse); ok {
				return NewGetMarketsResponseWrapper(
					cancelCtx,
					cancelFunc,
					toReactor,
					toConnection,
					msg), nil
			}
			return nil, goerrors.InvalidParam
		}})

//true
//true
//false
//false
type LocaleWrapper struct {
	goprotoextra.BaseMessageWrapper
	Data *Locale
}

func (self *LocaleWrapper) Message() interface{} {
	return self.Data
}

func (self *LocaleWrapper) messageWrapper() interface{} {
	return self
}

func NewLocaleWrapper(
	cancelCtx context.Context,
	cancelFunc context.CancelFunc,
	toReactor goprotoextra.ToReactorFunc,
	toConnection goprotoextra.ToConnectionFunc,
	data *Locale) *LocaleWrapper {
	return &LocaleWrapper{
		BaseMessageWrapper: goprotoextra.NewBaseMessageWrapper(
			cancelCtx,
			cancelFunc,
			toReactor,
			toConnection),
		Data: data,
	}
}

var _ = stream.Register(
	LocaleTypeCode,
	stream.TypeCodeData{
		CreateMessage: func() proto1.Message {
			return &Locale{}
		},
		CreateWrapper: func(
			cancelCtx context.Context,
			cancelFunc context.CancelFunc,
			toReactor goprotoextra.ToReactorFunc,
			toConnection goprotoextra.ToConnectionFunc,
			data proto1.Message) (goprotoextra.IMessageWrapper, error) {
			if msg, ok := data.(*Locale); ok {
				return NewLocaleWrapper(
					cancelCtx,
					cancelFunc,
					toReactor,
					toConnection,
					msg), nil
			}
			return nil, goerrors.InvalidParam
		}})

//true
//true
//false
//false
type GetLocalesResponseWrapper struct {
	goprotoextra.BaseMessageWrapper
	Data *GetLocalesResponse
}

func (self *GetLocalesResponseWrapper) Message() interface{} {
	return self.Data
}

func (self *GetLocalesResponseWrapper) messageWrapper() interface{} {
	return self
}

func NewGetLocalesResponseWrapper(
	cancelCtx context.Context,
	cancelFunc context.CancelFunc,
	toReactor goprotoextra.ToReactorFunc,
	toConnection goprotoextra.ToConnectionFunc,
	data *GetLocalesResponse) *GetLocalesResponseWrapper {
	return &GetLocalesResponseWrapper{
		BaseMessageWrapper: goprotoextra.NewBaseMessageWrapper(
			cancelCtx,
			cancelFunc,
			toReactor,
			toConnection),
		Data: data,
	}
}

var _ = stream.Register(
	GetLocalesResponseTypeCode,
	stream.TypeCodeData{
		CreateMessage: func() proto1.Message {
			return &GetLocalesResponse{}
		},
		CreateWrapper: func(
			cancelCtx context.Context,
			cancelFunc context.CancelFunc,
			toReactor goprotoextra.ToReactorFunc,
			toConnection goprotoextra.ToConnectionFunc,
			data proto1.Message) (goprotoextra.IMessageWrapper, error) {
			if msg, ok := data.(*GetLocalesResponse); ok {
				return NewGetLocalesResponseWrapper(
					cancelCtx,
					cancelFunc,
					toReactor,
					toConnection,
					msg), nil
			}
			return nil, goerrors.InvalidParam
		}})

//true
//true
//false
//false
type SplitWrapper struct {
	goprotoextra.BaseMessageWrapper
	Data *Split
}

func (self *SplitWrapper) Message() interface{} {
	return self.Data
}

func (self *SplitWrapper) messageWrapper() interface{} {
	return self
}

func NewSplitWrapper(
	cancelCtx context.Context,
	cancelFunc context.CancelFunc,
	toReactor goprotoextra.ToReactorFunc,
	toConnection goprotoextra.ToConnectionFunc,
	data *Split) *SplitWrapper {
	return &SplitWrapper{
		BaseMessageWrapper: goprotoextra.NewBaseMessageWrapper(
			cancelCtx,
			cancelFunc,
			toReactor,
			toConnection),
		Data: data,
	}
}

var _ = stream.Register(
	SplitTypeCode,
	stream.TypeCodeData{
		CreateMessage: func() proto1.Message {
			return &Split{}
		},
		CreateWrapper: func(
			cancelCtx context.Context,
			cancelFunc context.CancelFunc,
			toReactor goprotoextra.ToReactorFunc,
			toConnection goprotoextra.ToConnectionFunc,
			data proto1.Message) (goprotoextra.IMessageWrapper, error) {
			if msg, ok := data.(*Split); ok {
				return NewSplitWrapper(
					cancelCtx,
					cancelFunc,
					toReactor,
					toConnection,
					msg), nil
			}
			return nil, goerrors.InvalidParam
		}})

//true
//true
//false
//false
type GetStockSplitsResponseWrapper struct {
	goprotoextra.BaseMessageWrapper
	Data *GetStockSplitsResponse
}

func (self *GetStockSplitsResponseWrapper) Message() interface{} {
	return self.Data
}

func (self *GetStockSplitsResponseWrapper) messageWrapper() interface{} {
	return self
}

func NewGetStockSplitsResponseWrapper(
	cancelCtx context.Context,
	cancelFunc context.CancelFunc,
	toReactor goprotoextra.ToReactorFunc,
	toConnection goprotoextra.ToConnectionFunc,
	data *GetStockSplitsResponse) *GetStockSplitsResponseWrapper {
	return &GetStockSplitsResponseWrapper{
		BaseMessageWrapper: goprotoextra.NewBaseMessageWrapper(
			cancelCtx,
			cancelFunc,
			toReactor,
			toConnection),
		Data: data,
	}
}

var _ = stream.Register(
	GetStockSplitsResponseTypeCode,
	stream.TypeCodeData{
		CreateMessage: func() proto1.Message {
			return &GetStockSplitsResponse{}
		},
		CreateWrapper: func(
			cancelCtx context.Context,
			cancelFunc context.CancelFunc,
			toReactor goprotoextra.ToReactorFunc,
			toConnection goprotoextra.ToConnectionFunc,
			data proto1.Message) (goprotoextra.IMessageWrapper, error) {
			if msg, ok := data.(*GetStockSplitsResponse); ok {
				return NewGetStockSplitsResponseWrapper(
					cancelCtx,
					cancelFunc,
					toReactor,
					toConnection,
					msg), nil
			}
			return nil, goerrors.InvalidParam
		}})

//true
//true
//false
//false
type DividendWrapper struct {
	goprotoextra.BaseMessageWrapper
	Data *Dividend
}

func (self *DividendWrapper) Message() interface{} {
	return self.Data
}

func (self *DividendWrapper) messageWrapper() interface{} {
	return self
}

func NewDividendWrapper(
	cancelCtx context.Context,
	cancelFunc context.CancelFunc,
	toReactor goprotoextra.ToReactorFunc,
	toConnection goprotoextra.ToConnectionFunc,
	data *Dividend) *DividendWrapper {
	return &DividendWrapper{
		BaseMessageWrapper: goprotoextra.NewBaseMessageWrapper(
			cancelCtx,
			cancelFunc,
			toReactor,
			toConnection),
		Data: data,
	}
}

var _ = stream.Register(
	DividendTypeCode,
	stream.TypeCodeData{
		CreateMessage: func() proto1.Message {
			return &Dividend{}
		},
		CreateWrapper: func(
			cancelCtx context.Context,
			cancelFunc context.CancelFunc,
			toReactor goprotoextra.ToReactorFunc,
			toConnection goprotoextra.ToConnectionFunc,
			data proto1.Message) (goprotoextra.IMessageWrapper, error) {
			if msg, ok := data.(*Dividend); ok {
				return NewDividendWrapper(
					cancelCtx,
					cancelFunc,
					toReactor,
					toConnection,
					msg), nil
			}
			return nil, goerrors.InvalidParam
		}})

//true
//true
//false
//false
type GetStockDividendsResponseWrapper struct {
	goprotoextra.BaseMessageWrapper
	Data *GetStockDividendsResponse
}

func (self *GetStockDividendsResponseWrapper) Message() interface{} {
	return self.Data
}

func (self *GetStockDividendsResponseWrapper) messageWrapper() interface{} {
	return self
}

func NewGetStockDividendsResponseWrapper(
	cancelCtx context.Context,
	cancelFunc context.CancelFunc,
	toReactor goprotoextra.ToReactorFunc,
	toConnection goprotoextra.ToConnectionFunc,
	data *GetStockDividendsResponse) *GetStockDividendsResponseWrapper {
	return &GetStockDividendsResponseWrapper{
		BaseMessageWrapper: goprotoextra.NewBaseMessageWrapper(
			cancelCtx,
			cancelFunc,
			toReactor,
			toConnection),
		Data: data,
	}
}

var _ = stream.Register(
	GetStockDividendsResponseTypeCode,
	stream.TypeCodeData{
		CreateMessage: func() proto1.Message {
			return &GetStockDividendsResponse{}
		},
		CreateWrapper: func(
			cancelCtx context.Context,
			cancelFunc context.CancelFunc,
			toReactor goprotoextra.ToReactorFunc,
			toConnection goprotoextra.ToConnectionFunc,
			data proto1.Message) (goprotoextra.IMessageWrapper, error) {
			if msg, ok := data.(*GetStockDividendsResponse); ok {
				return NewGetStockDividendsResponseWrapper(
					cancelCtx,
					cancelFunc,
					toReactor,
					toConnection,
					msg), nil
			}
			return nil, goerrors.InvalidParam
		}})

//true
//true
//false
//false
type GetStockFinancialsQueryRequestWrapper struct {
	goprotoextra.BaseMessageWrapper
	Data *GetStockFinancialsQueryRequest
}

func (self *GetStockFinancialsQueryRequestWrapper) Message() interface{} {
	return self.Data
}

func (self *GetStockFinancialsQueryRequestWrapper) messageWrapper() interface{} {
	return self
}

func NewGetStockFinancialsQueryRequestWrapper(
	cancelCtx context.Context,
	cancelFunc context.CancelFunc,
	toReactor goprotoextra.ToReactorFunc,
	toConnection goprotoextra.ToConnectionFunc,
	data *GetStockFinancialsQueryRequest) *GetStockFinancialsQueryRequestWrapper {
	return &GetStockFinancialsQueryRequestWrapper{
		BaseMessageWrapper: goprotoextra.NewBaseMessageWrapper(
			cancelCtx,
			cancelFunc,
			toReactor,
			toConnection),
		Data: data,
	}
}

var _ = stream.Register(
	GetStockFinancialsQueryRequestTypeCode,
	stream.TypeCodeData{
		CreateMessage: func() proto1.Message {
			return &GetStockFinancialsQueryRequest{}
		},
		CreateWrapper: func(
			cancelCtx context.Context,
			cancelFunc context.CancelFunc,
			toReactor goprotoextra.ToReactorFunc,
			toConnection goprotoextra.ToConnectionFunc,
			data proto1.Message) (goprotoextra.IMessageWrapper, error) {
			if msg, ok := data.(*GetStockFinancialsQueryRequest); ok {
				return NewGetStockFinancialsQueryRequestWrapper(
					cancelCtx,
					cancelFunc,
					toReactor,
					toConnection,
					msg), nil
			}
			return nil, goerrors.InvalidParam
		}})

//true
//true
//false
//false
type FinancialWrapper struct {
	goprotoextra.BaseMessageWrapper
	Data *Financial
}

func (self *FinancialWrapper) Message() interface{} {
	return self.Data
}

func (self *FinancialWrapper) messageWrapper() interface{} {
	return self
}

func NewFinancialWrapper(
	cancelCtx context.Context,
	cancelFunc context.CancelFunc,
	toReactor goprotoextra.ToReactorFunc,
	toConnection goprotoextra.ToConnectionFunc,
	data *Financial) *FinancialWrapper {
	return &FinancialWrapper{
		BaseMessageWrapper: goprotoextra.NewBaseMessageWrapper(
			cancelCtx,
			cancelFunc,
			toReactor,
			toConnection),
		Data: data,
	}
}

var _ = stream.Register(
	FinancialTypeCode,
	stream.TypeCodeData{
		CreateMessage: func() proto1.Message {
			return &Financial{}
		},
		CreateWrapper: func(
			cancelCtx context.Context,
			cancelFunc context.CancelFunc,
			toReactor goprotoextra.ToReactorFunc,
			toConnection goprotoextra.ToConnectionFunc,
			data proto1.Message) (goprotoextra.IMessageWrapper, error) {
			if msg, ok := data.(*Financial); ok {
				return NewFinancialWrapper(
					cancelCtx,
					cancelFunc,
					toReactor,
					toConnection,
					msg), nil
			}
			return nil, goerrors.InvalidParam
		}})

//true
//true
//false
//false
type GetStockFinancialsResponseWrapper struct {
	goprotoextra.BaseMessageWrapper
	Data *GetStockFinancialsResponse
}

func (self *GetStockFinancialsResponseWrapper) Message() interface{} {
	return self.Data
}

func (self *GetStockFinancialsResponseWrapper) messageWrapper() interface{} {
	return self
}

func NewGetStockFinancialsResponseWrapper(
	cancelCtx context.Context,
	cancelFunc context.CancelFunc,
	toReactor goprotoextra.ToReactorFunc,
	toConnection goprotoextra.ToConnectionFunc,
	data *GetStockFinancialsResponse) *GetStockFinancialsResponseWrapper {
	return &GetStockFinancialsResponseWrapper{
		BaseMessageWrapper: goprotoextra.NewBaseMessageWrapper(
			cancelCtx,
			cancelFunc,
			toReactor,
			toConnection),
		Data: data,
	}
}

var _ = stream.Register(
	GetStockFinancialsResponseTypeCode,
	stream.TypeCodeData{
		CreateMessage: func() proto1.Message {
			return &GetStockFinancialsResponse{}
		},
		CreateWrapper: func(
			cancelCtx context.Context,
			cancelFunc context.CancelFunc,
			toReactor goprotoextra.ToReactorFunc,
			toConnection goprotoextra.ToConnectionFunc,
			data proto1.Message) (goprotoextra.IMessageWrapper, error) {
			if msg, ok := data.(*GetStockFinancialsResponse); ok {
				return NewGetStockFinancialsResponseWrapper(
					cancelCtx,
					cancelFunc,
					toReactor,
					toConnection,
					msg), nil
			}
			return nil, goerrors.InvalidParam
		}})

//true
//true
//false
//false
type GetMarketStatusResponseWrapper struct {
	goprotoextra.BaseMessageWrapper
	Data *GetMarketStatusResponse
}

func (self *GetMarketStatusResponseWrapper) Message() interface{} {
	return self.Data
}

func (self *GetMarketStatusResponseWrapper) messageWrapper() interface{} {
	return self
}

func NewGetMarketStatusResponseWrapper(
	cancelCtx context.Context,
	cancelFunc context.CancelFunc,
	toReactor goprotoextra.ToReactorFunc,
	toConnection goprotoextra.ToConnectionFunc,
	data *GetMarketStatusResponse) *GetMarketStatusResponseWrapper {
	return &GetMarketStatusResponseWrapper{
		BaseMessageWrapper: goprotoextra.NewBaseMessageWrapper(
			cancelCtx,
			cancelFunc,
			toReactor,
			toConnection),
		Data: data,
	}
}

var _ = stream.Register(
	GetMarketStatusResponseTypeCode,
	stream.TypeCodeData{
		CreateMessage: func() proto1.Message {
			return &GetMarketStatusResponse{}
		},
		CreateWrapper: func(
			cancelCtx context.Context,
			cancelFunc context.CancelFunc,
			toReactor goprotoextra.ToReactorFunc,
			toConnection goprotoextra.ToConnectionFunc,
			data proto1.Message) (goprotoextra.IMessageWrapper, error) {
			if msg, ok := data.(*GetMarketStatusResponse); ok {
				return NewGetMarketStatusResponseWrapper(
					cancelCtx,
					cancelFunc,
					toReactor,
					toConnection,
					msg), nil
			}
			return nil, goerrors.InvalidParam
		}})

//true
//true
//false
//false
type MarketHolidayWrapper struct {
	goprotoextra.BaseMessageWrapper
	Data *MarketHoliday
}

func (self *MarketHolidayWrapper) Message() interface{} {
	return self.Data
}

func (self *MarketHolidayWrapper) messageWrapper() interface{} {
	return self
}

func NewMarketHolidayWrapper(
	cancelCtx context.Context,
	cancelFunc context.CancelFunc,
	toReactor goprotoextra.ToReactorFunc,
	toConnection goprotoextra.ToConnectionFunc,
	data *MarketHoliday) *MarketHolidayWrapper {
	return &MarketHolidayWrapper{
		BaseMessageWrapper: goprotoextra.NewBaseMessageWrapper(
			cancelCtx,
			cancelFunc,
			toReactor,
			toConnection),
		Data: data,
	}
}

var _ = stream.Register(
	MarketHolidayTypeCode,
	stream.TypeCodeData{
		CreateMessage: func() proto1.Message {
			return &MarketHoliday{}
		},
		CreateWrapper: func(
			cancelCtx context.Context,
			cancelFunc context.CancelFunc,
			toReactor goprotoextra.ToReactorFunc,
			toConnection goprotoextra.ToConnectionFunc,
			data proto1.Message) (goprotoextra.IMessageWrapper, error) {
			if msg, ok := data.(*MarketHoliday); ok {
				return NewMarketHolidayWrapper(
					cancelCtx,
					cancelFunc,
					toReactor,
					toConnection,
					msg), nil
			}
			return nil, goerrors.InvalidParam
		}})

//true
//true
//false
//false
type GetMarketHolidaysResponseWrapper struct {
	goprotoextra.BaseMessageWrapper
	Data *GetMarketHolidaysResponse
}

func (self *GetMarketHolidaysResponseWrapper) Message() interface{} {
	return self.Data
}

func (self *GetMarketHolidaysResponseWrapper) messageWrapper() interface{} {
	return self
}

func NewGetMarketHolidaysResponseWrapper(
	cancelCtx context.Context,
	cancelFunc context.CancelFunc,
	toReactor goprotoextra.ToReactorFunc,
	toConnection goprotoextra.ToConnectionFunc,
	data *GetMarketHolidaysResponse) *GetMarketHolidaysResponseWrapper {
	return &GetMarketHolidaysResponseWrapper{
		BaseMessageWrapper: goprotoextra.NewBaseMessageWrapper(
			cancelCtx,
			cancelFunc,
			toReactor,
			toConnection),
		Data: data,
	}
}

var _ = stream.Register(
	GetMarketHolidaysResponseTypeCode,
	stream.TypeCodeData{
		CreateMessage: func() proto1.Message {
			return &GetMarketHolidaysResponse{}
		},
		CreateWrapper: func(
			cancelCtx context.Context,
			cancelFunc context.CancelFunc,
			toReactor goprotoextra.ToReactorFunc,
			toConnection goprotoextra.ToConnectionFunc,
			data proto1.Message) (goprotoextra.IMessageWrapper, error) {
			if msg, ok := data.(*GetMarketHolidaysResponse); ok {
				return NewGetMarketHolidaysResponseWrapper(
					cancelCtx,
					cancelFunc,
					toReactor,
					toConnection,
					msg), nil
			}
			return nil, goerrors.InvalidParam
		}})

//true
//true
//false
//false
type GetEquityExchangesQueryRequestWrapper struct {
	goprotoextra.BaseMessageWrapper
	Data *GetEquityExchangesQueryRequest
}

func (self *GetEquityExchangesQueryRequestWrapper) Message() interface{} {
	return self.Data
}

func (self *GetEquityExchangesQueryRequestWrapper) messageWrapper() interface{} {
	return self
}

func NewGetEquityExchangesQueryRequestWrapper(
	cancelCtx context.Context,
	cancelFunc context.CancelFunc,
	toReactor goprotoextra.ToReactorFunc,
	toConnection goprotoextra.ToConnectionFunc,
	data *GetEquityExchangesQueryRequest) *GetEquityExchangesQueryRequestWrapper {
	return &GetEquityExchangesQueryRequestWrapper{
		BaseMessageWrapper: goprotoextra.NewBaseMessageWrapper(
			cancelCtx,
			cancelFunc,
			toReactor,
			toConnection),
		Data: data,
	}
}

var _ = stream.Register(
	GetEquityExchangesQueryRequestTypeCode,
	stream.TypeCodeData{
		CreateMessage: func() proto1.Message {
			return &GetEquityExchangesQueryRequest{}
		},
		CreateWrapper: func(
			cancelCtx context.Context,
			cancelFunc context.CancelFunc,
			toReactor goprotoextra.ToReactorFunc,
			toConnection goprotoextra.ToConnectionFunc,
			data proto1.Message) (goprotoextra.IMessageWrapper, error) {
			if msg, ok := data.(*GetEquityExchangesQueryRequest); ok {
				return NewGetEquityExchangesQueryRequestWrapper(
					cancelCtx,
					cancelFunc,
					toReactor,
					toConnection,
					msg), nil
			}
			return nil, goerrors.InvalidParam
		}})

//true
//true
//false
//false
type GetEquityExchangesResponseWrapper struct {
	goprotoextra.BaseMessageWrapper
	Data *GetEquityExchangesResponse
}

func (self *GetEquityExchangesResponseWrapper) Message() interface{} {
	return self.Data
}

func (self *GetEquityExchangesResponseWrapper) messageWrapper() interface{} {
	return self
}

func NewGetEquityExchangesResponseWrapper(
	cancelCtx context.Context,
	cancelFunc context.CancelFunc,
	toReactor goprotoextra.ToReactorFunc,
	toConnection goprotoextra.ToConnectionFunc,
	data *GetEquityExchangesResponse) *GetEquityExchangesResponseWrapper {
	return &GetEquityExchangesResponseWrapper{
		BaseMessageWrapper: goprotoextra.NewBaseMessageWrapper(
			cancelCtx,
			cancelFunc,
			toReactor,
			toConnection),
		Data: data,
	}
}

var _ = stream.Register(
	GetEquityExchangesResponseTypeCode,
	stream.TypeCodeData{
		CreateMessage: func() proto1.Message {
			return &GetEquityExchangesResponse{}
		},
		CreateWrapper: func(
			cancelCtx context.Context,
			cancelFunc context.CancelFunc,
			toReactor goprotoextra.ToReactorFunc,
			toConnection goprotoextra.ToConnectionFunc,
			data proto1.Message) (goprotoextra.IMessageWrapper, error) {
			if msg, ok := data.(*GetEquityExchangesResponse); ok {
				return NewGetEquityExchangesResponseWrapper(
					cancelCtx,
					cancelFunc,
					toReactor,
					toConnection,
					msg), nil
			}
			return nil, goerrors.InvalidParam
		}})

//true
//true
//false
//false
type GetEquityPreviousCloseQueryRequestWrapper struct {
	goprotoextra.BaseMessageWrapper
	Data *GetEquityPreviousCloseQueryRequest
}

func (self *GetEquityPreviousCloseQueryRequestWrapper) Message() interface{} {
	return self.Data
}

func (self *GetEquityPreviousCloseQueryRequestWrapper) messageWrapper() interface{} {
	return self
}

func NewGetEquityPreviousCloseQueryRequestWrapper(
	cancelCtx context.Context,
	cancelFunc context.CancelFunc,
	toReactor goprotoextra.ToReactorFunc,
	toConnection goprotoextra.ToConnectionFunc,
	data *GetEquityPreviousCloseQueryRequest) *GetEquityPreviousCloseQueryRequestWrapper {
	return &GetEquityPreviousCloseQueryRequestWrapper{
		BaseMessageWrapper: goprotoextra.NewBaseMessageWrapper(
			cancelCtx,
			cancelFunc,
			toReactor,
			toConnection),
		Data: data,
	}
}

var _ = stream.Register(
	GetEquityPreviousCloseQueryRequestTypeCode,
	stream.TypeCodeData{
		CreateMessage: func() proto1.Message {
			return &GetEquityPreviousCloseQueryRequest{}
		},
		CreateWrapper: func(
			cancelCtx context.Context,
			cancelFunc context.CancelFunc,
			toReactor goprotoextra.ToReactorFunc,
			toConnection goprotoextra.ToConnectionFunc,
			data proto1.Message) (goprotoextra.IMessageWrapper, error) {
			if msg, ok := data.(*GetEquityPreviousCloseQueryRequest); ok {
				return NewGetEquityPreviousCloseQueryRequestWrapper(
					cancelCtx,
					cancelFunc,
					toReactor,
					toConnection,
					msg), nil
			}
			return nil, goerrors.InvalidParam
		}})

//true
//true
//false
//false
type GetEquityPreviousCloseResponseWrapper struct {
	goprotoextra.BaseMessageWrapper
	Data *GetEquityPreviousCloseResponse
}

func (self *GetEquityPreviousCloseResponseWrapper) Message() interface{} {
	return self.Data
}

func (self *GetEquityPreviousCloseResponseWrapper) messageWrapper() interface{} {
	return self
}

func NewGetEquityPreviousCloseResponseWrapper(
	cancelCtx context.Context,
	cancelFunc context.CancelFunc,
	toReactor goprotoextra.ToReactorFunc,
	toConnection goprotoextra.ToConnectionFunc,
	data *GetEquityPreviousCloseResponse) *GetEquityPreviousCloseResponseWrapper {
	return &GetEquityPreviousCloseResponseWrapper{
		BaseMessageWrapper: goprotoextra.NewBaseMessageWrapper(
			cancelCtx,
			cancelFunc,
			toReactor,
			toConnection),
		Data: data,
	}
}

var _ = stream.Register(
	GetEquityPreviousCloseResponseTypeCode,
	stream.TypeCodeData{
		CreateMessage: func() proto1.Message {
			return &GetEquityPreviousCloseResponse{}
		},
		CreateWrapper: func(
			cancelCtx context.Context,
			cancelFunc context.CancelFunc,
			toReactor goprotoextra.ToReactorFunc,
			toConnection goprotoextra.ToConnectionFunc,
			data proto1.Message) (goprotoextra.IMessageWrapper, error) {
			if msg, ok := data.(*GetEquityPreviousCloseResponse); ok {
				return NewGetEquityPreviousCloseResponseWrapper(
					cancelCtx,
					cancelFunc,
					toReactor,
					toConnection,
					msg), nil
			}
			return nil, goerrors.InvalidParam
		}})

//true
//true
//false
//false
type GetEquityAggregatesBarsQueryRequestWrapper struct {
	goprotoextra.BaseMessageWrapper
	Data *GetEquityAggregatesBarsQueryRequest
}

func (self *GetEquityAggregatesBarsQueryRequestWrapper) Message() interface{} {
	return self.Data
}

func (self *GetEquityAggregatesBarsQueryRequestWrapper) messageWrapper() interface{} {
	return self
}

func NewGetEquityAggregatesBarsQueryRequestWrapper(
	cancelCtx context.Context,
	cancelFunc context.CancelFunc,
	toReactor goprotoextra.ToReactorFunc,
	toConnection goprotoextra.ToConnectionFunc,
	data *GetEquityAggregatesBarsQueryRequest) *GetEquityAggregatesBarsQueryRequestWrapper {
	return &GetEquityAggregatesBarsQueryRequestWrapper{
		BaseMessageWrapper: goprotoextra.NewBaseMessageWrapper(
			cancelCtx,
			cancelFunc,
			toReactor,
			toConnection),
		Data: data,
	}
}

var _ = stream.Register(
	GetEquityAggregatesBarsQueryRequestTypeCode,
	stream.TypeCodeData{
		CreateMessage: func() proto1.Message {
			return &GetEquityAggregatesBarsQueryRequest{}
		},
		CreateWrapper: func(
			cancelCtx context.Context,
			cancelFunc context.CancelFunc,
			toReactor goprotoextra.ToReactorFunc,
			toConnection goprotoextra.ToConnectionFunc,
			data proto1.Message) (goprotoextra.IMessageWrapper, error) {
			if msg, ok := data.(*GetEquityAggregatesBarsQueryRequest); ok {
				return NewGetEquityAggregatesBarsQueryRequestWrapper(
					cancelCtx,
					cancelFunc,
					toReactor,
					toConnection,
					msg), nil
			}
			return nil, goerrors.InvalidParam
		}})

//true
//true
//false
//false
type GetEquityAggregatesBarsResponseWrapper struct {
	goprotoextra.BaseMessageWrapper
	Data *GetEquityAggregatesBarsResponse
}

func (self *GetEquityAggregatesBarsResponseWrapper) Message() interface{} {
	return self.Data
}

func (self *GetEquityAggregatesBarsResponseWrapper) messageWrapper() interface{} {
	return self
}

func NewGetEquityAggregatesBarsResponseWrapper(
	cancelCtx context.Context,
	cancelFunc context.CancelFunc,
	toReactor goprotoextra.ToReactorFunc,
	toConnection goprotoextra.ToConnectionFunc,
	data *GetEquityAggregatesBarsResponse) *GetEquityAggregatesBarsResponseWrapper {
	return &GetEquityAggregatesBarsResponseWrapper{
		BaseMessageWrapper: goprotoextra.NewBaseMessageWrapper(
			cancelCtx,
			cancelFunc,
			toReactor,
			toConnection),
		Data: data,
	}
}

var _ = stream.Register(
	GetEquityAggregatesBarsResponseTypeCode,
	stream.TypeCodeData{
		CreateMessage: func() proto1.Message {
			return &GetEquityAggregatesBarsResponse{}
		},
		CreateWrapper: func(
			cancelCtx context.Context,
			cancelFunc context.CancelFunc,
			toReactor goprotoextra.ToReactorFunc,
			toConnection goprotoextra.ToConnectionFunc,
			data proto1.Message) (goprotoextra.IMessageWrapper, error) {
			if msg, ok := data.(*GetEquityAggregatesBarsResponse); ok {
				return NewGetEquityAggregatesBarsResponseWrapper(
					cancelCtx,
					cancelFunc,
					toReactor,
					toConnection,
					msg), nil
			}
			return nil, goerrors.InvalidParam
		}})

//true
//true
//false
//false
type GetEquityGroupedDailyBarsQueryRequestWrapper struct {
	goprotoextra.BaseMessageWrapper
	Data *GetEquityGroupedDailyBarsQueryRequest
}

func (self *GetEquityGroupedDailyBarsQueryRequestWrapper) Message() interface{} {
	return self.Data
}

func (self *GetEquityGroupedDailyBarsQueryRequestWrapper) messageWrapper() interface{} {
	return self
}

func NewGetEquityGroupedDailyBarsQueryRequestWrapper(
	cancelCtx context.Context,
	cancelFunc context.CancelFunc,
	toReactor goprotoextra.ToReactorFunc,
	toConnection goprotoextra.ToConnectionFunc,
	data *GetEquityGroupedDailyBarsQueryRequest) *GetEquityGroupedDailyBarsQueryRequestWrapper {
	return &GetEquityGroupedDailyBarsQueryRequestWrapper{
		BaseMessageWrapper: goprotoextra.NewBaseMessageWrapper(
			cancelCtx,
			cancelFunc,
			toReactor,
			toConnection),
		Data: data,
	}
}

var _ = stream.Register(
	GetEquityGroupedDailyBarsQueryRequestTypeCode,
	stream.TypeCodeData{
		CreateMessage: func() proto1.Message {
			return &GetEquityGroupedDailyBarsQueryRequest{}
		},
		CreateWrapper: func(
			cancelCtx context.Context,
			cancelFunc context.CancelFunc,
			toReactor goprotoextra.ToReactorFunc,
			toConnection goprotoextra.ToConnectionFunc,
			data proto1.Message) (goprotoextra.IMessageWrapper, error) {
			if msg, ok := data.(*GetEquityGroupedDailyBarsQueryRequest); ok {
				return NewGetEquityGroupedDailyBarsQueryRequestWrapper(
					cancelCtx,
					cancelFunc,
					toReactor,
					toConnection,
					msg), nil
			}
			return nil, goerrors.InvalidParam
		}})

//true
//true
//false
//false
type GetEquityGroupedDailyBarsResponseWrapper struct {
	goprotoextra.BaseMessageWrapper
	Data *GetEquityGroupedDailyBarsResponse
}

func (self *GetEquityGroupedDailyBarsResponseWrapper) Message() interface{} {
	return self.Data
}

func (self *GetEquityGroupedDailyBarsResponseWrapper) messageWrapper() interface{} {
	return self
}

func NewGetEquityGroupedDailyBarsResponseWrapper(
	cancelCtx context.Context,
	cancelFunc context.CancelFunc,
	toReactor goprotoextra.ToReactorFunc,
	toConnection goprotoextra.ToConnectionFunc,
	data *GetEquityGroupedDailyBarsResponse) *GetEquityGroupedDailyBarsResponseWrapper {
	return &GetEquityGroupedDailyBarsResponseWrapper{
		BaseMessageWrapper: goprotoextra.NewBaseMessageWrapper(
			cancelCtx,
			cancelFunc,
			toReactor,
			toConnection),
		Data: data,
	}
}

var _ = stream.Register(
	GetEquityGroupedDailyBarsResponseTypeCode,
	stream.TypeCodeData{
		CreateMessage: func() proto1.Message {
			return &GetEquityGroupedDailyBarsResponse{}
		},
		CreateWrapper: func(
			cancelCtx context.Context,
			cancelFunc context.CancelFunc,
			toReactor goprotoextra.ToReactorFunc,
			toConnection goprotoextra.ToConnectionFunc,
			data proto1.Message) (goprotoextra.IMessageWrapper, error) {
			if msg, ok := data.(*GetEquityGroupedDailyBarsResponse); ok {
				return NewGetEquityGroupedDailyBarsResponseWrapper(
					cancelCtx,
					cancelFunc,
					toReactor,
					toConnection,
					msg), nil
			}
			return nil, goerrors.InvalidParam
		}})

//true
//true
//false
//false
type GetEquityHistoricTradesQueryRequestWrapper struct {
	goprotoextra.BaseMessageWrapper
	Data *GetEquityHistoricTradesQueryRequest
}

func (self *GetEquityHistoricTradesQueryRequestWrapper) Message() interface{} {
	return self.Data
}

func (self *GetEquityHistoricTradesQueryRequestWrapper) messageWrapper() interface{} {
	return self
}

func NewGetEquityHistoricTradesQueryRequestWrapper(
	cancelCtx context.Context,
	cancelFunc context.CancelFunc,
	toReactor goprotoextra.ToReactorFunc,
	toConnection goprotoextra.ToConnectionFunc,
	data *GetEquityHistoricTradesQueryRequest) *GetEquityHistoricTradesQueryRequestWrapper {
	return &GetEquityHistoricTradesQueryRequestWrapper{
		BaseMessageWrapper: goprotoextra.NewBaseMessageWrapper(
			cancelCtx,
			cancelFunc,
			toReactor,
			toConnection),
		Data: data,
	}
}

var _ = stream.Register(
	GetEquityHistoricTradesQueryRequestTypeCode,
	stream.TypeCodeData{
		CreateMessage: func() proto1.Message {
			return &GetEquityHistoricTradesQueryRequest{}
		},
		CreateWrapper: func(
			cancelCtx context.Context,
			cancelFunc context.CancelFunc,
			toReactor goprotoextra.ToReactorFunc,
			toConnection goprotoextra.ToConnectionFunc,
			data proto1.Message) (goprotoextra.IMessageWrapper, error) {
			if msg, ok := data.(*GetEquityHistoricTradesQueryRequest); ok {
				return NewGetEquityHistoricTradesQueryRequestWrapper(
					cancelCtx,
					cancelFunc,
					toReactor,
					toConnection,
					msg), nil
			}
			return nil, goerrors.InvalidParam
		}})

//true
//true
//false
//false
type GetEquityHistoricTradesResponseWrapper struct {
	goprotoextra.BaseMessageWrapper
	Data *GetEquityHistoricTradesResponse
}

func (self *GetEquityHistoricTradesResponseWrapper) Message() interface{} {
	return self.Data
}

func (self *GetEquityHistoricTradesResponseWrapper) messageWrapper() interface{} {
	return self
}

func NewGetEquityHistoricTradesResponseWrapper(
	cancelCtx context.Context,
	cancelFunc context.CancelFunc,
	toReactor goprotoextra.ToReactorFunc,
	toConnection goprotoextra.ToConnectionFunc,
	data *GetEquityHistoricTradesResponse) *GetEquityHistoricTradesResponseWrapper {
	return &GetEquityHistoricTradesResponseWrapper{
		BaseMessageWrapper: goprotoextra.NewBaseMessageWrapper(
			cancelCtx,
			cancelFunc,
			toReactor,
			toConnection),
		Data: data,
	}
}

var _ = stream.Register(
	GetEquityHistoricTradesResponseTypeCode,
	stream.TypeCodeData{
		CreateMessage: func() proto1.Message {
			return &GetEquityHistoricTradesResponse{}
		},
		CreateWrapper: func(
			cancelCtx context.Context,
			cancelFunc context.CancelFunc,
			toReactor goprotoextra.ToReactorFunc,
			toConnection goprotoextra.ToConnectionFunc,
			data proto1.Message) (goprotoextra.IMessageWrapper, error) {
			if msg, ok := data.(*GetEquityHistoricTradesResponse); ok {
				return NewGetEquityHistoricTradesResponseWrapper(
					cancelCtx,
					cancelFunc,
					toReactor,
					toConnection,
					msg), nil
			}
			return nil, goerrors.InvalidParam
		}})

//true
//true
//false
//false
type GetEquityHistoricQuotesNBBOQueryRequestWrapper struct {
	goprotoextra.BaseMessageWrapper
	Data *GetEquityHistoricQuotesNBBOQueryRequest
}

func (self *GetEquityHistoricQuotesNBBOQueryRequestWrapper) Message() interface{} {
	return self.Data
}

func (self *GetEquityHistoricQuotesNBBOQueryRequestWrapper) messageWrapper() interface{} {
	return self
}

func NewGetEquityHistoricQuotesNBBOQueryRequestWrapper(
	cancelCtx context.Context,
	cancelFunc context.CancelFunc,
	toReactor goprotoextra.ToReactorFunc,
	toConnection goprotoextra.ToConnectionFunc,
	data *GetEquityHistoricQuotesNBBOQueryRequest) *GetEquityHistoricQuotesNBBOQueryRequestWrapper {
	return &GetEquityHistoricQuotesNBBOQueryRequestWrapper{
		BaseMessageWrapper: goprotoextra.NewBaseMessageWrapper(
			cancelCtx,
			cancelFunc,
			toReactor,
			toConnection),
		Data: data,
	}
}

var _ = stream.Register(
	GetEquityHistoricQuotesNBBOQueryRequestTypeCode,
	stream.TypeCodeData{
		CreateMessage: func() proto1.Message {
			return &GetEquityHistoricQuotesNBBOQueryRequest{}
		},
		CreateWrapper: func(
			cancelCtx context.Context,
			cancelFunc context.CancelFunc,
			toReactor goprotoextra.ToReactorFunc,
			toConnection goprotoextra.ToConnectionFunc,
			data proto1.Message) (goprotoextra.IMessageWrapper, error) {
			if msg, ok := data.(*GetEquityHistoricQuotesNBBOQueryRequest); ok {
				return NewGetEquityHistoricQuotesNBBOQueryRequestWrapper(
					cancelCtx,
					cancelFunc,
					toReactor,
					toConnection,
					msg), nil
			}
			return nil, goerrors.InvalidParam
		}})

//true
//true
//false
//false
type GetEquityHistoricQuotesNBBOResponseWrapper struct {
	goprotoextra.BaseMessageWrapper
	Data *GetEquityHistoricQuotesNBBOResponse
}

func (self *GetEquityHistoricQuotesNBBOResponseWrapper) Message() interface{} {
	return self.Data
}

func (self *GetEquityHistoricQuotesNBBOResponseWrapper) messageWrapper() interface{} {
	return self
}

func NewGetEquityHistoricQuotesNBBOResponseWrapper(
	cancelCtx context.Context,
	cancelFunc context.CancelFunc,
	toReactor goprotoextra.ToReactorFunc,
	toConnection goprotoextra.ToConnectionFunc,
	data *GetEquityHistoricQuotesNBBOResponse) *GetEquityHistoricQuotesNBBOResponseWrapper {
	return &GetEquityHistoricQuotesNBBOResponseWrapper{
		BaseMessageWrapper: goprotoextra.NewBaseMessageWrapper(
			cancelCtx,
			cancelFunc,
			toReactor,
			toConnection),
		Data: data,
	}
}

var _ = stream.Register(
	GetEquityHistoricQuotesNBBOResponseTypeCode,
	stream.TypeCodeData{
		CreateMessage: func() proto1.Message {
			return &GetEquityHistoricQuotesNBBOResponse{}
		},
		CreateWrapper: func(
			cancelCtx context.Context,
			cancelFunc context.CancelFunc,
			toReactor goprotoextra.ToReactorFunc,
			toConnection goprotoextra.ToConnectionFunc,
			data proto1.Message) (goprotoextra.IMessageWrapper, error) {
			if msg, ok := data.(*GetEquityHistoricQuotesNBBOResponse); ok {
				return NewGetEquityHistoricQuotesNBBOResponseWrapper(
					cancelCtx,
					cancelFunc,
					toReactor,
					toConnection,
					msg), nil
			}
			return nil, goerrors.InvalidParam
		}})

//true
//true
//false
//false
type GetEquityLastTradeForSymbolQueryRequestWrapper struct {
	goprotoextra.BaseMessageWrapper
	Data *GetEquityLastTradeForSymbolQueryRequest
}

func (self *GetEquityLastTradeForSymbolQueryRequestWrapper) Message() interface{} {
	return self.Data
}

func (self *GetEquityLastTradeForSymbolQueryRequestWrapper) messageWrapper() interface{} {
	return self
}

func NewGetEquityLastTradeForSymbolQueryRequestWrapper(
	cancelCtx context.Context,
	cancelFunc context.CancelFunc,
	toReactor goprotoextra.ToReactorFunc,
	toConnection goprotoextra.ToConnectionFunc,
	data *GetEquityLastTradeForSymbolQueryRequest) *GetEquityLastTradeForSymbolQueryRequestWrapper {
	return &GetEquityLastTradeForSymbolQueryRequestWrapper{
		BaseMessageWrapper: goprotoextra.NewBaseMessageWrapper(
			cancelCtx,
			cancelFunc,
			toReactor,
			toConnection),
		Data: data,
	}
}

var _ = stream.Register(
	GetEquityLastTradeForSymbolQueryRequestTypeCode,
	stream.TypeCodeData{
		CreateMessage: func() proto1.Message {
			return &GetEquityLastTradeForSymbolQueryRequest{}
		},
		CreateWrapper: func(
			cancelCtx context.Context,
			cancelFunc context.CancelFunc,
			toReactor goprotoextra.ToReactorFunc,
			toConnection goprotoextra.ToConnectionFunc,
			data proto1.Message) (goprotoextra.IMessageWrapper, error) {
			if msg, ok := data.(*GetEquityLastTradeForSymbolQueryRequest); ok {
				return NewGetEquityLastTradeForSymbolQueryRequestWrapper(
					cancelCtx,
					cancelFunc,
					toReactor,
					toConnection,
					msg), nil
			}
			return nil, goerrors.InvalidParam
		}})

//true
//true
//false
//false
type GetEquityLastTradeForSymbolResponseWrapper struct {
	goprotoextra.BaseMessageWrapper
	Data *GetEquityLastTradeForSymbolResponse
}

func (self *GetEquityLastTradeForSymbolResponseWrapper) Message() interface{} {
	return self.Data
}

func (self *GetEquityLastTradeForSymbolResponseWrapper) messageWrapper() interface{} {
	return self
}

func NewGetEquityLastTradeForSymbolResponseWrapper(
	cancelCtx context.Context,
	cancelFunc context.CancelFunc,
	toReactor goprotoextra.ToReactorFunc,
	toConnection goprotoextra.ToConnectionFunc,
	data *GetEquityLastTradeForSymbolResponse) *GetEquityLastTradeForSymbolResponseWrapper {
	return &GetEquityLastTradeForSymbolResponseWrapper{
		BaseMessageWrapper: goprotoextra.NewBaseMessageWrapper(
			cancelCtx,
			cancelFunc,
			toReactor,
			toConnection),
		Data: data,
	}
}

var _ = stream.Register(
	GetEquityLastTradeForSymbolResponseTypeCode,
	stream.TypeCodeData{
		CreateMessage: func() proto1.Message {
			return &GetEquityLastTradeForSymbolResponse{}
		},
		CreateWrapper: func(
			cancelCtx context.Context,
			cancelFunc context.CancelFunc,
			toReactor goprotoextra.ToReactorFunc,
			toConnection goprotoextra.ToConnectionFunc,
			data proto1.Message) (goprotoextra.IMessageWrapper, error) {
			if msg, ok := data.(*GetEquityLastTradeForSymbolResponse); ok {
				return NewGetEquityLastTradeForSymbolResponseWrapper(
					cancelCtx,
					cancelFunc,
					toReactor,
					toConnection,
					msg), nil
			}
			return nil, goerrors.InvalidParam
		}})

//true
//true
//false
//false
type GetEquityLastQuoteForSymbolQueryRequestWrapper struct {
	goprotoextra.BaseMessageWrapper
	Data *GetEquityLastQuoteForSymbolQueryRequest
}

func (self *GetEquityLastQuoteForSymbolQueryRequestWrapper) Message() interface{} {
	return self.Data
}

func (self *GetEquityLastQuoteForSymbolQueryRequestWrapper) messageWrapper() interface{} {
	return self
}

func NewGetEquityLastQuoteForSymbolQueryRequestWrapper(
	cancelCtx context.Context,
	cancelFunc context.CancelFunc,
	toReactor goprotoextra.ToReactorFunc,
	toConnection goprotoextra.ToConnectionFunc,
	data *GetEquityLastQuoteForSymbolQueryRequest) *GetEquityLastQuoteForSymbolQueryRequestWrapper {
	return &GetEquityLastQuoteForSymbolQueryRequestWrapper{
		BaseMessageWrapper: goprotoextra.NewBaseMessageWrapper(
			cancelCtx,
			cancelFunc,
			toReactor,
			toConnection),
		Data: data,
	}
}

var _ = stream.Register(
	GetEquityLastQuoteForSymbolQueryRequestTypeCode,
	stream.TypeCodeData{
		CreateMessage: func() proto1.Message {
			return &GetEquityLastQuoteForSymbolQueryRequest{}
		},
		CreateWrapper: func(
			cancelCtx context.Context,
			cancelFunc context.CancelFunc,
			toReactor goprotoextra.ToReactorFunc,
			toConnection goprotoextra.ToConnectionFunc,
			data proto1.Message) (goprotoextra.IMessageWrapper, error) {
			if msg, ok := data.(*GetEquityLastQuoteForSymbolQueryRequest); ok {
				return NewGetEquityLastQuoteForSymbolQueryRequestWrapper(
					cancelCtx,
					cancelFunc,
					toReactor,
					toConnection,
					msg), nil
			}
			return nil, goerrors.InvalidParam
		}})

//true
//true
//false
//false
type GetEquityLastQuoteForSymbolResponseWrapper struct {
	goprotoextra.BaseMessageWrapper
	Data *GetEquityLastQuoteForSymbolResponse
}

func (self *GetEquityLastQuoteForSymbolResponseWrapper) Message() interface{} {
	return self.Data
}

func (self *GetEquityLastQuoteForSymbolResponseWrapper) messageWrapper() interface{} {
	return self
}

func NewGetEquityLastQuoteForSymbolResponseWrapper(
	cancelCtx context.Context,
	cancelFunc context.CancelFunc,
	toReactor goprotoextra.ToReactorFunc,
	toConnection goprotoextra.ToConnectionFunc,
	data *GetEquityLastQuoteForSymbolResponse) *GetEquityLastQuoteForSymbolResponseWrapper {
	return &GetEquityLastQuoteForSymbolResponseWrapper{
		BaseMessageWrapper: goprotoextra.NewBaseMessageWrapper(
			cancelCtx,
			cancelFunc,
			toReactor,
			toConnection),
		Data: data,
	}
}

var _ = stream.Register(
	GetEquityLastQuoteForSymbolResponseTypeCode,
	stream.TypeCodeData{
		CreateMessage: func() proto1.Message {
			return &GetEquityLastQuoteForSymbolResponse{}
		},
		CreateWrapper: func(
			cancelCtx context.Context,
			cancelFunc context.CancelFunc,
			toReactor goprotoextra.ToReactorFunc,
			toConnection goprotoextra.ToConnectionFunc,
			data proto1.Message) (goprotoextra.IMessageWrapper, error) {
			if msg, ok := data.(*GetEquityLastQuoteForSymbolResponse); ok {
				return NewGetEquityLastQuoteForSymbolResponseWrapper(
					cancelCtx,
					cancelFunc,
					toReactor,
					toConnection,
					msg), nil
			}
			return nil, goerrors.InvalidParam
		}})

//true
//true
//false
//false
type GetEquityDailyOpenCloseQueryRequestWrapper struct {
	goprotoextra.BaseMessageWrapper
	Data *GetEquityDailyOpenCloseQueryRequest
}

func (self *GetEquityDailyOpenCloseQueryRequestWrapper) Message() interface{} {
	return self.Data
}

func (self *GetEquityDailyOpenCloseQueryRequestWrapper) messageWrapper() interface{} {
	return self
}

func NewGetEquityDailyOpenCloseQueryRequestWrapper(
	cancelCtx context.Context,
	cancelFunc context.CancelFunc,
	toReactor goprotoextra.ToReactorFunc,
	toConnection goprotoextra.ToConnectionFunc,
	data *GetEquityDailyOpenCloseQueryRequest) *GetEquityDailyOpenCloseQueryRequestWrapper {
	return &GetEquityDailyOpenCloseQueryRequestWrapper{
		BaseMessageWrapper: goprotoextra.NewBaseMessageWrapper(
			cancelCtx,
			cancelFunc,
			toReactor,
			toConnection),
		Data: data,
	}
}

var _ = stream.Register(
	GetEquityDailyOpenCloseQueryRequestTypeCode,
	stream.TypeCodeData{
		CreateMessage: func() proto1.Message {
			return &GetEquityDailyOpenCloseQueryRequest{}
		},
		CreateWrapper: func(
			cancelCtx context.Context,
			cancelFunc context.CancelFunc,
			toReactor goprotoextra.ToReactorFunc,
			toConnection goprotoextra.ToConnectionFunc,
			data proto1.Message) (goprotoextra.IMessageWrapper, error) {
			if msg, ok := data.(*GetEquityDailyOpenCloseQueryRequest); ok {
				return NewGetEquityDailyOpenCloseQueryRequestWrapper(
					cancelCtx,
					cancelFunc,
					toReactor,
					toConnection,
					msg), nil
			}
			return nil, goerrors.InvalidParam
		}})

//true
//true
//false
//false
type GetEquityDailyOpenCloseResponseWrapper struct {
	goprotoextra.BaseMessageWrapper
	Data *GetEquityDailyOpenCloseResponse
}

func (self *GetEquityDailyOpenCloseResponseWrapper) Message() interface{} {
	return self.Data
}

func (self *GetEquityDailyOpenCloseResponseWrapper) messageWrapper() interface{} {
	return self
}

func NewGetEquityDailyOpenCloseResponseWrapper(
	cancelCtx context.Context,
	cancelFunc context.CancelFunc,
	toReactor goprotoextra.ToReactorFunc,
	toConnection goprotoextra.ToConnectionFunc,
	data *GetEquityDailyOpenCloseResponse) *GetEquityDailyOpenCloseResponseWrapper {
	return &GetEquityDailyOpenCloseResponseWrapper{
		BaseMessageWrapper: goprotoextra.NewBaseMessageWrapper(
			cancelCtx,
			cancelFunc,
			toReactor,
			toConnection),
		Data: data,
	}
}

var _ = stream.Register(
	GetEquityDailyOpenCloseResponseTypeCode,
	stream.TypeCodeData{
		CreateMessage: func() proto1.Message {
			return &GetEquityDailyOpenCloseResponse{}
		},
		CreateWrapper: func(
			cancelCtx context.Context,
			cancelFunc context.CancelFunc,
			toReactor goprotoextra.ToReactorFunc,
			toConnection goprotoextra.ToConnectionFunc,
			data proto1.Message) (goprotoextra.IMessageWrapper, error) {
			if msg, ok := data.(*GetEquityDailyOpenCloseResponse); ok {
				return NewGetEquityDailyOpenCloseResponseWrapper(
					cancelCtx,
					cancelFunc,
					toReactor,
					toConnection,
					msg), nil
			}
			return nil, goerrors.InvalidParam
		}})

//true
//true
//false
//false
type GetEquityConditionMappingsQueryRequestWrapper struct {
	goprotoextra.BaseMessageWrapper
	Data *GetEquityConditionMappingsQueryRequest
}

func (self *GetEquityConditionMappingsQueryRequestWrapper) Message() interface{} {
	return self.Data
}

func (self *GetEquityConditionMappingsQueryRequestWrapper) messageWrapper() interface{} {
	return self
}

func NewGetEquityConditionMappingsQueryRequestWrapper(
	cancelCtx context.Context,
	cancelFunc context.CancelFunc,
	toReactor goprotoextra.ToReactorFunc,
	toConnection goprotoextra.ToConnectionFunc,
	data *GetEquityConditionMappingsQueryRequest) *GetEquityConditionMappingsQueryRequestWrapper {
	return &GetEquityConditionMappingsQueryRequestWrapper{
		BaseMessageWrapper: goprotoextra.NewBaseMessageWrapper(
			cancelCtx,
			cancelFunc,
			toReactor,
			toConnection),
		Data: data,
	}
}

var _ = stream.Register(
	GetEquityConditionMappingsQueryRequestTypeCode,
	stream.TypeCodeData{
		CreateMessage: func() proto1.Message {
			return &GetEquityConditionMappingsQueryRequest{}
		},
		CreateWrapper: func(
			cancelCtx context.Context,
			cancelFunc context.CancelFunc,
			toReactor goprotoextra.ToReactorFunc,
			toConnection goprotoextra.ToConnectionFunc,
			data proto1.Message) (goprotoextra.IMessageWrapper, error) {
			if msg, ok := data.(*GetEquityConditionMappingsQueryRequest); ok {
				return NewGetEquityConditionMappingsQueryRequestWrapper(
					cancelCtx,
					cancelFunc,
					toReactor,
					toConnection,
					msg), nil
			}
			return nil, goerrors.InvalidParam
		}})

//true
//true
//false
//false
type GetEquityConditionMappingsResponseWrapper struct {
	goprotoextra.BaseMessageWrapper
	Data *GetEquityConditionMappingsResponse
}

func (self *GetEquityConditionMappingsResponseWrapper) Message() interface{} {
	return self.Data
}

func (self *GetEquityConditionMappingsResponseWrapper) messageWrapper() interface{} {
	return self
}

func NewGetEquityConditionMappingsResponseWrapper(
	cancelCtx context.Context,
	cancelFunc context.CancelFunc,
	toReactor goprotoextra.ToReactorFunc,
	toConnection goprotoextra.ToConnectionFunc,
	data *GetEquityConditionMappingsResponse) *GetEquityConditionMappingsResponseWrapper {
	return &GetEquityConditionMappingsResponseWrapper{
		BaseMessageWrapper: goprotoextra.NewBaseMessageWrapper(
			cancelCtx,
			cancelFunc,
			toReactor,
			toConnection),
		Data: data,
	}
}

var _ = stream.Register(
	GetEquityConditionMappingsResponseTypeCode,
	stream.TypeCodeData{
		CreateMessage: func() proto1.Message {
			return &GetEquityConditionMappingsResponse{}
		},
		CreateWrapper: func(
			cancelCtx context.Context,
			cancelFunc context.CancelFunc,
			toReactor goprotoextra.ToReactorFunc,
			toConnection goprotoextra.ToConnectionFunc,
			data proto1.Message) (goprotoextra.IMessageWrapper, error) {
			if msg, ok := data.(*GetEquityConditionMappingsResponse); ok {
				return NewGetEquityConditionMappingsResponseWrapper(
					cancelCtx,
					cancelFunc,
					toReactor,
					toConnection,
					msg), nil
			}
			return nil, goerrors.InvalidParam
		}})

//true
//true
//false
//false
type GetEquitySnapshotAllTickersQueryRequestWrapper struct {
	goprotoextra.BaseMessageWrapper
	Data *GetEquitySnapshotAllTickersQueryRequest
}

func (self *GetEquitySnapshotAllTickersQueryRequestWrapper) Message() interface{} {
	return self.Data
}

func (self *GetEquitySnapshotAllTickersQueryRequestWrapper) messageWrapper() interface{} {
	return self
}

func NewGetEquitySnapshotAllTickersQueryRequestWrapper(
	cancelCtx context.Context,
	cancelFunc context.CancelFunc,
	toReactor goprotoextra.ToReactorFunc,
	toConnection goprotoextra.ToConnectionFunc,
	data *GetEquitySnapshotAllTickersQueryRequest) *GetEquitySnapshotAllTickersQueryRequestWrapper {
	return &GetEquitySnapshotAllTickersQueryRequestWrapper{
		BaseMessageWrapper: goprotoextra.NewBaseMessageWrapper(
			cancelCtx,
			cancelFunc,
			toReactor,
			toConnection),
		Data: data,
	}
}

var _ = stream.Register(
	GetEquitySnapshotAllTickersQueryRequestTypeCode,
	stream.TypeCodeData{
		CreateMessage: func() proto1.Message {
			return &GetEquitySnapshotAllTickersQueryRequest{}
		},
		CreateWrapper: func(
			cancelCtx context.Context,
			cancelFunc context.CancelFunc,
			toReactor goprotoextra.ToReactorFunc,
			toConnection goprotoextra.ToConnectionFunc,
			data proto1.Message) (goprotoextra.IMessageWrapper, error) {
			if msg, ok := data.(*GetEquitySnapshotAllTickersQueryRequest); ok {
				return NewGetEquitySnapshotAllTickersQueryRequestWrapper(
					cancelCtx,
					cancelFunc,
					toReactor,
					toConnection,
					msg), nil
			}
			return nil, goerrors.InvalidParam
		}})

//true
//true
//false
//false
type GetEquitySnapshotAllTickersResponseWrapper struct {
	goprotoextra.BaseMessageWrapper
	Data *GetEquitySnapshotAllTickersResponse
}

func (self *GetEquitySnapshotAllTickersResponseWrapper) Message() interface{} {
	return self.Data
}

func (self *GetEquitySnapshotAllTickersResponseWrapper) messageWrapper() interface{} {
	return self
}

func NewGetEquitySnapshotAllTickersResponseWrapper(
	cancelCtx context.Context,
	cancelFunc context.CancelFunc,
	toReactor goprotoextra.ToReactorFunc,
	toConnection goprotoextra.ToConnectionFunc,
	data *GetEquitySnapshotAllTickersResponse) *GetEquitySnapshotAllTickersResponseWrapper {
	return &GetEquitySnapshotAllTickersResponseWrapper{
		BaseMessageWrapper: goprotoextra.NewBaseMessageWrapper(
			cancelCtx,
			cancelFunc,
			toReactor,
			toConnection),
		Data: data,
	}
}

var _ = stream.Register(
	GetEquitySnapshotAllTickersResponseTypeCode,
	stream.TypeCodeData{
		CreateMessage: func() proto1.Message {
			return &GetEquitySnapshotAllTickersResponse{}
		},
		CreateWrapper: func(
			cancelCtx context.Context,
			cancelFunc context.CancelFunc,
			toReactor goprotoextra.ToReactorFunc,
			toConnection goprotoextra.ToConnectionFunc,
			data proto1.Message) (goprotoextra.IMessageWrapper, error) {
			if msg, ok := data.(*GetEquitySnapshotAllTickersResponse); ok {
				return NewGetEquitySnapshotAllTickersResponseWrapper(
					cancelCtx,
					cancelFunc,
					toReactor,
					toConnection,
					msg), nil
			}
			return nil, goerrors.InvalidParam
		}})

//true
//true
//false
//false
type GetEquitySnapshotSingleTickerQueryRequestWrapper struct {
	goprotoextra.BaseMessageWrapper
	Data *GetEquitySnapshotSingleTickerQueryRequest
}

func (self *GetEquitySnapshotSingleTickerQueryRequestWrapper) Message() interface{} {
	return self.Data
}

func (self *GetEquitySnapshotSingleTickerQueryRequestWrapper) messageWrapper() interface{} {
	return self
}

func NewGetEquitySnapshotSingleTickerQueryRequestWrapper(
	cancelCtx context.Context,
	cancelFunc context.CancelFunc,
	toReactor goprotoextra.ToReactorFunc,
	toConnection goprotoextra.ToConnectionFunc,
	data *GetEquitySnapshotSingleTickerQueryRequest) *GetEquitySnapshotSingleTickerQueryRequestWrapper {
	return &GetEquitySnapshotSingleTickerQueryRequestWrapper{
		BaseMessageWrapper: goprotoextra.NewBaseMessageWrapper(
			cancelCtx,
			cancelFunc,
			toReactor,
			toConnection),
		Data: data,
	}
}

var _ = stream.Register(
	GetEquitySnapshotSingleTickerQueryRequestTypeCode,
	stream.TypeCodeData{
		CreateMessage: func() proto1.Message {
			return &GetEquitySnapshotSingleTickerQueryRequest{}
		},
		CreateWrapper: func(
			cancelCtx context.Context,
			cancelFunc context.CancelFunc,
			toReactor goprotoextra.ToReactorFunc,
			toConnection goprotoextra.ToConnectionFunc,
			data proto1.Message) (goprotoextra.IMessageWrapper, error) {
			if msg, ok := data.(*GetEquitySnapshotSingleTickerQueryRequest); ok {
				return NewGetEquitySnapshotSingleTickerQueryRequestWrapper(
					cancelCtx,
					cancelFunc,
					toReactor,
					toConnection,
					msg), nil
			}
			return nil, goerrors.InvalidParam
		}})

//true
//true
//false
//false
type GetEquitySnapshotSingleTickerResponseWrapper struct {
	goprotoextra.BaseMessageWrapper
	Data *GetEquitySnapshotSingleTickerResponse
}

func (self *GetEquitySnapshotSingleTickerResponseWrapper) Message() interface{} {
	return self.Data
}

func (self *GetEquitySnapshotSingleTickerResponseWrapper) messageWrapper() interface{} {
	return self
}

func NewGetEquitySnapshotSingleTickerResponseWrapper(
	cancelCtx context.Context,
	cancelFunc context.CancelFunc,
	toReactor goprotoextra.ToReactorFunc,
	toConnection goprotoextra.ToConnectionFunc,
	data *GetEquitySnapshotSingleTickerResponse) *GetEquitySnapshotSingleTickerResponseWrapper {
	return &GetEquitySnapshotSingleTickerResponseWrapper{
		BaseMessageWrapper: goprotoextra.NewBaseMessageWrapper(
			cancelCtx,
			cancelFunc,
			toReactor,
			toConnection),
		Data: data,
	}
}

var _ = stream.Register(
	GetEquitySnapshotSingleTickerResponseTypeCode,
	stream.TypeCodeData{
		CreateMessage: func() proto1.Message {
			return &GetEquitySnapshotSingleTickerResponse{}
		},
		CreateWrapper: func(
			cancelCtx context.Context,
			cancelFunc context.CancelFunc,
			toReactor goprotoextra.ToReactorFunc,
			toConnection goprotoextra.ToConnectionFunc,
			data proto1.Message) (goprotoextra.IMessageWrapper, error) {
			if msg, ok := data.(*GetEquitySnapshotSingleTickerResponse); ok {
				return NewGetEquitySnapshotSingleTickerResponseWrapper(
					cancelCtx,
					cancelFunc,
					toReactor,
					toConnection,
					msg), nil
			}
			return nil, goerrors.InvalidParam
		}})

//true
//true
//false
//false
type GetEquitySnapshotGainersLosersQueryRequestWrapper struct {
	goprotoextra.BaseMessageWrapper
	Data *GetEquitySnapshotGainersLosersQueryRequest
}

func (self *GetEquitySnapshotGainersLosersQueryRequestWrapper) Message() interface{} {
	return self.Data
}

func (self *GetEquitySnapshotGainersLosersQueryRequestWrapper) messageWrapper() interface{} {
	return self
}

func NewGetEquitySnapshotGainersLosersQueryRequestWrapper(
	cancelCtx context.Context,
	cancelFunc context.CancelFunc,
	toReactor goprotoextra.ToReactorFunc,
	toConnection goprotoextra.ToConnectionFunc,
	data *GetEquitySnapshotGainersLosersQueryRequest) *GetEquitySnapshotGainersLosersQueryRequestWrapper {
	return &GetEquitySnapshotGainersLosersQueryRequestWrapper{
		BaseMessageWrapper: goprotoextra.NewBaseMessageWrapper(
			cancelCtx,
			cancelFunc,
			toReactor,
			toConnection),
		Data: data,
	}
}

var _ = stream.Register(
	GetEquitySnapshotGainersLosersQueryRequestTypeCode,
	stream.TypeCodeData{
		CreateMessage: func() proto1.Message {
			return &GetEquitySnapshotGainersLosersQueryRequest{}
		},
		CreateWrapper: func(
			cancelCtx context.Context,
			cancelFunc context.CancelFunc,
			toReactor goprotoextra.ToReactorFunc,
			toConnection goprotoextra.ToConnectionFunc,
			data proto1.Message) (goprotoextra.IMessageWrapper, error) {
			if msg, ok := data.(*GetEquitySnapshotGainersLosersQueryRequest); ok {
				return NewGetEquitySnapshotGainersLosersQueryRequestWrapper(
					cancelCtx,
					cancelFunc,
					toReactor,
					toConnection,
					msg), nil
			}
			return nil, goerrors.InvalidParam
		}})

//true
//true
//false
//false
type GetEquitySnapshotGainersLosersResponseWrapper struct {
	goprotoextra.BaseMessageWrapper
	Data *GetEquitySnapshotGainersLosersResponse
}

func (self *GetEquitySnapshotGainersLosersResponseWrapper) Message() interface{} {
	return self.Data
}

func (self *GetEquitySnapshotGainersLosersResponseWrapper) messageWrapper() interface{} {
	return self
}

func NewGetEquitySnapshotGainersLosersResponseWrapper(
	cancelCtx context.Context,
	cancelFunc context.CancelFunc,
	toReactor goprotoextra.ToReactorFunc,
	toConnection goprotoextra.ToConnectionFunc,
	data *GetEquitySnapshotGainersLosersResponse) *GetEquitySnapshotGainersLosersResponseWrapper {
	return &GetEquitySnapshotGainersLosersResponseWrapper{
		BaseMessageWrapper: goprotoextra.NewBaseMessageWrapper(
			cancelCtx,
			cancelFunc,
			toReactor,
			toConnection),
		Data: data,
	}
}

var _ = stream.Register(
	GetEquitySnapshotGainersLosersResponseTypeCode,
	stream.TypeCodeData{
		CreateMessage: func() proto1.Message {
			return &GetEquitySnapshotGainersLosersResponse{}
		},
		CreateWrapper: func(
			cancelCtx context.Context,
			cancelFunc context.CancelFunc,
			toReactor goprotoextra.ToReactorFunc,
			toConnection goprotoextra.ToConnectionFunc,
			data proto1.Message) (goprotoextra.IMessageWrapper, error) {
			if msg, ok := data.(*GetEquitySnapshotGainersLosersResponse); ok {
				return NewGetEquitySnapshotGainersLosersResponseWrapper(
					cancelCtx,
					cancelFunc,
					toReactor,
					toConnection,
					msg), nil
			}
			return nil, goerrors.InvalidParam
		}})

//true
//true
//false
//false
type GetForexPreviousCloseQueryRequestWrapper struct {
	goprotoextra.BaseMessageWrapper
	Data *GetForexPreviousCloseQueryRequest
}

func (self *GetForexPreviousCloseQueryRequestWrapper) Message() interface{} {
	return self.Data
}

func (self *GetForexPreviousCloseQueryRequestWrapper) messageWrapper() interface{} {
	return self
}

func NewGetForexPreviousCloseQueryRequestWrapper(
	cancelCtx context.Context,
	cancelFunc context.CancelFunc,
	toReactor goprotoextra.ToReactorFunc,
	toConnection goprotoextra.ToConnectionFunc,
	data *GetForexPreviousCloseQueryRequest) *GetForexPreviousCloseQueryRequestWrapper {
	return &GetForexPreviousCloseQueryRequestWrapper{
		BaseMessageWrapper: goprotoextra.NewBaseMessageWrapper(
			cancelCtx,
			cancelFunc,
			toReactor,
			toConnection),
		Data: data,
	}
}

var _ = stream.Register(
	GetForexPreviousCloseQueryRequestTypeCode,
	stream.TypeCodeData{
		CreateMessage: func() proto1.Message {
			return &GetForexPreviousCloseQueryRequest{}
		},
		CreateWrapper: func(
			cancelCtx context.Context,
			cancelFunc context.CancelFunc,
			toReactor goprotoextra.ToReactorFunc,
			toConnection goprotoextra.ToConnectionFunc,
			data proto1.Message) (goprotoextra.IMessageWrapper, error) {
			if msg, ok := data.(*GetForexPreviousCloseQueryRequest); ok {
				return NewGetForexPreviousCloseQueryRequestWrapper(
					cancelCtx,
					cancelFunc,
					toReactor,
					toConnection,
					msg), nil
			}
			return nil, goerrors.InvalidParam
		}})

//true
//true
//false
//false
type GetForexPreviousCloseResponseWrapper struct {
	goprotoextra.BaseMessageWrapper
	Data *GetForexPreviousCloseResponse
}

func (self *GetForexPreviousCloseResponseWrapper) Message() interface{} {
	return self.Data
}

func (self *GetForexPreviousCloseResponseWrapper) messageWrapper() interface{} {
	return self
}

func NewGetForexPreviousCloseResponseWrapper(
	cancelCtx context.Context,
	cancelFunc context.CancelFunc,
	toReactor goprotoextra.ToReactorFunc,
	toConnection goprotoextra.ToConnectionFunc,
	data *GetForexPreviousCloseResponse) *GetForexPreviousCloseResponseWrapper {
	return &GetForexPreviousCloseResponseWrapper{
		BaseMessageWrapper: goprotoextra.NewBaseMessageWrapper(
			cancelCtx,
			cancelFunc,
			toReactor,
			toConnection),
		Data: data,
	}
}

var _ = stream.Register(
	GetForexPreviousCloseResponseTypeCode,
	stream.TypeCodeData{
		CreateMessage: func() proto1.Message {
			return &GetForexPreviousCloseResponse{}
		},
		CreateWrapper: func(
			cancelCtx context.Context,
			cancelFunc context.CancelFunc,
			toReactor goprotoextra.ToReactorFunc,
			toConnection goprotoextra.ToConnectionFunc,
			data proto1.Message) (goprotoextra.IMessageWrapper, error) {
			if msg, ok := data.(*GetForexPreviousCloseResponse); ok {
				return NewGetForexPreviousCloseResponseWrapper(
					cancelCtx,
					cancelFunc,
					toReactor,
					toConnection,
					msg), nil
			}
			return nil, goerrors.InvalidParam
		}})

//true
//true
//false
//false
type GetForexAggregatesBarsQueryRequestWrapper struct {
	goprotoextra.BaseMessageWrapper
	Data *GetForexAggregatesBarsQueryRequest
}

func (self *GetForexAggregatesBarsQueryRequestWrapper) Message() interface{} {
	return self.Data
}

func (self *GetForexAggregatesBarsQueryRequestWrapper) messageWrapper() interface{} {
	return self
}

func NewGetForexAggregatesBarsQueryRequestWrapper(
	cancelCtx context.Context,
	cancelFunc context.CancelFunc,
	toReactor goprotoextra.ToReactorFunc,
	toConnection goprotoextra.ToConnectionFunc,
	data *GetForexAggregatesBarsQueryRequest) *GetForexAggregatesBarsQueryRequestWrapper {
	return &GetForexAggregatesBarsQueryRequestWrapper{
		BaseMessageWrapper: goprotoextra.NewBaseMessageWrapper(
			cancelCtx,
			cancelFunc,
			toReactor,
			toConnection),
		Data: data,
	}
}

var _ = stream.Register(
	GetForexAggregatesBarsQueryRequestTypeCode,
	stream.TypeCodeData{
		CreateMessage: func() proto1.Message {
			return &GetForexAggregatesBarsQueryRequest{}
		},
		CreateWrapper: func(
			cancelCtx context.Context,
			cancelFunc context.CancelFunc,
			toReactor goprotoextra.ToReactorFunc,
			toConnection goprotoextra.ToConnectionFunc,
			data proto1.Message) (goprotoextra.IMessageWrapper, error) {
			if msg, ok := data.(*GetForexAggregatesBarsQueryRequest); ok {
				return NewGetForexAggregatesBarsQueryRequestWrapper(
					cancelCtx,
					cancelFunc,
					toReactor,
					toConnection,
					msg), nil
			}
			return nil, goerrors.InvalidParam
		}})

//true
//true
//false
//false
type GetForexAggregatesBarsResponseWrapper struct {
	goprotoextra.BaseMessageWrapper
	Data *GetForexAggregatesBarsResponse
}

func (self *GetForexAggregatesBarsResponseWrapper) Message() interface{} {
	return self.Data
}

func (self *GetForexAggregatesBarsResponseWrapper) messageWrapper() interface{} {
	return self
}

func NewGetForexAggregatesBarsResponseWrapper(
	cancelCtx context.Context,
	cancelFunc context.CancelFunc,
	toReactor goprotoextra.ToReactorFunc,
	toConnection goprotoextra.ToConnectionFunc,
	data *GetForexAggregatesBarsResponse) *GetForexAggregatesBarsResponseWrapper {
	return &GetForexAggregatesBarsResponseWrapper{
		BaseMessageWrapper: goprotoextra.NewBaseMessageWrapper(
			cancelCtx,
			cancelFunc,
			toReactor,
			toConnection),
		Data: data,
	}
}

var _ = stream.Register(
	GetForexAggregatesBarsResponseTypeCode,
	stream.TypeCodeData{
		CreateMessage: func() proto1.Message {
			return &GetForexAggregatesBarsResponse{}
		},
		CreateWrapper: func(
			cancelCtx context.Context,
			cancelFunc context.CancelFunc,
			toReactor goprotoextra.ToReactorFunc,
			toConnection goprotoextra.ToConnectionFunc,
			data proto1.Message) (goprotoextra.IMessageWrapper, error) {
			if msg, ok := data.(*GetForexAggregatesBarsResponse); ok {
				return NewGetForexAggregatesBarsResponseWrapper(
					cancelCtx,
					cancelFunc,
					toReactor,
					toConnection,
					msg), nil
			}
			return nil, goerrors.InvalidParam
		}})

//true
//true
//false
//false
type GetForexGroupedDailyBarsQueryRequestWrapper struct {
	goprotoextra.BaseMessageWrapper
	Data *GetForexGroupedDailyBarsQueryRequest
}

func (self *GetForexGroupedDailyBarsQueryRequestWrapper) Message() interface{} {
	return self.Data
}

func (self *GetForexGroupedDailyBarsQueryRequestWrapper) messageWrapper() interface{} {
	return self
}

func NewGetForexGroupedDailyBarsQueryRequestWrapper(
	cancelCtx context.Context,
	cancelFunc context.CancelFunc,
	toReactor goprotoextra.ToReactorFunc,
	toConnection goprotoextra.ToConnectionFunc,
	data *GetForexGroupedDailyBarsQueryRequest) *GetForexGroupedDailyBarsQueryRequestWrapper {
	return &GetForexGroupedDailyBarsQueryRequestWrapper{
		BaseMessageWrapper: goprotoextra.NewBaseMessageWrapper(
			cancelCtx,
			cancelFunc,
			toReactor,
			toConnection),
		Data: data,
	}
}

var _ = stream.Register(
	GetForexGroupedDailyBarsQueryRequestTypeCode,
	stream.TypeCodeData{
		CreateMessage: func() proto1.Message {
			return &GetForexGroupedDailyBarsQueryRequest{}
		},
		CreateWrapper: func(
			cancelCtx context.Context,
			cancelFunc context.CancelFunc,
			toReactor goprotoextra.ToReactorFunc,
			toConnection goprotoextra.ToConnectionFunc,
			data proto1.Message) (goprotoextra.IMessageWrapper, error) {
			if msg, ok := data.(*GetForexGroupedDailyBarsQueryRequest); ok {
				return NewGetForexGroupedDailyBarsQueryRequestWrapper(
					cancelCtx,
					cancelFunc,
					toReactor,
					toConnection,
					msg), nil
			}
			return nil, goerrors.InvalidParam
		}})

//true
//true
//false
//false
type GetForexGroupedDailyBarsResponseWrapper struct {
	goprotoextra.BaseMessageWrapper
	Data *GetForexGroupedDailyBarsResponse
}

func (self *GetForexGroupedDailyBarsResponseWrapper) Message() interface{} {
	return self.Data
}

func (self *GetForexGroupedDailyBarsResponseWrapper) messageWrapper() interface{} {
	return self
}

func NewGetForexGroupedDailyBarsResponseWrapper(
	cancelCtx context.Context,
	cancelFunc context.CancelFunc,
	toReactor goprotoextra.ToReactorFunc,
	toConnection goprotoextra.ToConnectionFunc,
	data *GetForexGroupedDailyBarsResponse) *GetForexGroupedDailyBarsResponseWrapper {
	return &GetForexGroupedDailyBarsResponseWrapper{
		BaseMessageWrapper: goprotoextra.NewBaseMessageWrapper(
			cancelCtx,
			cancelFunc,
			toReactor,
			toConnection),
		Data: data,
	}
}

var _ = stream.Register(
	GetForexGroupedDailyBarsResponseTypeCode,
	stream.TypeCodeData{
		CreateMessage: func() proto1.Message {
			return &GetForexGroupedDailyBarsResponse{}
		},
		CreateWrapper: func(
			cancelCtx context.Context,
			cancelFunc context.CancelFunc,
			toReactor goprotoextra.ToReactorFunc,
			toConnection goprotoextra.ToConnectionFunc,
			data proto1.Message) (goprotoextra.IMessageWrapper, error) {
			if msg, ok := data.(*GetForexGroupedDailyBarsResponse); ok {
				return NewGetForexGroupedDailyBarsResponseWrapper(
					cancelCtx,
					cancelFunc,
					toReactor,
					toConnection,
					msg), nil
			}
			return nil, goerrors.InvalidParam
		}})

//true
//true
//false
//false
type GetForexHistoricForexTicksQueryRequestWrapper struct {
	goprotoextra.BaseMessageWrapper
	Data *GetForexHistoricForexTicksQueryRequest
}

func (self *GetForexHistoricForexTicksQueryRequestWrapper) Message() interface{} {
	return self.Data
}

func (self *GetForexHistoricForexTicksQueryRequestWrapper) messageWrapper() interface{} {
	return self
}

func NewGetForexHistoricForexTicksQueryRequestWrapper(
	cancelCtx context.Context,
	cancelFunc context.CancelFunc,
	toReactor goprotoextra.ToReactorFunc,
	toConnection goprotoextra.ToConnectionFunc,
	data *GetForexHistoricForexTicksQueryRequest) *GetForexHistoricForexTicksQueryRequestWrapper {
	return &GetForexHistoricForexTicksQueryRequestWrapper{
		BaseMessageWrapper: goprotoextra.NewBaseMessageWrapper(
			cancelCtx,
			cancelFunc,
			toReactor,
			toConnection),
		Data: data,
	}
}

var _ = stream.Register(
	GetForexHistoricForexTicksQueryRequestTypeCode,
	stream.TypeCodeData{
		CreateMessage: func() proto1.Message {
			return &GetForexHistoricForexTicksQueryRequest{}
		},
		CreateWrapper: func(
			cancelCtx context.Context,
			cancelFunc context.CancelFunc,
			toReactor goprotoextra.ToReactorFunc,
			toConnection goprotoextra.ToConnectionFunc,
			data proto1.Message) (goprotoextra.IMessageWrapper, error) {
			if msg, ok := data.(*GetForexHistoricForexTicksQueryRequest); ok {
				return NewGetForexHistoricForexTicksQueryRequestWrapper(
					cancelCtx,
					cancelFunc,
					toReactor,
					toConnection,
					msg), nil
			}
			return nil, goerrors.InvalidParam
		}})

//true
//true
//false
//false
type GetForexHistoricForexTicksResponseWrapper struct {
	goprotoextra.BaseMessageWrapper
	Data *GetForexHistoricForexTicksResponse
}

func (self *GetForexHistoricForexTicksResponseWrapper) Message() interface{} {
	return self.Data
}

func (self *GetForexHistoricForexTicksResponseWrapper) messageWrapper() interface{} {
	return self
}

func NewGetForexHistoricForexTicksResponseWrapper(
	cancelCtx context.Context,
	cancelFunc context.CancelFunc,
	toReactor goprotoextra.ToReactorFunc,
	toConnection goprotoextra.ToConnectionFunc,
	data *GetForexHistoricForexTicksResponse) *GetForexHistoricForexTicksResponseWrapper {
	return &GetForexHistoricForexTicksResponseWrapper{
		BaseMessageWrapper: goprotoextra.NewBaseMessageWrapper(
			cancelCtx,
			cancelFunc,
			toReactor,
			toConnection),
		Data: data,
	}
}

var _ = stream.Register(
	GetForexHistoricForexTicksResponseTypeCode,
	stream.TypeCodeData{
		CreateMessage: func() proto1.Message {
			return &GetForexHistoricForexTicksResponse{}
		},
		CreateWrapper: func(
			cancelCtx context.Context,
			cancelFunc context.CancelFunc,
			toReactor goprotoextra.ToReactorFunc,
			toConnection goprotoextra.ToConnectionFunc,
			data proto1.Message) (goprotoextra.IMessageWrapper, error) {
			if msg, ok := data.(*GetForexHistoricForexTicksResponse); ok {
				return NewGetForexHistoricForexTicksResponseWrapper(
					cancelCtx,
					cancelFunc,
					toReactor,
					toConnection,
					msg), nil
			}
			return nil, goerrors.InvalidParam
		}})

//true
//true
//false
//false
type GetForexRealTimeCurrencyConversionQueryRequestWrapper struct {
	goprotoextra.BaseMessageWrapper
	Data *GetForexRealTimeCurrencyConversionQueryRequest
}

func (self *GetForexRealTimeCurrencyConversionQueryRequestWrapper) Message() interface{} {
	return self.Data
}

func (self *GetForexRealTimeCurrencyConversionQueryRequestWrapper) messageWrapper() interface{} {
	return self
}

func NewGetForexRealTimeCurrencyConversionQueryRequestWrapper(
	cancelCtx context.Context,
	cancelFunc context.CancelFunc,
	toReactor goprotoextra.ToReactorFunc,
	toConnection goprotoextra.ToConnectionFunc,
	data *GetForexRealTimeCurrencyConversionQueryRequest) *GetForexRealTimeCurrencyConversionQueryRequestWrapper {
	return &GetForexRealTimeCurrencyConversionQueryRequestWrapper{
		BaseMessageWrapper: goprotoextra.NewBaseMessageWrapper(
			cancelCtx,
			cancelFunc,
			toReactor,
			toConnection),
		Data: data,
	}
}

var _ = stream.Register(
	GetForexRealTimeCurrencyConversionQueryRequestTypeCode,
	stream.TypeCodeData{
		CreateMessage: func() proto1.Message {
			return &GetForexRealTimeCurrencyConversionQueryRequest{}
		},
		CreateWrapper: func(
			cancelCtx context.Context,
			cancelFunc context.CancelFunc,
			toReactor goprotoextra.ToReactorFunc,
			toConnection goprotoextra.ToConnectionFunc,
			data proto1.Message) (goprotoextra.IMessageWrapper, error) {
			if msg, ok := data.(*GetForexRealTimeCurrencyConversionQueryRequest); ok {
				return NewGetForexRealTimeCurrencyConversionQueryRequestWrapper(
					cancelCtx,
					cancelFunc,
					toReactor,
					toConnection,
					msg), nil
			}
			return nil, goerrors.InvalidParam
		}})

//true
//true
//false
//false
type GetForexRealTimeCurrencyConversionResponseWrapper struct {
	goprotoextra.BaseMessageWrapper
	Data *GetForexRealTimeCurrencyConversionResponse
}

func (self *GetForexRealTimeCurrencyConversionResponseWrapper) Message() interface{} {
	return self.Data
}

func (self *GetForexRealTimeCurrencyConversionResponseWrapper) messageWrapper() interface{} {
	return self
}

func NewGetForexRealTimeCurrencyConversionResponseWrapper(
	cancelCtx context.Context,
	cancelFunc context.CancelFunc,
	toReactor goprotoextra.ToReactorFunc,
	toConnection goprotoextra.ToConnectionFunc,
	data *GetForexRealTimeCurrencyConversionResponse) *GetForexRealTimeCurrencyConversionResponseWrapper {
	return &GetForexRealTimeCurrencyConversionResponseWrapper{
		BaseMessageWrapper: goprotoextra.NewBaseMessageWrapper(
			cancelCtx,
			cancelFunc,
			toReactor,
			toConnection),
		Data: data,
	}
}

var _ = stream.Register(
	GetForexRealTimeCurrencyConversionResponseTypeCode,
	stream.TypeCodeData{
		CreateMessage: func() proto1.Message {
			return &GetForexRealTimeCurrencyConversionResponse{}
		},
		CreateWrapper: func(
			cancelCtx context.Context,
			cancelFunc context.CancelFunc,
			toReactor goprotoextra.ToReactorFunc,
			toConnection goprotoextra.ToConnectionFunc,
			data proto1.Message) (goprotoextra.IMessageWrapper, error) {
			if msg, ok := data.(*GetForexRealTimeCurrencyConversionResponse); ok {
				return NewGetForexRealTimeCurrencyConversionResponseWrapper(
					cancelCtx,
					cancelFunc,
					toReactor,
					toConnection,
					msg), nil
			}
			return nil, goerrors.InvalidParam
		}})

//true
//true
//false
//false
type GetForexLastQuoteForCurrencyPairQueryRequestWrapper struct {
	goprotoextra.BaseMessageWrapper
	Data *GetForexLastQuoteForCurrencyPairQueryRequest
}

func (self *GetForexLastQuoteForCurrencyPairQueryRequestWrapper) Message() interface{} {
	return self.Data
}

func (self *GetForexLastQuoteForCurrencyPairQueryRequestWrapper) messageWrapper() interface{} {
	return self
}

func NewGetForexLastQuoteForCurrencyPairQueryRequestWrapper(
	cancelCtx context.Context,
	cancelFunc context.CancelFunc,
	toReactor goprotoextra.ToReactorFunc,
	toConnection goprotoextra.ToConnectionFunc,
	data *GetForexLastQuoteForCurrencyPairQueryRequest) *GetForexLastQuoteForCurrencyPairQueryRequestWrapper {
	return &GetForexLastQuoteForCurrencyPairQueryRequestWrapper{
		BaseMessageWrapper: goprotoextra.NewBaseMessageWrapper(
			cancelCtx,
			cancelFunc,
			toReactor,
			toConnection),
		Data: data,
	}
}

var _ = stream.Register(
	GetForexLastQuoteForCurrencyPairQueryRequestTypeCode,
	stream.TypeCodeData{
		CreateMessage: func() proto1.Message {
			return &GetForexLastQuoteForCurrencyPairQueryRequest{}
		},
		CreateWrapper: func(
			cancelCtx context.Context,
			cancelFunc context.CancelFunc,
			toReactor goprotoextra.ToReactorFunc,
			toConnection goprotoextra.ToConnectionFunc,
			data proto1.Message) (goprotoextra.IMessageWrapper, error) {
			if msg, ok := data.(*GetForexLastQuoteForCurrencyPairQueryRequest); ok {
				return NewGetForexLastQuoteForCurrencyPairQueryRequestWrapper(
					cancelCtx,
					cancelFunc,
					toReactor,
					toConnection,
					msg), nil
			}
			return nil, goerrors.InvalidParam
		}})

//true
//true
//false
//false
type GetForexLastQuoteForCurrencyPairResponseWrapper struct {
	goprotoextra.BaseMessageWrapper
	Data *GetForexLastQuoteForCurrencyPairResponse
}

func (self *GetForexLastQuoteForCurrencyPairResponseWrapper) Message() interface{} {
	return self.Data
}

func (self *GetForexLastQuoteForCurrencyPairResponseWrapper) messageWrapper() interface{} {
	return self
}

func NewGetForexLastQuoteForCurrencyPairResponseWrapper(
	cancelCtx context.Context,
	cancelFunc context.CancelFunc,
	toReactor goprotoextra.ToReactorFunc,
	toConnection goprotoextra.ToConnectionFunc,
	data *GetForexLastQuoteForCurrencyPairResponse) *GetForexLastQuoteForCurrencyPairResponseWrapper {
	return &GetForexLastQuoteForCurrencyPairResponseWrapper{
		BaseMessageWrapper: goprotoextra.NewBaseMessageWrapper(
			cancelCtx,
			cancelFunc,
			toReactor,
			toConnection),
		Data: data,
	}
}

var _ = stream.Register(
	GetForexLastQuoteForCurrencyPairResponseTypeCode,
	stream.TypeCodeData{
		CreateMessage: func() proto1.Message {
			return &GetForexLastQuoteForCurrencyPairResponse{}
		},
		CreateWrapper: func(
			cancelCtx context.Context,
			cancelFunc context.CancelFunc,
			toReactor goprotoextra.ToReactorFunc,
			toConnection goprotoextra.ToConnectionFunc,
			data proto1.Message) (goprotoextra.IMessageWrapper, error) {
			if msg, ok := data.(*GetForexLastQuoteForCurrencyPairResponse); ok {
				return NewGetForexLastQuoteForCurrencyPairResponseWrapper(
					cancelCtx,
					cancelFunc,
					toReactor,
					toConnection,
					msg), nil
			}
			return nil, goerrors.InvalidParam
		}})

//true
//true
//false
//false
type GetForexSnapshotAllTickersQueryRequestWrapper struct {
	goprotoextra.BaseMessageWrapper
	Data *GetForexSnapshotAllTickersQueryRequest
}

func (self *GetForexSnapshotAllTickersQueryRequestWrapper) Message() interface{} {
	return self.Data
}

func (self *GetForexSnapshotAllTickersQueryRequestWrapper) messageWrapper() interface{} {
	return self
}

func NewGetForexSnapshotAllTickersQueryRequestWrapper(
	cancelCtx context.Context,
	cancelFunc context.CancelFunc,
	toReactor goprotoextra.ToReactorFunc,
	toConnection goprotoextra.ToConnectionFunc,
	data *GetForexSnapshotAllTickersQueryRequest) *GetForexSnapshotAllTickersQueryRequestWrapper {
	return &GetForexSnapshotAllTickersQueryRequestWrapper{
		BaseMessageWrapper: goprotoextra.NewBaseMessageWrapper(
			cancelCtx,
			cancelFunc,
			toReactor,
			toConnection),
		Data: data,
	}
}

var _ = stream.Register(
	GetForexSnapshotAllTickersQueryRequestTypeCode,
	stream.TypeCodeData{
		CreateMessage: func() proto1.Message {
			return &GetForexSnapshotAllTickersQueryRequest{}
		},
		CreateWrapper: func(
			cancelCtx context.Context,
			cancelFunc context.CancelFunc,
			toReactor goprotoextra.ToReactorFunc,
			toConnection goprotoextra.ToConnectionFunc,
			data proto1.Message) (goprotoextra.IMessageWrapper, error) {
			if msg, ok := data.(*GetForexSnapshotAllTickersQueryRequest); ok {
				return NewGetForexSnapshotAllTickersQueryRequestWrapper(
					cancelCtx,
					cancelFunc,
					toReactor,
					toConnection,
					msg), nil
			}
			return nil, goerrors.InvalidParam
		}})

//true
//true
//false
//false
type GetForexSnapshotAllTickersResponseWrapper struct {
	goprotoextra.BaseMessageWrapper
	Data *GetForexSnapshotAllTickersResponse
}

func (self *GetForexSnapshotAllTickersResponseWrapper) Message() interface{} {
	return self.Data
}

func (self *GetForexSnapshotAllTickersResponseWrapper) messageWrapper() interface{} {
	return self
}

func NewGetForexSnapshotAllTickersResponseWrapper(
	cancelCtx context.Context,
	cancelFunc context.CancelFunc,
	toReactor goprotoextra.ToReactorFunc,
	toConnection goprotoextra.ToConnectionFunc,
	data *GetForexSnapshotAllTickersResponse) *GetForexSnapshotAllTickersResponseWrapper {
	return &GetForexSnapshotAllTickersResponseWrapper{
		BaseMessageWrapper: goprotoextra.NewBaseMessageWrapper(
			cancelCtx,
			cancelFunc,
			toReactor,
			toConnection),
		Data: data,
	}
}

var _ = stream.Register(
	GetForexSnapshotAllTickersResponseTypeCode,
	stream.TypeCodeData{
		CreateMessage: func() proto1.Message {
			return &GetForexSnapshotAllTickersResponse{}
		},
		CreateWrapper: func(
			cancelCtx context.Context,
			cancelFunc context.CancelFunc,
			toReactor goprotoextra.ToReactorFunc,
			toConnection goprotoextra.ToConnectionFunc,
			data proto1.Message) (goprotoextra.IMessageWrapper, error) {
			if msg, ok := data.(*GetForexSnapshotAllTickersResponse); ok {
				return NewGetForexSnapshotAllTickersResponseWrapper(
					cancelCtx,
					cancelFunc,
					toReactor,
					toConnection,
					msg), nil
			}
			return nil, goerrors.InvalidParam
		}})

//true
//true
//false
//false
type GetForexSnapshotGainersLosersQueryRequestWrapper struct {
	goprotoextra.BaseMessageWrapper
	Data *GetForexSnapshotGainersLosersQueryRequest
}

func (self *GetForexSnapshotGainersLosersQueryRequestWrapper) Message() interface{} {
	return self.Data
}

func (self *GetForexSnapshotGainersLosersQueryRequestWrapper) messageWrapper() interface{} {
	return self
}

func NewGetForexSnapshotGainersLosersQueryRequestWrapper(
	cancelCtx context.Context,
	cancelFunc context.CancelFunc,
	toReactor goprotoextra.ToReactorFunc,
	toConnection goprotoextra.ToConnectionFunc,
	data *GetForexSnapshotGainersLosersQueryRequest) *GetForexSnapshotGainersLosersQueryRequestWrapper {
	return &GetForexSnapshotGainersLosersQueryRequestWrapper{
		BaseMessageWrapper: goprotoextra.NewBaseMessageWrapper(
			cancelCtx,
			cancelFunc,
			toReactor,
			toConnection),
		Data: data,
	}
}

var _ = stream.Register(
	GetForexSnapshotGainersLosersQueryRequestTypeCode,
	stream.TypeCodeData{
		CreateMessage: func() proto1.Message {
			return &GetForexSnapshotGainersLosersQueryRequest{}
		},
		CreateWrapper: func(
			cancelCtx context.Context,
			cancelFunc context.CancelFunc,
			toReactor goprotoextra.ToReactorFunc,
			toConnection goprotoextra.ToConnectionFunc,
			data proto1.Message) (goprotoextra.IMessageWrapper, error) {
			if msg, ok := data.(*GetForexSnapshotGainersLosersQueryRequest); ok {
				return NewGetForexSnapshotGainersLosersQueryRequestWrapper(
					cancelCtx,
					cancelFunc,
					toReactor,
					toConnection,
					msg), nil
			}
			return nil, goerrors.InvalidParam
		}})

//true
//true
//false
//false
type GetForexSnapshotGainersLosersResponseWrapper struct {
	goprotoextra.BaseMessageWrapper
	Data *GetForexSnapshotGainersLosersResponse
}

func (self *GetForexSnapshotGainersLosersResponseWrapper) Message() interface{} {
	return self.Data
}

func (self *GetForexSnapshotGainersLosersResponseWrapper) messageWrapper() interface{} {
	return self
}

func NewGetForexSnapshotGainersLosersResponseWrapper(
	cancelCtx context.Context,
	cancelFunc context.CancelFunc,
	toReactor goprotoextra.ToReactorFunc,
	toConnection goprotoextra.ToConnectionFunc,
	data *GetForexSnapshotGainersLosersResponse) *GetForexSnapshotGainersLosersResponseWrapper {
	return &GetForexSnapshotGainersLosersResponseWrapper{
		BaseMessageWrapper: goprotoextra.NewBaseMessageWrapper(
			cancelCtx,
			cancelFunc,
			toReactor,
			toConnection),
		Data: data,
	}
}

var _ = stream.Register(
	GetForexSnapshotGainersLosersResponseTypeCode,
	stream.TypeCodeData{
		CreateMessage: func() proto1.Message {
			return &GetForexSnapshotGainersLosersResponse{}
		},
		CreateWrapper: func(
			cancelCtx context.Context,
			cancelFunc context.CancelFunc,
			toReactor goprotoextra.ToReactorFunc,
			toConnection goprotoextra.ToConnectionFunc,
			data proto1.Message) (goprotoextra.IMessageWrapper, error) {
			if msg, ok := data.(*GetForexSnapshotGainersLosersResponse); ok {
				return NewGetForexSnapshotGainersLosersResponseWrapper(
					cancelCtx,
					cancelFunc,
					toReactor,
					toConnection,
					msg), nil
			}
			return nil, goerrors.InvalidParam
		}})

//true
//true
//false
//false
type GetCryptoPreviousCloseQueryRequestWrapper struct {
	goprotoextra.BaseMessageWrapper
	Data *GetCryptoPreviousCloseQueryRequest
}

func (self *GetCryptoPreviousCloseQueryRequestWrapper) Message() interface{} {
	return self.Data
}

func (self *GetCryptoPreviousCloseQueryRequestWrapper) messageWrapper() interface{} {
	return self
}

func NewGetCryptoPreviousCloseQueryRequestWrapper(
	cancelCtx context.Context,
	cancelFunc context.CancelFunc,
	toReactor goprotoextra.ToReactorFunc,
	toConnection goprotoextra.ToConnectionFunc,
	data *GetCryptoPreviousCloseQueryRequest) *GetCryptoPreviousCloseQueryRequestWrapper {
	return &GetCryptoPreviousCloseQueryRequestWrapper{
		BaseMessageWrapper: goprotoextra.NewBaseMessageWrapper(
			cancelCtx,
			cancelFunc,
			toReactor,
			toConnection),
		Data: data,
	}
}

var _ = stream.Register(
	GetCryptoPreviousCloseQueryRequestTypeCode,
	stream.TypeCodeData{
		CreateMessage: func() proto1.Message {
			return &GetCryptoPreviousCloseQueryRequest{}
		},
		CreateWrapper: func(
			cancelCtx context.Context,
			cancelFunc context.CancelFunc,
			toReactor goprotoextra.ToReactorFunc,
			toConnection goprotoextra.ToConnectionFunc,
			data proto1.Message) (goprotoextra.IMessageWrapper, error) {
			if msg, ok := data.(*GetCryptoPreviousCloseQueryRequest); ok {
				return NewGetCryptoPreviousCloseQueryRequestWrapper(
					cancelCtx,
					cancelFunc,
					toReactor,
					toConnection,
					msg), nil
			}
			return nil, goerrors.InvalidParam
		}})

//true
//true
//false
//false
type GetCryptoPreviousCloseResponseWrapper struct {
	goprotoextra.BaseMessageWrapper
	Data *GetCryptoPreviousCloseResponse
}

func (self *GetCryptoPreviousCloseResponseWrapper) Message() interface{} {
	return self.Data
}

func (self *GetCryptoPreviousCloseResponseWrapper) messageWrapper() interface{} {
	return self
}

func NewGetCryptoPreviousCloseResponseWrapper(
	cancelCtx context.Context,
	cancelFunc context.CancelFunc,
	toReactor goprotoextra.ToReactorFunc,
	toConnection goprotoextra.ToConnectionFunc,
	data *GetCryptoPreviousCloseResponse) *GetCryptoPreviousCloseResponseWrapper {
	return &GetCryptoPreviousCloseResponseWrapper{
		BaseMessageWrapper: goprotoextra.NewBaseMessageWrapper(
			cancelCtx,
			cancelFunc,
			toReactor,
			toConnection),
		Data: data,
	}
}

var _ = stream.Register(
	GetCryptoPreviousCloseResponseTypeCode,
	stream.TypeCodeData{
		CreateMessage: func() proto1.Message {
			return &GetCryptoPreviousCloseResponse{}
		},
		CreateWrapper: func(
			cancelCtx context.Context,
			cancelFunc context.CancelFunc,
			toReactor goprotoextra.ToReactorFunc,
			toConnection goprotoextra.ToConnectionFunc,
			data proto1.Message) (goprotoextra.IMessageWrapper, error) {
			if msg, ok := data.(*GetCryptoPreviousCloseResponse); ok {
				return NewGetCryptoPreviousCloseResponseWrapper(
					cancelCtx,
					cancelFunc,
					toReactor,
					toConnection,
					msg), nil
			}
			return nil, goerrors.InvalidParam
		}})

//true
//true
//false
//false
type GetCryptoAggregatesBarsQueryRequestWrapper struct {
	goprotoextra.BaseMessageWrapper
	Data *GetCryptoAggregatesBarsQueryRequest
}

func (self *GetCryptoAggregatesBarsQueryRequestWrapper) Message() interface{} {
	return self.Data
}

func (self *GetCryptoAggregatesBarsQueryRequestWrapper) messageWrapper() interface{} {
	return self
}

func NewGetCryptoAggregatesBarsQueryRequestWrapper(
	cancelCtx context.Context,
	cancelFunc context.CancelFunc,
	toReactor goprotoextra.ToReactorFunc,
	toConnection goprotoextra.ToConnectionFunc,
	data *GetCryptoAggregatesBarsQueryRequest) *GetCryptoAggregatesBarsQueryRequestWrapper {
	return &GetCryptoAggregatesBarsQueryRequestWrapper{
		BaseMessageWrapper: goprotoextra.NewBaseMessageWrapper(
			cancelCtx,
			cancelFunc,
			toReactor,
			toConnection),
		Data: data,
	}
}

var _ = stream.Register(
	GetCryptoAggregatesBarsQueryRequestTypeCode,
	stream.TypeCodeData{
		CreateMessage: func() proto1.Message {
			return &GetCryptoAggregatesBarsQueryRequest{}
		},
		CreateWrapper: func(
			cancelCtx context.Context,
			cancelFunc context.CancelFunc,
			toReactor goprotoextra.ToReactorFunc,
			toConnection goprotoextra.ToConnectionFunc,
			data proto1.Message) (goprotoextra.IMessageWrapper, error) {
			if msg, ok := data.(*GetCryptoAggregatesBarsQueryRequest); ok {
				return NewGetCryptoAggregatesBarsQueryRequestWrapper(
					cancelCtx,
					cancelFunc,
					toReactor,
					toConnection,
					msg), nil
			}
			return nil, goerrors.InvalidParam
		}})

//true
//true
//false
//false
type GetCryptoAggregatesBarsResponseWrapper struct {
	goprotoextra.BaseMessageWrapper
	Data *GetCryptoAggregatesBarsResponse
}

func (self *GetCryptoAggregatesBarsResponseWrapper) Message() interface{} {
	return self.Data
}

func (self *GetCryptoAggregatesBarsResponseWrapper) messageWrapper() interface{} {
	return self
}

func NewGetCryptoAggregatesBarsResponseWrapper(
	cancelCtx context.Context,
	cancelFunc context.CancelFunc,
	toReactor goprotoextra.ToReactorFunc,
	toConnection goprotoextra.ToConnectionFunc,
	data *GetCryptoAggregatesBarsResponse) *GetCryptoAggregatesBarsResponseWrapper {
	return &GetCryptoAggregatesBarsResponseWrapper{
		BaseMessageWrapper: goprotoextra.NewBaseMessageWrapper(
			cancelCtx,
			cancelFunc,
			toReactor,
			toConnection),
		Data: data,
	}
}

var _ = stream.Register(
	GetCryptoAggregatesBarsResponseTypeCode,
	stream.TypeCodeData{
		CreateMessage: func() proto1.Message {
			return &GetCryptoAggregatesBarsResponse{}
		},
		CreateWrapper: func(
			cancelCtx context.Context,
			cancelFunc context.CancelFunc,
			toReactor goprotoextra.ToReactorFunc,
			toConnection goprotoextra.ToConnectionFunc,
			data proto1.Message) (goprotoextra.IMessageWrapper, error) {
			if msg, ok := data.(*GetCryptoAggregatesBarsResponse); ok {
				return NewGetCryptoAggregatesBarsResponseWrapper(
					cancelCtx,
					cancelFunc,
					toReactor,
					toConnection,
					msg), nil
			}
			return nil, goerrors.InvalidParam
		}})

//true
//true
//false
//false
type GetCryptoGroupedDailyBarsQueryRequestWrapper struct {
	goprotoextra.BaseMessageWrapper
	Data *GetCryptoGroupedDailyBarsQueryRequest
}

func (self *GetCryptoGroupedDailyBarsQueryRequestWrapper) Message() interface{} {
	return self.Data
}

func (self *GetCryptoGroupedDailyBarsQueryRequestWrapper) messageWrapper() interface{} {
	return self
}

func NewGetCryptoGroupedDailyBarsQueryRequestWrapper(
	cancelCtx context.Context,
	cancelFunc context.CancelFunc,
	toReactor goprotoextra.ToReactorFunc,
	toConnection goprotoextra.ToConnectionFunc,
	data *GetCryptoGroupedDailyBarsQueryRequest) *GetCryptoGroupedDailyBarsQueryRequestWrapper {
	return &GetCryptoGroupedDailyBarsQueryRequestWrapper{
		BaseMessageWrapper: goprotoextra.NewBaseMessageWrapper(
			cancelCtx,
			cancelFunc,
			toReactor,
			toConnection),
		Data: data,
	}
}

var _ = stream.Register(
	GetCryptoGroupedDailyBarsQueryRequestTypeCode,
	stream.TypeCodeData{
		CreateMessage: func() proto1.Message {
			return &GetCryptoGroupedDailyBarsQueryRequest{}
		},
		CreateWrapper: func(
			cancelCtx context.Context,
			cancelFunc context.CancelFunc,
			toReactor goprotoextra.ToReactorFunc,
			toConnection goprotoextra.ToConnectionFunc,
			data proto1.Message) (goprotoextra.IMessageWrapper, error) {
			if msg, ok := data.(*GetCryptoGroupedDailyBarsQueryRequest); ok {
				return NewGetCryptoGroupedDailyBarsQueryRequestWrapper(
					cancelCtx,
					cancelFunc,
					toReactor,
					toConnection,
					msg), nil
			}
			return nil, goerrors.InvalidParam
		}})

//true
//true
//false
//false
type GetCryptoGroupedDailyBarsResponseWrapper struct {
	goprotoextra.BaseMessageWrapper
	Data *GetCryptoGroupedDailyBarsResponse
}

func (self *GetCryptoGroupedDailyBarsResponseWrapper) Message() interface{} {
	return self.Data
}

func (self *GetCryptoGroupedDailyBarsResponseWrapper) messageWrapper() interface{} {
	return self
}

func NewGetCryptoGroupedDailyBarsResponseWrapper(
	cancelCtx context.Context,
	cancelFunc context.CancelFunc,
	toReactor goprotoextra.ToReactorFunc,
	toConnection goprotoextra.ToConnectionFunc,
	data *GetCryptoGroupedDailyBarsResponse) *GetCryptoGroupedDailyBarsResponseWrapper {
	return &GetCryptoGroupedDailyBarsResponseWrapper{
		BaseMessageWrapper: goprotoextra.NewBaseMessageWrapper(
			cancelCtx,
			cancelFunc,
			toReactor,
			toConnection),
		Data: data,
	}
}

var _ = stream.Register(
	GetCryptoGroupedDailyBarsResponseTypeCode,
	stream.TypeCodeData{
		CreateMessage: func() proto1.Message {
			return &GetCryptoGroupedDailyBarsResponse{}
		},
		CreateWrapper: func(
			cancelCtx context.Context,
			cancelFunc context.CancelFunc,
			toReactor goprotoextra.ToReactorFunc,
			toConnection goprotoextra.ToConnectionFunc,
			data proto1.Message) (goprotoextra.IMessageWrapper, error) {
			if msg, ok := data.(*GetCryptoGroupedDailyBarsResponse); ok {
				return NewGetCryptoGroupedDailyBarsResponseWrapper(
					cancelCtx,
					cancelFunc,
					toReactor,
					toConnection,
					msg), nil
			}
			return nil, goerrors.InvalidParam
		}})

//true
//true
//false
//false
type GetCryptoCryptoExchangesQueryRequestWrapper struct {
	goprotoextra.BaseMessageWrapper
	Data *GetCryptoCryptoExchangesQueryRequest
}

func (self *GetCryptoCryptoExchangesQueryRequestWrapper) Message() interface{} {
	return self.Data
}

func (self *GetCryptoCryptoExchangesQueryRequestWrapper) messageWrapper() interface{} {
	return self
}

func NewGetCryptoCryptoExchangesQueryRequestWrapper(
	cancelCtx context.Context,
	cancelFunc context.CancelFunc,
	toReactor goprotoextra.ToReactorFunc,
	toConnection goprotoextra.ToConnectionFunc,
	data *GetCryptoCryptoExchangesQueryRequest) *GetCryptoCryptoExchangesQueryRequestWrapper {
	return &GetCryptoCryptoExchangesQueryRequestWrapper{
		BaseMessageWrapper: goprotoextra.NewBaseMessageWrapper(
			cancelCtx,
			cancelFunc,
			toReactor,
			toConnection),
		Data: data,
	}
}

var _ = stream.Register(
	GetCryptoCryptoExchangesQueryRequestTypeCode,
	stream.TypeCodeData{
		CreateMessage: func() proto1.Message {
			return &GetCryptoCryptoExchangesQueryRequest{}
		},
		CreateWrapper: func(
			cancelCtx context.Context,
			cancelFunc context.CancelFunc,
			toReactor goprotoextra.ToReactorFunc,
			toConnection goprotoextra.ToConnectionFunc,
			data proto1.Message) (goprotoextra.IMessageWrapper, error) {
			if msg, ok := data.(*GetCryptoCryptoExchangesQueryRequest); ok {
				return NewGetCryptoCryptoExchangesQueryRequestWrapper(
					cancelCtx,
					cancelFunc,
					toReactor,
					toConnection,
					msg), nil
			}
			return nil, goerrors.InvalidParam
		}})

//true
//true
//false
//false
type GetCryptoCryptoExchangesResponseWrapper struct {
	goprotoextra.BaseMessageWrapper
	Data *GetCryptoCryptoExchangesResponse
}

func (self *GetCryptoCryptoExchangesResponseWrapper) Message() interface{} {
	return self.Data
}

func (self *GetCryptoCryptoExchangesResponseWrapper) messageWrapper() interface{} {
	return self
}

func NewGetCryptoCryptoExchangesResponseWrapper(
	cancelCtx context.Context,
	cancelFunc context.CancelFunc,
	toReactor goprotoextra.ToReactorFunc,
	toConnection goprotoextra.ToConnectionFunc,
	data *GetCryptoCryptoExchangesResponse) *GetCryptoCryptoExchangesResponseWrapper {
	return &GetCryptoCryptoExchangesResponseWrapper{
		BaseMessageWrapper: goprotoextra.NewBaseMessageWrapper(
			cancelCtx,
			cancelFunc,
			toReactor,
			toConnection),
		Data: data,
	}
}

var _ = stream.Register(
	GetCryptoCryptoExchangesResponseTypeCode,
	stream.TypeCodeData{
		CreateMessage: func() proto1.Message {
			return &GetCryptoCryptoExchangesResponse{}
		},
		CreateWrapper: func(
			cancelCtx context.Context,
			cancelFunc context.CancelFunc,
			toReactor goprotoextra.ToReactorFunc,
			toConnection goprotoextra.ToConnectionFunc,
			data proto1.Message) (goprotoextra.IMessageWrapper, error) {
			if msg, ok := data.(*GetCryptoCryptoExchangesResponse); ok {
				return NewGetCryptoCryptoExchangesResponseWrapper(
					cancelCtx,
					cancelFunc,
					toReactor,
					toConnection,
					msg), nil
			}
			return nil, goerrors.InvalidParam
		}})

//true
//true
//false
//false
type GetCryptoLastTradeForCryptoPairQueryRequestWrapper struct {
	goprotoextra.BaseMessageWrapper
	Data *GetCryptoLastTradeForCryptoPairQueryRequest
}

func (self *GetCryptoLastTradeForCryptoPairQueryRequestWrapper) Message() interface{} {
	return self.Data
}

func (self *GetCryptoLastTradeForCryptoPairQueryRequestWrapper) messageWrapper() interface{} {
	return self
}

func NewGetCryptoLastTradeForCryptoPairQueryRequestWrapper(
	cancelCtx context.Context,
	cancelFunc context.CancelFunc,
	toReactor goprotoextra.ToReactorFunc,
	toConnection goprotoextra.ToConnectionFunc,
	data *GetCryptoLastTradeForCryptoPairQueryRequest) *GetCryptoLastTradeForCryptoPairQueryRequestWrapper {
	return &GetCryptoLastTradeForCryptoPairQueryRequestWrapper{
		BaseMessageWrapper: goprotoextra.NewBaseMessageWrapper(
			cancelCtx,
			cancelFunc,
			toReactor,
			toConnection),
		Data: data,
	}
}

var _ = stream.Register(
	GetCryptoLastTradeForCryptoPairQueryRequestTypeCode,
	stream.TypeCodeData{
		CreateMessage: func() proto1.Message {
			return &GetCryptoLastTradeForCryptoPairQueryRequest{}
		},
		CreateWrapper: func(
			cancelCtx context.Context,
			cancelFunc context.CancelFunc,
			toReactor goprotoextra.ToReactorFunc,
			toConnection goprotoextra.ToConnectionFunc,
			data proto1.Message) (goprotoextra.IMessageWrapper, error) {
			if msg, ok := data.(*GetCryptoLastTradeForCryptoPairQueryRequest); ok {
				return NewGetCryptoLastTradeForCryptoPairQueryRequestWrapper(
					cancelCtx,
					cancelFunc,
					toReactor,
					toConnection,
					msg), nil
			}
			return nil, goerrors.InvalidParam
		}})

//true
//true
//false
//false
type GetCryptoLastTradeForCryptoPairResponseWrapper struct {
	goprotoextra.BaseMessageWrapper
	Data *GetCryptoLastTradeForCryptoPairResponse
}

func (self *GetCryptoLastTradeForCryptoPairResponseWrapper) Message() interface{} {
	return self.Data
}

func (self *GetCryptoLastTradeForCryptoPairResponseWrapper) messageWrapper() interface{} {
	return self
}

func NewGetCryptoLastTradeForCryptoPairResponseWrapper(
	cancelCtx context.Context,
	cancelFunc context.CancelFunc,
	toReactor goprotoextra.ToReactorFunc,
	toConnection goprotoextra.ToConnectionFunc,
	data *GetCryptoLastTradeForCryptoPairResponse) *GetCryptoLastTradeForCryptoPairResponseWrapper {
	return &GetCryptoLastTradeForCryptoPairResponseWrapper{
		BaseMessageWrapper: goprotoextra.NewBaseMessageWrapper(
			cancelCtx,
			cancelFunc,
			toReactor,
			toConnection),
		Data: data,
	}
}

var _ = stream.Register(
	GetCryptoLastTradeForCryptoPairResponseTypeCode,
	stream.TypeCodeData{
		CreateMessage: func() proto1.Message {
			return &GetCryptoLastTradeForCryptoPairResponse{}
		},
		CreateWrapper: func(
			cancelCtx context.Context,
			cancelFunc context.CancelFunc,
			toReactor goprotoextra.ToReactorFunc,
			toConnection goprotoextra.ToConnectionFunc,
			data proto1.Message) (goprotoextra.IMessageWrapper, error) {
			if msg, ok := data.(*GetCryptoLastTradeForCryptoPairResponse); ok {
				return NewGetCryptoLastTradeForCryptoPairResponseWrapper(
					cancelCtx,
					cancelFunc,
					toReactor,
					toConnection,
					msg), nil
			}
			return nil, goerrors.InvalidParam
		}})

//true
//true
//false
//false
type GetCryptoDailyOpenCloseQueryRequestWrapper struct {
	goprotoextra.BaseMessageWrapper
	Data *GetCryptoDailyOpenCloseQueryRequest
}

func (self *GetCryptoDailyOpenCloseQueryRequestWrapper) Message() interface{} {
	return self.Data
}

func (self *GetCryptoDailyOpenCloseQueryRequestWrapper) messageWrapper() interface{} {
	return self
}

func NewGetCryptoDailyOpenCloseQueryRequestWrapper(
	cancelCtx context.Context,
	cancelFunc context.CancelFunc,
	toReactor goprotoextra.ToReactorFunc,
	toConnection goprotoextra.ToConnectionFunc,
	data *GetCryptoDailyOpenCloseQueryRequest) *GetCryptoDailyOpenCloseQueryRequestWrapper {
	return &GetCryptoDailyOpenCloseQueryRequestWrapper{
		BaseMessageWrapper: goprotoextra.NewBaseMessageWrapper(
			cancelCtx,
			cancelFunc,
			toReactor,
			toConnection),
		Data: data,
	}
}

var _ = stream.Register(
	GetCryptoDailyOpenCloseQueryRequestTypeCode,
	stream.TypeCodeData{
		CreateMessage: func() proto1.Message {
			return &GetCryptoDailyOpenCloseQueryRequest{}
		},
		CreateWrapper: func(
			cancelCtx context.Context,
			cancelFunc context.CancelFunc,
			toReactor goprotoextra.ToReactorFunc,
			toConnection goprotoextra.ToConnectionFunc,
			data proto1.Message) (goprotoextra.IMessageWrapper, error) {
			if msg, ok := data.(*GetCryptoDailyOpenCloseQueryRequest); ok {
				return NewGetCryptoDailyOpenCloseQueryRequestWrapper(
					cancelCtx,
					cancelFunc,
					toReactor,
					toConnection,
					msg), nil
			}
			return nil, goerrors.InvalidParam
		}})

//true
//true
//false
//false
type GetCryptoDailyOpenCloseResponseWrapper struct {
	goprotoextra.BaseMessageWrapper
	Data *GetCryptoDailyOpenCloseResponse
}

func (self *GetCryptoDailyOpenCloseResponseWrapper) Message() interface{} {
	return self.Data
}

func (self *GetCryptoDailyOpenCloseResponseWrapper) messageWrapper() interface{} {
	return self
}

func NewGetCryptoDailyOpenCloseResponseWrapper(
	cancelCtx context.Context,
	cancelFunc context.CancelFunc,
	toReactor goprotoextra.ToReactorFunc,
	toConnection goprotoextra.ToConnectionFunc,
	data *GetCryptoDailyOpenCloseResponse) *GetCryptoDailyOpenCloseResponseWrapper {
	return &GetCryptoDailyOpenCloseResponseWrapper{
		BaseMessageWrapper: goprotoextra.NewBaseMessageWrapper(
			cancelCtx,
			cancelFunc,
			toReactor,
			toConnection),
		Data: data,
	}
}

var _ = stream.Register(
	GetCryptoDailyOpenCloseResponseTypeCode,
	stream.TypeCodeData{
		CreateMessage: func() proto1.Message {
			return &GetCryptoDailyOpenCloseResponse{}
		},
		CreateWrapper: func(
			cancelCtx context.Context,
			cancelFunc context.CancelFunc,
			toReactor goprotoextra.ToReactorFunc,
			toConnection goprotoextra.ToConnectionFunc,
			data proto1.Message) (goprotoextra.IMessageWrapper, error) {
			if msg, ok := data.(*GetCryptoDailyOpenCloseResponse); ok {
				return NewGetCryptoDailyOpenCloseResponseWrapper(
					cancelCtx,
					cancelFunc,
					toReactor,
					toConnection,
					msg), nil
			}
			return nil, goerrors.InvalidParam
		}})

//true
//true
//false
//false
type GetCryptoHistoricCryptoTradesQueryRequestWrapper struct {
	goprotoextra.BaseMessageWrapper
	Data *GetCryptoHistoricCryptoTradesQueryRequest
}

func (self *GetCryptoHistoricCryptoTradesQueryRequestWrapper) Message() interface{} {
	return self.Data
}

func (self *GetCryptoHistoricCryptoTradesQueryRequestWrapper) messageWrapper() interface{} {
	return self
}

func NewGetCryptoHistoricCryptoTradesQueryRequestWrapper(
	cancelCtx context.Context,
	cancelFunc context.CancelFunc,
	toReactor goprotoextra.ToReactorFunc,
	toConnection goprotoextra.ToConnectionFunc,
	data *GetCryptoHistoricCryptoTradesQueryRequest) *GetCryptoHistoricCryptoTradesQueryRequestWrapper {
	return &GetCryptoHistoricCryptoTradesQueryRequestWrapper{
		BaseMessageWrapper: goprotoextra.NewBaseMessageWrapper(
			cancelCtx,
			cancelFunc,
			toReactor,
			toConnection),
		Data: data,
	}
}

var _ = stream.Register(
	GetCryptoHistoricCryptoTradesQueryRequestTypeCode,
	stream.TypeCodeData{
		CreateMessage: func() proto1.Message {
			return &GetCryptoHistoricCryptoTradesQueryRequest{}
		},
		CreateWrapper: func(
			cancelCtx context.Context,
			cancelFunc context.CancelFunc,
			toReactor goprotoextra.ToReactorFunc,
			toConnection goprotoextra.ToConnectionFunc,
			data proto1.Message) (goprotoextra.IMessageWrapper, error) {
			if msg, ok := data.(*GetCryptoHistoricCryptoTradesQueryRequest); ok {
				return NewGetCryptoHistoricCryptoTradesQueryRequestWrapper(
					cancelCtx,
					cancelFunc,
					toReactor,
					toConnection,
					msg), nil
			}
			return nil, goerrors.InvalidParam
		}})

//true
//true
//false
//false
type GetCryptoHistoricCryptoTradesResponseWrapper struct {
	goprotoextra.BaseMessageWrapper
	Data *GetCryptoHistoricCryptoTradesResponse
}

func (self *GetCryptoHistoricCryptoTradesResponseWrapper) Message() interface{} {
	return self.Data
}

func (self *GetCryptoHistoricCryptoTradesResponseWrapper) messageWrapper() interface{} {
	return self
}

func NewGetCryptoHistoricCryptoTradesResponseWrapper(
	cancelCtx context.Context,
	cancelFunc context.CancelFunc,
	toReactor goprotoextra.ToReactorFunc,
	toConnection goprotoextra.ToConnectionFunc,
	data *GetCryptoHistoricCryptoTradesResponse) *GetCryptoHistoricCryptoTradesResponseWrapper {
	return &GetCryptoHistoricCryptoTradesResponseWrapper{
		BaseMessageWrapper: goprotoextra.NewBaseMessageWrapper(
			cancelCtx,
			cancelFunc,
			toReactor,
			toConnection),
		Data: data,
	}
}

var _ = stream.Register(
	GetCryptoHistoricCryptoTradesResponseTypeCode,
	stream.TypeCodeData{
		CreateMessage: func() proto1.Message {
			return &GetCryptoHistoricCryptoTradesResponse{}
		},
		CreateWrapper: func(
			cancelCtx context.Context,
			cancelFunc context.CancelFunc,
			toReactor goprotoextra.ToReactorFunc,
			toConnection goprotoextra.ToConnectionFunc,
			data proto1.Message) (goprotoextra.IMessageWrapper, error) {
			if msg, ok := data.(*GetCryptoHistoricCryptoTradesResponse); ok {
				return NewGetCryptoHistoricCryptoTradesResponseWrapper(
					cancelCtx,
					cancelFunc,
					toReactor,
					toConnection,
					msg), nil
			}
			return nil, goerrors.InvalidParam
		}})

//true
//true
//false
//false
type GetCryptoSnapshotAllTickersQueryRequestWrapper struct {
	goprotoextra.BaseMessageWrapper
	Data *GetCryptoSnapshotAllTickersQueryRequest
}

func (self *GetCryptoSnapshotAllTickersQueryRequestWrapper) Message() interface{} {
	return self.Data
}

func (self *GetCryptoSnapshotAllTickersQueryRequestWrapper) messageWrapper() interface{} {
	return self
}

func NewGetCryptoSnapshotAllTickersQueryRequestWrapper(
	cancelCtx context.Context,
	cancelFunc context.CancelFunc,
	toReactor goprotoextra.ToReactorFunc,
	toConnection goprotoextra.ToConnectionFunc,
	data *GetCryptoSnapshotAllTickersQueryRequest) *GetCryptoSnapshotAllTickersQueryRequestWrapper {
	return &GetCryptoSnapshotAllTickersQueryRequestWrapper{
		BaseMessageWrapper: goprotoextra.NewBaseMessageWrapper(
			cancelCtx,
			cancelFunc,
			toReactor,
			toConnection),
		Data: data,
	}
}

var _ = stream.Register(
	GetCryptoSnapshotAllTickersQueryRequestTypeCode,
	stream.TypeCodeData{
		CreateMessage: func() proto1.Message {
			return &GetCryptoSnapshotAllTickersQueryRequest{}
		},
		CreateWrapper: func(
			cancelCtx context.Context,
			cancelFunc context.CancelFunc,
			toReactor goprotoextra.ToReactorFunc,
			toConnection goprotoextra.ToConnectionFunc,
			data proto1.Message) (goprotoextra.IMessageWrapper, error) {
			if msg, ok := data.(*GetCryptoSnapshotAllTickersQueryRequest); ok {
				return NewGetCryptoSnapshotAllTickersQueryRequestWrapper(
					cancelCtx,
					cancelFunc,
					toReactor,
					toConnection,
					msg), nil
			}
			return nil, goerrors.InvalidParam
		}})

//true
//true
//false
//false
type GetCryptoSnapshotAllTickersResponseWrapper struct {
	goprotoextra.BaseMessageWrapper
	Data *GetCryptoSnapshotAllTickersResponse
}

func (self *GetCryptoSnapshotAllTickersResponseWrapper) Message() interface{} {
	return self.Data
}

func (self *GetCryptoSnapshotAllTickersResponseWrapper) messageWrapper() interface{} {
	return self
}

func NewGetCryptoSnapshotAllTickersResponseWrapper(
	cancelCtx context.Context,
	cancelFunc context.CancelFunc,
	toReactor goprotoextra.ToReactorFunc,
	toConnection goprotoextra.ToConnectionFunc,
	data *GetCryptoSnapshotAllTickersResponse) *GetCryptoSnapshotAllTickersResponseWrapper {
	return &GetCryptoSnapshotAllTickersResponseWrapper{
		BaseMessageWrapper: goprotoextra.NewBaseMessageWrapper(
			cancelCtx,
			cancelFunc,
			toReactor,
			toConnection),
		Data: data,
	}
}

var _ = stream.Register(
	GetCryptoSnapshotAllTickersResponseTypeCode,
	stream.TypeCodeData{
		CreateMessage: func() proto1.Message {
			return &GetCryptoSnapshotAllTickersResponse{}
		},
		CreateWrapper: func(
			cancelCtx context.Context,
			cancelFunc context.CancelFunc,
			toReactor goprotoextra.ToReactorFunc,
			toConnection goprotoextra.ToConnectionFunc,
			data proto1.Message) (goprotoextra.IMessageWrapper, error) {
			if msg, ok := data.(*GetCryptoSnapshotAllTickersResponse); ok {
				return NewGetCryptoSnapshotAllTickersResponseWrapper(
					cancelCtx,
					cancelFunc,
					toReactor,
					toConnection,
					msg), nil
			}
			return nil, goerrors.InvalidParam
		}})

//true
//true
//false
//false
type GetCryptoSnapshotSingleTickerQueryRequestWrapper struct {
	goprotoextra.BaseMessageWrapper
	Data *GetCryptoSnapshotSingleTickerQueryRequest
}

func (self *GetCryptoSnapshotSingleTickerQueryRequestWrapper) Message() interface{} {
	return self.Data
}

func (self *GetCryptoSnapshotSingleTickerQueryRequestWrapper) messageWrapper() interface{} {
	return self
}

func NewGetCryptoSnapshotSingleTickerQueryRequestWrapper(
	cancelCtx context.Context,
	cancelFunc context.CancelFunc,
	toReactor goprotoextra.ToReactorFunc,
	toConnection goprotoextra.ToConnectionFunc,
	data *GetCryptoSnapshotSingleTickerQueryRequest) *GetCryptoSnapshotSingleTickerQueryRequestWrapper {
	return &GetCryptoSnapshotSingleTickerQueryRequestWrapper{
		BaseMessageWrapper: goprotoextra.NewBaseMessageWrapper(
			cancelCtx,
			cancelFunc,
			toReactor,
			toConnection),
		Data: data,
	}
}

var _ = stream.Register(
	GetCryptoSnapshotSingleTickerQueryRequestTypeCode,
	stream.TypeCodeData{
		CreateMessage: func() proto1.Message {
			return &GetCryptoSnapshotSingleTickerQueryRequest{}
		},
		CreateWrapper: func(
			cancelCtx context.Context,
			cancelFunc context.CancelFunc,
			toReactor goprotoextra.ToReactorFunc,
			toConnection goprotoextra.ToConnectionFunc,
			data proto1.Message) (goprotoextra.IMessageWrapper, error) {
			if msg, ok := data.(*GetCryptoSnapshotSingleTickerQueryRequest); ok {
				return NewGetCryptoSnapshotSingleTickerQueryRequestWrapper(
					cancelCtx,
					cancelFunc,
					toReactor,
					toConnection,
					msg), nil
			}
			return nil, goerrors.InvalidParam
		}})

//true
//true
//false
//false
type GetCryptoSnapshotSingleTickerResponseWrapper struct {
	goprotoextra.BaseMessageWrapper
	Data *GetCryptoSnapshotSingleTickerResponse
}

func (self *GetCryptoSnapshotSingleTickerResponseWrapper) Message() interface{} {
	return self.Data
}

func (self *GetCryptoSnapshotSingleTickerResponseWrapper) messageWrapper() interface{} {
	return self
}

func NewGetCryptoSnapshotSingleTickerResponseWrapper(
	cancelCtx context.Context,
	cancelFunc context.CancelFunc,
	toReactor goprotoextra.ToReactorFunc,
	toConnection goprotoextra.ToConnectionFunc,
	data *GetCryptoSnapshotSingleTickerResponse) *GetCryptoSnapshotSingleTickerResponseWrapper {
	return &GetCryptoSnapshotSingleTickerResponseWrapper{
		BaseMessageWrapper: goprotoextra.NewBaseMessageWrapper(
			cancelCtx,
			cancelFunc,
			toReactor,
			toConnection),
		Data: data,
	}
}

var _ = stream.Register(
	GetCryptoSnapshotSingleTickerResponseTypeCode,
	stream.TypeCodeData{
		CreateMessage: func() proto1.Message {
			return &GetCryptoSnapshotSingleTickerResponse{}
		},
		CreateWrapper: func(
			cancelCtx context.Context,
			cancelFunc context.CancelFunc,
			toReactor goprotoextra.ToReactorFunc,
			toConnection goprotoextra.ToConnectionFunc,
			data proto1.Message) (goprotoextra.IMessageWrapper, error) {
			if msg, ok := data.(*GetCryptoSnapshotSingleTickerResponse); ok {
				return NewGetCryptoSnapshotSingleTickerResponseWrapper(
					cancelCtx,
					cancelFunc,
					toReactor,
					toConnection,
					msg), nil
			}
			return nil, goerrors.InvalidParam
		}})

//true
//true
//false
//false
type GetCryptoSnapshotSingleTickerFullBookL2QueryRequestWrapper struct {
	goprotoextra.BaseMessageWrapper
	Data *GetCryptoSnapshotSingleTickerFullBookL2QueryRequest
}

func (self *GetCryptoSnapshotSingleTickerFullBookL2QueryRequestWrapper) Message() interface{} {
	return self.Data
}

func (self *GetCryptoSnapshotSingleTickerFullBookL2QueryRequestWrapper) messageWrapper() interface{} {
	return self
}

func NewGetCryptoSnapshotSingleTickerFullBookL2QueryRequestWrapper(
	cancelCtx context.Context,
	cancelFunc context.CancelFunc,
	toReactor goprotoextra.ToReactorFunc,
	toConnection goprotoextra.ToConnectionFunc,
	data *GetCryptoSnapshotSingleTickerFullBookL2QueryRequest) *GetCryptoSnapshotSingleTickerFullBookL2QueryRequestWrapper {
	return &GetCryptoSnapshotSingleTickerFullBookL2QueryRequestWrapper{
		BaseMessageWrapper: goprotoextra.NewBaseMessageWrapper(
			cancelCtx,
			cancelFunc,
			toReactor,
			toConnection),
		Data: data,
	}
}

var _ = stream.Register(
	GetCryptoSnapshotSingleTickerFullBookL2QueryRequestTypeCode,
	stream.TypeCodeData{
		CreateMessage: func() proto1.Message {
			return &GetCryptoSnapshotSingleTickerFullBookL2QueryRequest{}
		},
		CreateWrapper: func(
			cancelCtx context.Context,
			cancelFunc context.CancelFunc,
			toReactor goprotoextra.ToReactorFunc,
			toConnection goprotoextra.ToConnectionFunc,
			data proto1.Message) (goprotoextra.IMessageWrapper, error) {
			if msg, ok := data.(*GetCryptoSnapshotSingleTickerFullBookL2QueryRequest); ok {
				return NewGetCryptoSnapshotSingleTickerFullBookL2QueryRequestWrapper(
					cancelCtx,
					cancelFunc,
					toReactor,
					toConnection,
					msg), nil
			}
			return nil, goerrors.InvalidParam
		}})

//true
//true
//false
//false
type GetCryptoSnapshotSingleTickerFullBookL2ResponseWrapper struct {
	goprotoextra.BaseMessageWrapper
	Data *GetCryptoSnapshotSingleTickerFullBookL2Response
}

func (self *GetCryptoSnapshotSingleTickerFullBookL2ResponseWrapper) Message() interface{} {
	return self.Data
}

func (self *GetCryptoSnapshotSingleTickerFullBookL2ResponseWrapper) messageWrapper() interface{} {
	return self
}

func NewGetCryptoSnapshotSingleTickerFullBookL2ResponseWrapper(
	cancelCtx context.Context,
	cancelFunc context.CancelFunc,
	toReactor goprotoextra.ToReactorFunc,
	toConnection goprotoextra.ToConnectionFunc,
	data *GetCryptoSnapshotSingleTickerFullBookL2Response) *GetCryptoSnapshotSingleTickerFullBookL2ResponseWrapper {
	return &GetCryptoSnapshotSingleTickerFullBookL2ResponseWrapper{
		BaseMessageWrapper: goprotoextra.NewBaseMessageWrapper(
			cancelCtx,
			cancelFunc,
			toReactor,
			toConnection),
		Data: data,
	}
}

var _ = stream.Register(
	GetCryptoSnapshotSingleTickerFullBookL2ResponseTypeCode,
	stream.TypeCodeData{
		CreateMessage: func() proto1.Message {
			return &GetCryptoSnapshotSingleTickerFullBookL2Response{}
		},
		CreateWrapper: func(
			cancelCtx context.Context,
			cancelFunc context.CancelFunc,
			toReactor goprotoextra.ToReactorFunc,
			toConnection goprotoextra.ToConnectionFunc,
			data proto1.Message) (goprotoextra.IMessageWrapper, error) {
			if msg, ok := data.(*GetCryptoSnapshotSingleTickerFullBookL2Response); ok {
				return NewGetCryptoSnapshotSingleTickerFullBookL2ResponseWrapper(
					cancelCtx,
					cancelFunc,
					toReactor,
					toConnection,
					msg), nil
			}
			return nil, goerrors.InvalidParam
		}})

//true
//true
//false
//false
type GetCryptoSnapshotGainersLosersQueryRequestWrapper struct {
	goprotoextra.BaseMessageWrapper
	Data *GetCryptoSnapshotGainersLosersQueryRequest
}

func (self *GetCryptoSnapshotGainersLosersQueryRequestWrapper) Message() interface{} {
	return self.Data
}

func (self *GetCryptoSnapshotGainersLosersQueryRequestWrapper) messageWrapper() interface{} {
	return self
}

func NewGetCryptoSnapshotGainersLosersQueryRequestWrapper(
	cancelCtx context.Context,
	cancelFunc context.CancelFunc,
	toReactor goprotoextra.ToReactorFunc,
	toConnection goprotoextra.ToConnectionFunc,
	data *GetCryptoSnapshotGainersLosersQueryRequest) *GetCryptoSnapshotGainersLosersQueryRequestWrapper {
	return &GetCryptoSnapshotGainersLosersQueryRequestWrapper{
		BaseMessageWrapper: goprotoextra.NewBaseMessageWrapper(
			cancelCtx,
			cancelFunc,
			toReactor,
			toConnection),
		Data: data,
	}
}

var _ = stream.Register(
	GetCryptoSnapshotGainersLosersQueryRequestTypeCode,
	stream.TypeCodeData{
		CreateMessage: func() proto1.Message {
			return &GetCryptoSnapshotGainersLosersQueryRequest{}
		},
		CreateWrapper: func(
			cancelCtx context.Context,
			cancelFunc context.CancelFunc,
			toReactor goprotoextra.ToReactorFunc,
			toConnection goprotoextra.ToConnectionFunc,
			data proto1.Message) (goprotoextra.IMessageWrapper, error) {
			if msg, ok := data.(*GetCryptoSnapshotGainersLosersQueryRequest); ok {
				return NewGetCryptoSnapshotGainersLosersQueryRequestWrapper(
					cancelCtx,
					cancelFunc,
					toReactor,
					toConnection,
					msg), nil
			}
			return nil, goerrors.InvalidParam
		}})

//true
//true
//false
//false
type GetCryptoSnapshotGainersLosersResponseWrapper struct {
	goprotoextra.BaseMessageWrapper
	Data *GetCryptoSnapshotGainersLosersResponse
}

func (self *GetCryptoSnapshotGainersLosersResponseWrapper) Message() interface{} {
	return self.Data
}

func (self *GetCryptoSnapshotGainersLosersResponseWrapper) messageWrapper() interface{} {
	return self
}

func NewGetCryptoSnapshotGainersLosersResponseWrapper(
	cancelCtx context.Context,
	cancelFunc context.CancelFunc,
	toReactor goprotoextra.ToReactorFunc,
	toConnection goprotoextra.ToConnectionFunc,
	data *GetCryptoSnapshotGainersLosersResponse) *GetCryptoSnapshotGainersLosersResponseWrapper {
	return &GetCryptoSnapshotGainersLosersResponseWrapper{
		BaseMessageWrapper: goprotoextra.NewBaseMessageWrapper(
			cancelCtx,
			cancelFunc,
			toReactor,
			toConnection),
		Data: data,
	}
}

var _ = stream.Register(
	GetCryptoSnapshotGainersLosersResponseTypeCode,
	stream.TypeCodeData{
		CreateMessage: func() proto1.Message {
			return &GetCryptoSnapshotGainersLosersResponse{}
		},
		CreateWrapper: func(
			cancelCtx context.Context,
			cancelFunc context.CancelFunc,
			toReactor goprotoextra.ToReactorFunc,
			toConnection goprotoextra.ToConnectionFunc,
			data proto1.Message) (goprotoextra.IMessageWrapper, error) {
			if msg, ok := data.(*GetCryptoSnapshotGainersLosersResponse); ok {
				return NewGetCryptoSnapshotGainersLosersResponseWrapper(
					cancelCtx,
					cancelFunc,
					toReactor,
					toConnection,
					msg), nil
			}
			return nil, goerrors.InvalidParam
		}})
