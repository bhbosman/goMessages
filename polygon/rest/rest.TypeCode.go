// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0-devel
// 	protoc        v5.28.0
// source: polygon/rest.proto

// TCVersion Generator: 1
package rest

import (
	stream "github.com/bhbosman/gocommon/stream"
	goerrors "github.com/bhbosman/goerrors"
	goprotoextra "github.com/bhbosman/goprotoextra"
	proto "google.golang.org/protobuf/proto"
)

// TypeCode generated from: "GetErrorResponse"
const GetErrorResponseTypeCode uint32 = 793597543

// TypeCode generated from: "GetTickerQueryRequest"
const GetTickerQueryRequestTypeCode uint32 = 2164488137

// TypeCode generated from: "Symbol"
const SymbolTypeCode uint32 = 3949212623

// TypeCode generated from: "GetTickerResponse"
const GetTickerResponseTypeCode uint32 = 2874125899

// TypeCode generated from: "GetTickerTypesResponse"
const GetTickerTypesResponseTypeCode uint32 = 722595286

// TypeCode generated from: "GetTickerDetailsResponse"
const GetTickerDetailsResponseTypeCode uint32 = 3800904172

// TypeCode generated from: "GetTickerNewsQueryRequest"
const GetTickerNewsQueryRequestTypeCode uint32 = 1381771800

// TypeCode generated from: "News"
const NewsTypeCode uint32 = 3185653358

// TypeCode generated from: "GetTickerNewsResponse"
const GetTickerNewsResponseTypeCode uint32 = 489672987

// TypeCode generated from: "Market"
const MarketTypeCode uint32 = 1811972349

// TypeCode generated from: "GetMarketsResponse"
const GetMarketsResponseTypeCode uint32 = 2714485246

// TypeCode generated from: "Locale"
const LocaleTypeCode uint32 = 1177338798

// TypeCode generated from: "GetLocalesResponse"
const GetLocalesResponseTypeCode uint32 = 3811314939

// TypeCode generated from: "Split"
const SplitTypeCode uint32 = 1882502421

// TypeCode generated from: "GetStockSplitsResponse"
const GetStockSplitsResponseTypeCode uint32 = 496969916

// TypeCode generated from: "Dividend"
const DividendTypeCode uint32 = 3564858207

// TypeCode generated from: "GetStockDividendsResponse"
const GetStockDividendsResponseTypeCode uint32 = 1216314708

// TypeCode generated from: "GetStockFinancialsQueryRequest"
const GetStockFinancialsQueryRequestTypeCode uint32 = 1930929812

// TypeCode generated from: "Financial"
const FinancialTypeCode uint32 = 3966838799

// TypeCode generated from: "GetStockFinancialsResponse"
const GetStockFinancialsResponseTypeCode uint32 = 3073898989

// TypeCode generated from: "GetMarketStatusResponse"
const GetMarketStatusResponseTypeCode uint32 = 1876528244

// TypeCode generated from: "MarketHoliday"
const MarketHolidayTypeCode uint32 = 2043579602

// TypeCode generated from: "GetMarketHolidaysResponse"
const GetMarketHolidaysResponseTypeCode uint32 = 30476657

// TypeCode generated from: "GetEquityExchangesQueryRequest"
const GetEquityExchangesQueryRequestTypeCode uint32 = 586709229

// TypeCode generated from: "GetEquityExchangesResponse"
const GetEquityExchangesResponseTypeCode uint32 = 1185671165

// TypeCode generated from: "GetEquityPreviousCloseQueryRequest"
const GetEquityPreviousCloseQueryRequestTypeCode uint32 = 2295285564

// TypeCode generated from: "GetEquityPreviousCloseResponse"
const GetEquityPreviousCloseResponseTypeCode uint32 = 2018853388

// TypeCode generated from: "GetEquityAggregatesBarsQueryRequest"
const GetEquityAggregatesBarsQueryRequestTypeCode uint32 = 3987611455

// TypeCode generated from: "GetEquityAggregatesBarsResponse"
const GetEquityAggregatesBarsResponseTypeCode uint32 = 931225746

// TypeCode generated from: "GetEquityGroupedDailyBarsQueryRequest"
const GetEquityGroupedDailyBarsQueryRequestTypeCode uint32 = 2263995231

// TypeCode generated from: "GetEquityGroupedDailyBarsResponse"
const GetEquityGroupedDailyBarsResponseTypeCode uint32 = 1041572740

// TypeCode generated from: "GetEquityHistoricTradesQueryRequest"
const GetEquityHistoricTradesQueryRequestTypeCode uint32 = 1669372549

// TypeCode generated from: "GetEquityHistoricTradesResponse"
const GetEquityHistoricTradesResponseTypeCode uint32 = 337484149

// TypeCode generated from: "GetEquityHistoricQuotesNBBOQueryRequest"
const GetEquityHistoricQuotesNBBOQueryRequestTypeCode uint32 = 4121462990

// TypeCode generated from: "GetEquityHistoricQuotesNBBOResponse"
const GetEquityHistoricQuotesNBBOResponseTypeCode uint32 = 3059525873

// TypeCode generated from: "GetEquityLastTradeForSymbolQueryRequest"
const GetEquityLastTradeForSymbolQueryRequestTypeCode uint32 = 1177608906

// TypeCode generated from: "GetEquityLastTradeForSymbolResponse"
const GetEquityLastTradeForSymbolResponseTypeCode uint32 = 1997368705

// TypeCode generated from: "GetEquityLastQuoteForSymbolQueryRequest"
const GetEquityLastQuoteForSymbolQueryRequestTypeCode uint32 = 648791689

// TypeCode generated from: "GetEquityLastQuoteForSymbolResponse"
const GetEquityLastQuoteForSymbolResponseTypeCode uint32 = 1608084596

// TypeCode generated from: "GetEquityDailyOpenCloseQueryRequest"
const GetEquityDailyOpenCloseQueryRequestTypeCode uint32 = 3991254987

// TypeCode generated from: "GetEquityDailyOpenCloseResponse"
const GetEquityDailyOpenCloseResponseTypeCode uint32 = 2162352726

// TypeCode generated from: "GetEquityConditionMappingsQueryRequest"
const GetEquityConditionMappingsQueryRequestTypeCode uint32 = 314319575

// TypeCode generated from: "GetEquityConditionMappingsResponse"
const GetEquityConditionMappingsResponseTypeCode uint32 = 194275432

// TypeCode generated from: "GetEquitySnapshotAllTickersQueryRequest"
const GetEquitySnapshotAllTickersQueryRequestTypeCode uint32 = 384464520

// TypeCode generated from: "GetEquitySnapshotAllTickersResponse"
const GetEquitySnapshotAllTickersResponseTypeCode uint32 = 550268567

// TypeCode generated from: "GetEquitySnapshotSingleTickerQueryRequest"
const GetEquitySnapshotSingleTickerQueryRequestTypeCode uint32 = 3170124378

// TypeCode generated from: "GetEquitySnapshotSingleTickerResponse"
const GetEquitySnapshotSingleTickerResponseTypeCode uint32 = 3558758685

// TypeCode generated from: "GetEquitySnapshotGainersLosersQueryRequest"
const GetEquitySnapshotGainersLosersQueryRequestTypeCode uint32 = 1270166694

// TypeCode generated from: "GetEquitySnapshotGainersLosersResponse"
const GetEquitySnapshotGainersLosersResponseTypeCode uint32 = 2151999867

// TypeCode generated from: "GetForexPreviousCloseQueryRequest"
const GetForexPreviousCloseQueryRequestTypeCode uint32 = 3720859128

// TypeCode generated from: "GetForexPreviousCloseResponse"
const GetForexPreviousCloseResponseTypeCode uint32 = 966615558

// TypeCode generated from: "GetForexAggregatesBarsQueryRequest"
const GetForexAggregatesBarsQueryRequestTypeCode uint32 = 1911689500

// TypeCode generated from: "GetForexAggregatesBarsResponse"
const GetForexAggregatesBarsResponseTypeCode uint32 = 3608494508

// TypeCode generated from: "GetForexGroupedDailyBarsQueryRequest"
const GetForexGroupedDailyBarsQueryRequestTypeCode uint32 = 3756004709

// TypeCode generated from: "GetForexGroupedDailyBarsResponse"
const GetForexGroupedDailyBarsResponseTypeCode uint32 = 867813427

// TypeCode generated from: "GetForexHistoricForexTicksQueryRequest"
const GetForexHistoricForexTicksQueryRequestTypeCode uint32 = 2164095087

// TypeCode generated from: "GetForexHistoricForexTicksResponse"
const GetForexHistoricForexTicksResponseTypeCode uint32 = 2646079180

// TypeCode generated from: "GetForexRealTimeCurrencyConversionQueryRequest"
const GetForexRealTimeCurrencyConversionQueryRequestTypeCode uint32 = 3702954546

// TypeCode generated from: "GetForexRealTimeCurrencyConversionResponse"
const GetForexRealTimeCurrencyConversionResponseTypeCode uint32 = 172346234

// TypeCode generated from: "GetForexLastQuoteForCurrencyPairQueryRequest"
const GetForexLastQuoteForCurrencyPairQueryRequestTypeCode uint32 = 747508528

// TypeCode generated from: "GetForexLastQuoteForCurrencyPairResponse"
const GetForexLastQuoteForCurrencyPairResponseTypeCode uint32 = 2672109588

// TypeCode generated from: "GetForexSnapshotAllTickersQueryRequest"
const GetForexSnapshotAllTickersQueryRequestTypeCode uint32 = 1095013989

// TypeCode generated from: "GetForexSnapshotAllTickersResponse"
const GetForexSnapshotAllTickersResponseTypeCode uint32 = 3163578548

// TypeCode generated from: "GetForexSnapshotGainersLosersQueryRequest"
const GetForexSnapshotGainersLosersQueryRequestTypeCode uint32 = 2241792513

// TypeCode generated from: "GetForexSnapshotGainersLosersResponse"
const GetForexSnapshotGainersLosersResponseTypeCode uint32 = 1175527695

// TypeCode generated from: "GetCryptoPreviousCloseQueryRequest"
const GetCryptoPreviousCloseQueryRequestTypeCode uint32 = 2437281117

// TypeCode generated from: "GetCryptoPreviousCloseResponse"
const GetCryptoPreviousCloseResponseTypeCode uint32 = 380116250

// TypeCode generated from: "GetCryptoAggregatesBarsQueryRequest"
const GetCryptoAggregatesBarsQueryRequestTypeCode uint32 = 3607282755

// TypeCode generated from: "GetCryptoAggregatesBarsResponse"
const GetCryptoAggregatesBarsResponseTypeCode uint32 = 3275434140

// TypeCode generated from: "GetCryptoGroupedDailyBarsQueryRequest"
const GetCryptoGroupedDailyBarsQueryRequestTypeCode uint32 = 343594069

// TypeCode generated from: "GetCryptoGroupedDailyBarsResponse"
const GetCryptoGroupedDailyBarsResponseTypeCode uint32 = 3633394450

// TypeCode generated from: "GetCryptoCryptoExchangesQueryRequest"
const GetCryptoCryptoExchangesQueryRequestTypeCode uint32 = 3050629151

// TypeCode generated from: "GetCryptoCryptoExchangesResponse"
const GetCryptoCryptoExchangesResponseTypeCode uint32 = 719735813

// TypeCode generated from: "GetCryptoLastTradeForCryptoPairQueryRequest"
const GetCryptoLastTradeForCryptoPairQueryRequestTypeCode uint32 = 526432898

// TypeCode generated from: "GetCryptoLastTradeForCryptoPairResponse"
const GetCryptoLastTradeForCryptoPairResponseTypeCode uint32 = 350239816

// TypeCode generated from: "GetCryptoDailyOpenCloseQueryRequest"
const GetCryptoDailyOpenCloseQueryRequestTypeCode uint32 = 3611913399

// TypeCode generated from: "GetCryptoDailyOpenCloseResponse"
const GetCryptoDailyOpenCloseResponseTypeCode uint32 = 1951967832

// TypeCode generated from: "GetCryptoHistoricCryptoTradesQueryRequest"
const GetCryptoHistoricCryptoTradesQueryRequestTypeCode uint32 = 3800260835

// TypeCode generated from: "GetCryptoHistoricCryptoTradesResponse"
const GetCryptoHistoricCryptoTradesResponseTypeCode uint32 = 3564403428

// TypeCode generated from: "GetCryptoSnapshotAllTickersQueryRequest"
const GetCryptoSnapshotAllTickersQueryRequestTypeCode uint32 = 1918998826

// TypeCode generated from: "GetCryptoSnapshotAllTickersResponse"
const GetCryptoSnapshotAllTickersResponseTypeCode uint32 = 442545643

// TypeCode generated from: "GetCryptoSnapshotSingleTickerQueryRequest"
const GetCryptoSnapshotSingleTickerQueryRequestTypeCode uint32 = 275777363

// TypeCode generated from: "GetCryptoSnapshotSingleTickerResponse"
const GetCryptoSnapshotSingleTickerResponseTypeCode uint32 = 1184194071

// TypeCode generated from: "GetCryptoSnapshotSingleTickerFullBookL2QueryRequest"
const GetCryptoSnapshotSingleTickerFullBookL2QueryRequestTypeCode uint32 = 2826211774

// TypeCode generated from: "GetCryptoSnapshotSingleTickerFullBookL2Response"
const GetCryptoSnapshotSingleTickerFullBookL2ResponseTypeCode uint32 = 1573981306

// TypeCode generated from: "GetCryptoSnapshotGainersLosersQueryRequest"
const GetCryptoSnapshotGainersLosersQueryRequestTypeCode uint32 = 851773511

// TypeCode generated from: "GetCryptoSnapshotGainersLosersResponse"
const GetCryptoSnapshotGainersLosersResponseTypeCode uint32 = 1610845026

// true
// true
// false
// false
type GetErrorResponseWrapper struct {
	goprotoextra.BaseMessageWrapper
	Data *GetErrorResponse
}

func (self *GetErrorResponseWrapper) Message() interface{} {
	return self.Data
}

func (self *GetErrorResponseWrapper) messageWrapper() interface{} {
	return self
}

func NewGetErrorResponseWrapper(
	data *GetErrorResponse) *GetErrorResponseWrapper {
	return &GetErrorResponseWrapper{
		BaseMessageWrapper: goprotoextra.NewBaseMessageWrapper(),
		Data:               data,
	}
}

var _ = stream.Register(
	GetErrorResponseTypeCode,
	stream.TypeCodeData{
		CreateMessage: func() proto.Message {
			return &GetErrorResponse{}
		},
		CreateWrapper: func(
			data proto.Message) (goprotoextra.IMessageWrapper, error) {
			if msg, ok := data.(*GetErrorResponse); ok {
				return NewGetErrorResponseWrapper(
					msg), nil
			}
			return nil, goerrors.InvalidParam
		}})

// true
// true
// false
// false
type GetTickerQueryRequestWrapper struct {
	goprotoextra.BaseMessageWrapper
	Data *GetTickerQueryRequest
}

func (self *GetTickerQueryRequestWrapper) Message() interface{} {
	return self.Data
}

func (self *GetTickerQueryRequestWrapper) messageWrapper() interface{} {
	return self
}

func NewGetTickerQueryRequestWrapper(
	data *GetTickerQueryRequest) *GetTickerQueryRequestWrapper {
	return &GetTickerQueryRequestWrapper{
		BaseMessageWrapper: goprotoextra.NewBaseMessageWrapper(),
		Data:               data,
	}
}

var _ = stream.Register(
	GetTickerQueryRequestTypeCode,
	stream.TypeCodeData{
		CreateMessage: func() proto.Message {
			return &GetTickerQueryRequest{}
		},
		CreateWrapper: func(
			data proto.Message) (goprotoextra.IMessageWrapper, error) {
			if msg, ok := data.(*GetTickerQueryRequest); ok {
				return NewGetTickerQueryRequestWrapper(
					msg), nil
			}
			return nil, goerrors.InvalidParam
		}})

// true
// true
// false
// false
type SymbolWrapper struct {
	goprotoextra.BaseMessageWrapper
	Data *Symbol
}

func (self *SymbolWrapper) Message() interface{} {
	return self.Data
}

func (self *SymbolWrapper) messageWrapper() interface{} {
	return self
}

func NewSymbolWrapper(
	data *Symbol) *SymbolWrapper {
	return &SymbolWrapper{
		BaseMessageWrapper: goprotoextra.NewBaseMessageWrapper(),
		Data:               data,
	}
}

var _ = stream.Register(
	SymbolTypeCode,
	stream.TypeCodeData{
		CreateMessage: func() proto.Message {
			return &Symbol{}
		},
		CreateWrapper: func(
			data proto.Message) (goprotoextra.IMessageWrapper, error) {
			if msg, ok := data.(*Symbol); ok {
				return NewSymbolWrapper(
					msg), nil
			}
			return nil, goerrors.InvalidParam
		}})

// true
// true
// false
// false
type GetTickerResponseWrapper struct {
	goprotoextra.BaseMessageWrapper
	Data *GetTickerResponse
}

func (self *GetTickerResponseWrapper) Message() interface{} {
	return self.Data
}

func (self *GetTickerResponseWrapper) messageWrapper() interface{} {
	return self
}

func NewGetTickerResponseWrapper(
	data *GetTickerResponse) *GetTickerResponseWrapper {
	return &GetTickerResponseWrapper{
		BaseMessageWrapper: goprotoextra.NewBaseMessageWrapper(),
		Data:               data,
	}
}

var _ = stream.Register(
	GetTickerResponseTypeCode,
	stream.TypeCodeData{
		CreateMessage: func() proto.Message {
			return &GetTickerResponse{}
		},
		CreateWrapper: func(
			data proto.Message) (goprotoextra.IMessageWrapper, error) {
			if msg, ok := data.(*GetTickerResponse); ok {
				return NewGetTickerResponseWrapper(
					msg), nil
			}
			return nil, goerrors.InvalidParam
		}})

// true
// true
// false
// false
type GetTickerTypesResponseWrapper struct {
	goprotoextra.BaseMessageWrapper
	Data *GetTickerTypesResponse
}

func (self *GetTickerTypesResponseWrapper) Message() interface{} {
	return self.Data
}

func (self *GetTickerTypesResponseWrapper) messageWrapper() interface{} {
	return self
}

func NewGetTickerTypesResponseWrapper(
	data *GetTickerTypesResponse) *GetTickerTypesResponseWrapper {
	return &GetTickerTypesResponseWrapper{
		BaseMessageWrapper: goprotoextra.NewBaseMessageWrapper(),
		Data:               data,
	}
}

var _ = stream.Register(
	GetTickerTypesResponseTypeCode,
	stream.TypeCodeData{
		CreateMessage: func() proto.Message {
			return &GetTickerTypesResponse{}
		},
		CreateWrapper: func(
			data proto.Message) (goprotoextra.IMessageWrapper, error) {
			if msg, ok := data.(*GetTickerTypesResponse); ok {
				return NewGetTickerTypesResponseWrapper(
					msg), nil
			}
			return nil, goerrors.InvalidParam
		}})

// true
// true
// false
// false
type GetTickerDetailsResponseWrapper struct {
	goprotoextra.BaseMessageWrapper
	Data *GetTickerDetailsResponse
}

func (self *GetTickerDetailsResponseWrapper) Message() interface{} {
	return self.Data
}

func (self *GetTickerDetailsResponseWrapper) messageWrapper() interface{} {
	return self
}

func NewGetTickerDetailsResponseWrapper(
	data *GetTickerDetailsResponse) *GetTickerDetailsResponseWrapper {
	return &GetTickerDetailsResponseWrapper{
		BaseMessageWrapper: goprotoextra.NewBaseMessageWrapper(),
		Data:               data,
	}
}

var _ = stream.Register(
	GetTickerDetailsResponseTypeCode,
	stream.TypeCodeData{
		CreateMessage: func() proto.Message {
			return &GetTickerDetailsResponse{}
		},
		CreateWrapper: func(
			data proto.Message) (goprotoextra.IMessageWrapper, error) {
			if msg, ok := data.(*GetTickerDetailsResponse); ok {
				return NewGetTickerDetailsResponseWrapper(
					msg), nil
			}
			return nil, goerrors.InvalidParam
		}})

// true
// true
// false
// false
type GetTickerNewsQueryRequestWrapper struct {
	goprotoextra.BaseMessageWrapper
	Data *GetTickerNewsQueryRequest
}

func (self *GetTickerNewsQueryRequestWrapper) Message() interface{} {
	return self.Data
}

func (self *GetTickerNewsQueryRequestWrapper) messageWrapper() interface{} {
	return self
}

func NewGetTickerNewsQueryRequestWrapper(
	data *GetTickerNewsQueryRequest) *GetTickerNewsQueryRequestWrapper {
	return &GetTickerNewsQueryRequestWrapper{
		BaseMessageWrapper: goprotoextra.NewBaseMessageWrapper(),
		Data:               data,
	}
}

var _ = stream.Register(
	GetTickerNewsQueryRequestTypeCode,
	stream.TypeCodeData{
		CreateMessage: func() proto.Message {
			return &GetTickerNewsQueryRequest{}
		},
		CreateWrapper: func(
			data proto.Message) (goprotoextra.IMessageWrapper, error) {
			if msg, ok := data.(*GetTickerNewsQueryRequest); ok {
				return NewGetTickerNewsQueryRequestWrapper(
					msg), nil
			}
			return nil, goerrors.InvalidParam
		}})

// true
// true
// false
// false
type NewsWrapper struct {
	goprotoextra.BaseMessageWrapper
	Data *News
}

func (self *NewsWrapper) Message() interface{} {
	return self.Data
}

func (self *NewsWrapper) messageWrapper() interface{} {
	return self
}

func NewNewsWrapper(
	data *News) *NewsWrapper {
	return &NewsWrapper{
		BaseMessageWrapper: goprotoextra.NewBaseMessageWrapper(),
		Data:               data,
	}
}

var _ = stream.Register(
	NewsTypeCode,
	stream.TypeCodeData{
		CreateMessage: func() proto.Message {
			return &News{}
		},
		CreateWrapper: func(
			data proto.Message) (goprotoextra.IMessageWrapper, error) {
			if msg, ok := data.(*News); ok {
				return NewNewsWrapper(
					msg), nil
			}
			return nil, goerrors.InvalidParam
		}})

// true
// true
// false
// false
type GetTickerNewsResponseWrapper struct {
	goprotoextra.BaseMessageWrapper
	Data *GetTickerNewsResponse
}

func (self *GetTickerNewsResponseWrapper) Message() interface{} {
	return self.Data
}

func (self *GetTickerNewsResponseWrapper) messageWrapper() interface{} {
	return self
}

func NewGetTickerNewsResponseWrapper(
	data *GetTickerNewsResponse) *GetTickerNewsResponseWrapper {
	return &GetTickerNewsResponseWrapper{
		BaseMessageWrapper: goprotoextra.NewBaseMessageWrapper(),
		Data:               data,
	}
}

var _ = stream.Register(
	GetTickerNewsResponseTypeCode,
	stream.TypeCodeData{
		CreateMessage: func() proto.Message {
			return &GetTickerNewsResponse{}
		},
		CreateWrapper: func(
			data proto.Message) (goprotoextra.IMessageWrapper, error) {
			if msg, ok := data.(*GetTickerNewsResponse); ok {
				return NewGetTickerNewsResponseWrapper(
					msg), nil
			}
			return nil, goerrors.InvalidParam
		}})

// true
// true
// false
// false
type MarketWrapper struct {
	goprotoextra.BaseMessageWrapper
	Data *Market
}

func (self *MarketWrapper) Message() interface{} {
	return self.Data
}

func (self *MarketWrapper) messageWrapper() interface{} {
	return self
}

func NewMarketWrapper(
	data *Market) *MarketWrapper {
	return &MarketWrapper{
		BaseMessageWrapper: goprotoextra.NewBaseMessageWrapper(),
		Data:               data,
	}
}

var _ = stream.Register(
	MarketTypeCode,
	stream.TypeCodeData{
		CreateMessage: func() proto.Message {
			return &Market{}
		},
		CreateWrapper: func(
			data proto.Message) (goprotoextra.IMessageWrapper, error) {
			if msg, ok := data.(*Market); ok {
				return NewMarketWrapper(
					msg), nil
			}
			return nil, goerrors.InvalidParam
		}})

// true
// true
// false
// false
type GetMarketsResponseWrapper struct {
	goprotoextra.BaseMessageWrapper
	Data *GetMarketsResponse
}

func (self *GetMarketsResponseWrapper) Message() interface{} {
	return self.Data
}

func (self *GetMarketsResponseWrapper) messageWrapper() interface{} {
	return self
}

func NewGetMarketsResponseWrapper(
	data *GetMarketsResponse) *GetMarketsResponseWrapper {
	return &GetMarketsResponseWrapper{
		BaseMessageWrapper: goprotoextra.NewBaseMessageWrapper(),
		Data:               data,
	}
}

var _ = stream.Register(
	GetMarketsResponseTypeCode,
	stream.TypeCodeData{
		CreateMessage: func() proto.Message {
			return &GetMarketsResponse{}
		},
		CreateWrapper: func(
			data proto.Message) (goprotoextra.IMessageWrapper, error) {
			if msg, ok := data.(*GetMarketsResponse); ok {
				return NewGetMarketsResponseWrapper(
					msg), nil
			}
			return nil, goerrors.InvalidParam
		}})

// true
// true
// false
// false
type LocaleWrapper struct {
	goprotoextra.BaseMessageWrapper
	Data *Locale
}

func (self *LocaleWrapper) Message() interface{} {
	return self.Data
}

func (self *LocaleWrapper) messageWrapper() interface{} {
	return self
}

func NewLocaleWrapper(
	data *Locale) *LocaleWrapper {
	return &LocaleWrapper{
		BaseMessageWrapper: goprotoextra.NewBaseMessageWrapper(),
		Data:               data,
	}
}

var _ = stream.Register(
	LocaleTypeCode,
	stream.TypeCodeData{
		CreateMessage: func() proto.Message {
			return &Locale{}
		},
		CreateWrapper: func(
			data proto.Message) (goprotoextra.IMessageWrapper, error) {
			if msg, ok := data.(*Locale); ok {
				return NewLocaleWrapper(
					msg), nil
			}
			return nil, goerrors.InvalidParam
		}})

// true
// true
// false
// false
type GetLocalesResponseWrapper struct {
	goprotoextra.BaseMessageWrapper
	Data *GetLocalesResponse
}

func (self *GetLocalesResponseWrapper) Message() interface{} {
	return self.Data
}

func (self *GetLocalesResponseWrapper) messageWrapper() interface{} {
	return self
}

func NewGetLocalesResponseWrapper(
	data *GetLocalesResponse) *GetLocalesResponseWrapper {
	return &GetLocalesResponseWrapper{
		BaseMessageWrapper: goprotoextra.NewBaseMessageWrapper(),
		Data:               data,
	}
}

var _ = stream.Register(
	GetLocalesResponseTypeCode,
	stream.TypeCodeData{
		CreateMessage: func() proto.Message {
			return &GetLocalesResponse{}
		},
		CreateWrapper: func(
			data proto.Message) (goprotoextra.IMessageWrapper, error) {
			if msg, ok := data.(*GetLocalesResponse); ok {
				return NewGetLocalesResponseWrapper(
					msg), nil
			}
			return nil, goerrors.InvalidParam
		}})

// true
// true
// false
// false
type SplitWrapper struct {
	goprotoextra.BaseMessageWrapper
	Data *Split
}

func (self *SplitWrapper) Message() interface{} {
	return self.Data
}

func (self *SplitWrapper) messageWrapper() interface{} {
	return self
}

func NewSplitWrapper(
	data *Split) *SplitWrapper {
	return &SplitWrapper{
		BaseMessageWrapper: goprotoextra.NewBaseMessageWrapper(),
		Data:               data,
	}
}

var _ = stream.Register(
	SplitTypeCode,
	stream.TypeCodeData{
		CreateMessage: func() proto.Message {
			return &Split{}
		},
		CreateWrapper: func(
			data proto.Message) (goprotoextra.IMessageWrapper, error) {
			if msg, ok := data.(*Split); ok {
				return NewSplitWrapper(
					msg), nil
			}
			return nil, goerrors.InvalidParam
		}})

// true
// true
// false
// false
type GetStockSplitsResponseWrapper struct {
	goprotoextra.BaseMessageWrapper
	Data *GetStockSplitsResponse
}

func (self *GetStockSplitsResponseWrapper) Message() interface{} {
	return self.Data
}

func (self *GetStockSplitsResponseWrapper) messageWrapper() interface{} {
	return self
}

func NewGetStockSplitsResponseWrapper(
	data *GetStockSplitsResponse) *GetStockSplitsResponseWrapper {
	return &GetStockSplitsResponseWrapper{
		BaseMessageWrapper: goprotoextra.NewBaseMessageWrapper(),
		Data:               data,
	}
}

var _ = stream.Register(
	GetStockSplitsResponseTypeCode,
	stream.TypeCodeData{
		CreateMessage: func() proto.Message {
			return &GetStockSplitsResponse{}
		},
		CreateWrapper: func(
			data proto.Message) (goprotoextra.IMessageWrapper, error) {
			if msg, ok := data.(*GetStockSplitsResponse); ok {
				return NewGetStockSplitsResponseWrapper(
					msg), nil
			}
			return nil, goerrors.InvalidParam
		}})

// true
// true
// false
// false
type DividendWrapper struct {
	goprotoextra.BaseMessageWrapper
	Data *Dividend
}

func (self *DividendWrapper) Message() interface{} {
	return self.Data
}

func (self *DividendWrapper) messageWrapper() interface{} {
	return self
}

func NewDividendWrapper(
	data *Dividend) *DividendWrapper {
	return &DividendWrapper{
		BaseMessageWrapper: goprotoextra.NewBaseMessageWrapper(),
		Data:               data,
	}
}

var _ = stream.Register(
	DividendTypeCode,
	stream.TypeCodeData{
		CreateMessage: func() proto.Message {
			return &Dividend{}
		},
		CreateWrapper: func(
			data proto.Message) (goprotoextra.IMessageWrapper, error) {
			if msg, ok := data.(*Dividend); ok {
				return NewDividendWrapper(
					msg), nil
			}
			return nil, goerrors.InvalidParam
		}})

// true
// true
// false
// false
type GetStockDividendsResponseWrapper struct {
	goprotoextra.BaseMessageWrapper
	Data *GetStockDividendsResponse
}

func (self *GetStockDividendsResponseWrapper) Message() interface{} {
	return self.Data
}

func (self *GetStockDividendsResponseWrapper) messageWrapper() interface{} {
	return self
}

func NewGetStockDividendsResponseWrapper(
	data *GetStockDividendsResponse) *GetStockDividendsResponseWrapper {
	return &GetStockDividendsResponseWrapper{
		BaseMessageWrapper: goprotoextra.NewBaseMessageWrapper(),
		Data:               data,
	}
}

var _ = stream.Register(
	GetStockDividendsResponseTypeCode,
	stream.TypeCodeData{
		CreateMessage: func() proto.Message {
			return &GetStockDividendsResponse{}
		},
		CreateWrapper: func(
			data proto.Message) (goprotoextra.IMessageWrapper, error) {
			if msg, ok := data.(*GetStockDividendsResponse); ok {
				return NewGetStockDividendsResponseWrapper(
					msg), nil
			}
			return nil, goerrors.InvalidParam
		}})

// true
// true
// false
// false
type GetStockFinancialsQueryRequestWrapper struct {
	goprotoextra.BaseMessageWrapper
	Data *GetStockFinancialsQueryRequest
}

func (self *GetStockFinancialsQueryRequestWrapper) Message() interface{} {
	return self.Data
}

func (self *GetStockFinancialsQueryRequestWrapper) messageWrapper() interface{} {
	return self
}

func NewGetStockFinancialsQueryRequestWrapper(
	data *GetStockFinancialsQueryRequest) *GetStockFinancialsQueryRequestWrapper {
	return &GetStockFinancialsQueryRequestWrapper{
		BaseMessageWrapper: goprotoextra.NewBaseMessageWrapper(),
		Data:               data,
	}
}

var _ = stream.Register(
	GetStockFinancialsQueryRequestTypeCode,
	stream.TypeCodeData{
		CreateMessage: func() proto.Message {
			return &GetStockFinancialsQueryRequest{}
		},
		CreateWrapper: func(
			data proto.Message) (goprotoextra.IMessageWrapper, error) {
			if msg, ok := data.(*GetStockFinancialsQueryRequest); ok {
				return NewGetStockFinancialsQueryRequestWrapper(
					msg), nil
			}
			return nil, goerrors.InvalidParam
		}})

// true
// true
// false
// false
type FinancialWrapper struct {
	goprotoextra.BaseMessageWrapper
	Data *Financial
}

func (self *FinancialWrapper) Message() interface{} {
	return self.Data
}

func (self *FinancialWrapper) messageWrapper() interface{} {
	return self
}

func NewFinancialWrapper(
	data *Financial) *FinancialWrapper {
	return &FinancialWrapper{
		BaseMessageWrapper: goprotoextra.NewBaseMessageWrapper(),
		Data:               data,
	}
}

var _ = stream.Register(
	FinancialTypeCode,
	stream.TypeCodeData{
		CreateMessage: func() proto.Message {
			return &Financial{}
		},
		CreateWrapper: func(
			data proto.Message) (goprotoextra.IMessageWrapper, error) {
			if msg, ok := data.(*Financial); ok {
				return NewFinancialWrapper(
					msg), nil
			}
			return nil, goerrors.InvalidParam
		}})

// true
// true
// false
// false
type GetStockFinancialsResponseWrapper struct {
	goprotoextra.BaseMessageWrapper
	Data *GetStockFinancialsResponse
}

func (self *GetStockFinancialsResponseWrapper) Message() interface{} {
	return self.Data
}

func (self *GetStockFinancialsResponseWrapper) messageWrapper() interface{} {
	return self
}

func NewGetStockFinancialsResponseWrapper(
	data *GetStockFinancialsResponse) *GetStockFinancialsResponseWrapper {
	return &GetStockFinancialsResponseWrapper{
		BaseMessageWrapper: goprotoextra.NewBaseMessageWrapper(),
		Data:               data,
	}
}

var _ = stream.Register(
	GetStockFinancialsResponseTypeCode,
	stream.TypeCodeData{
		CreateMessage: func() proto.Message {
			return &GetStockFinancialsResponse{}
		},
		CreateWrapper: func(
			data proto.Message) (goprotoextra.IMessageWrapper, error) {
			if msg, ok := data.(*GetStockFinancialsResponse); ok {
				return NewGetStockFinancialsResponseWrapper(
					msg), nil
			}
			return nil, goerrors.InvalidParam
		}})

// true
// true
// false
// false
type GetMarketStatusResponseWrapper struct {
	goprotoextra.BaseMessageWrapper
	Data *GetMarketStatusResponse
}

func (self *GetMarketStatusResponseWrapper) Message() interface{} {
	return self.Data
}

func (self *GetMarketStatusResponseWrapper) messageWrapper() interface{} {
	return self
}

func NewGetMarketStatusResponseWrapper(
	data *GetMarketStatusResponse) *GetMarketStatusResponseWrapper {
	return &GetMarketStatusResponseWrapper{
		BaseMessageWrapper: goprotoextra.NewBaseMessageWrapper(),
		Data:               data,
	}
}

var _ = stream.Register(
	GetMarketStatusResponseTypeCode,
	stream.TypeCodeData{
		CreateMessage: func() proto.Message {
			return &GetMarketStatusResponse{}
		},
		CreateWrapper: func(
			data proto.Message) (goprotoextra.IMessageWrapper, error) {
			if msg, ok := data.(*GetMarketStatusResponse); ok {
				return NewGetMarketStatusResponseWrapper(
					msg), nil
			}
			return nil, goerrors.InvalidParam
		}})

// true
// true
// false
// false
type MarketHolidayWrapper struct {
	goprotoextra.BaseMessageWrapper
	Data *MarketHoliday
}

func (self *MarketHolidayWrapper) Message() interface{} {
	return self.Data
}

func (self *MarketHolidayWrapper) messageWrapper() interface{} {
	return self
}

func NewMarketHolidayWrapper(
	data *MarketHoliday) *MarketHolidayWrapper {
	return &MarketHolidayWrapper{
		BaseMessageWrapper: goprotoextra.NewBaseMessageWrapper(),
		Data:               data,
	}
}

var _ = stream.Register(
	MarketHolidayTypeCode,
	stream.TypeCodeData{
		CreateMessage: func() proto.Message {
			return &MarketHoliday{}
		},
		CreateWrapper: func(
			data proto.Message) (goprotoextra.IMessageWrapper, error) {
			if msg, ok := data.(*MarketHoliday); ok {
				return NewMarketHolidayWrapper(
					msg), nil
			}
			return nil, goerrors.InvalidParam
		}})

// true
// true
// false
// false
type GetMarketHolidaysResponseWrapper struct {
	goprotoextra.BaseMessageWrapper
	Data *GetMarketHolidaysResponse
}

func (self *GetMarketHolidaysResponseWrapper) Message() interface{} {
	return self.Data
}

func (self *GetMarketHolidaysResponseWrapper) messageWrapper() interface{} {
	return self
}

func NewGetMarketHolidaysResponseWrapper(
	data *GetMarketHolidaysResponse) *GetMarketHolidaysResponseWrapper {
	return &GetMarketHolidaysResponseWrapper{
		BaseMessageWrapper: goprotoextra.NewBaseMessageWrapper(),
		Data:               data,
	}
}

var _ = stream.Register(
	GetMarketHolidaysResponseTypeCode,
	stream.TypeCodeData{
		CreateMessage: func() proto.Message {
			return &GetMarketHolidaysResponse{}
		},
		CreateWrapper: func(
			data proto.Message) (goprotoextra.IMessageWrapper, error) {
			if msg, ok := data.(*GetMarketHolidaysResponse); ok {
				return NewGetMarketHolidaysResponseWrapper(
					msg), nil
			}
			return nil, goerrors.InvalidParam
		}})

// true
// true
// false
// false
type GetEquityExchangesQueryRequestWrapper struct {
	goprotoextra.BaseMessageWrapper
	Data *GetEquityExchangesQueryRequest
}

func (self *GetEquityExchangesQueryRequestWrapper) Message() interface{} {
	return self.Data
}

func (self *GetEquityExchangesQueryRequestWrapper) messageWrapper() interface{} {
	return self
}

func NewGetEquityExchangesQueryRequestWrapper(
	data *GetEquityExchangesQueryRequest) *GetEquityExchangesQueryRequestWrapper {
	return &GetEquityExchangesQueryRequestWrapper{
		BaseMessageWrapper: goprotoextra.NewBaseMessageWrapper(),
		Data:               data,
	}
}

var _ = stream.Register(
	GetEquityExchangesQueryRequestTypeCode,
	stream.TypeCodeData{
		CreateMessage: func() proto.Message {
			return &GetEquityExchangesQueryRequest{}
		},
		CreateWrapper: func(
			data proto.Message) (goprotoextra.IMessageWrapper, error) {
			if msg, ok := data.(*GetEquityExchangesQueryRequest); ok {
				return NewGetEquityExchangesQueryRequestWrapper(
					msg), nil
			}
			return nil, goerrors.InvalidParam
		}})

// true
// true
// false
// false
type GetEquityExchangesResponseWrapper struct {
	goprotoextra.BaseMessageWrapper
	Data *GetEquityExchangesResponse
}

func (self *GetEquityExchangesResponseWrapper) Message() interface{} {
	return self.Data
}

func (self *GetEquityExchangesResponseWrapper) messageWrapper() interface{} {
	return self
}

func NewGetEquityExchangesResponseWrapper(
	data *GetEquityExchangesResponse) *GetEquityExchangesResponseWrapper {
	return &GetEquityExchangesResponseWrapper{
		BaseMessageWrapper: goprotoextra.NewBaseMessageWrapper(),
		Data:               data,
	}
}

var _ = stream.Register(
	GetEquityExchangesResponseTypeCode,
	stream.TypeCodeData{
		CreateMessage: func() proto.Message {
			return &GetEquityExchangesResponse{}
		},
		CreateWrapper: func(
			data proto.Message) (goprotoextra.IMessageWrapper, error) {
			if msg, ok := data.(*GetEquityExchangesResponse); ok {
				return NewGetEquityExchangesResponseWrapper(
					msg), nil
			}
			return nil, goerrors.InvalidParam
		}})

// true
// true
// false
// false
type GetEquityPreviousCloseQueryRequestWrapper struct {
	goprotoextra.BaseMessageWrapper
	Data *GetEquityPreviousCloseQueryRequest
}

func (self *GetEquityPreviousCloseQueryRequestWrapper) Message() interface{} {
	return self.Data
}

func (self *GetEquityPreviousCloseQueryRequestWrapper) messageWrapper() interface{} {
	return self
}

func NewGetEquityPreviousCloseQueryRequestWrapper(
	data *GetEquityPreviousCloseQueryRequest) *GetEquityPreviousCloseQueryRequestWrapper {
	return &GetEquityPreviousCloseQueryRequestWrapper{
		BaseMessageWrapper: goprotoextra.NewBaseMessageWrapper(),
		Data:               data,
	}
}

var _ = stream.Register(
	GetEquityPreviousCloseQueryRequestTypeCode,
	stream.TypeCodeData{
		CreateMessage: func() proto.Message {
			return &GetEquityPreviousCloseQueryRequest{}
		},
		CreateWrapper: func(
			data proto.Message) (goprotoextra.IMessageWrapper, error) {
			if msg, ok := data.(*GetEquityPreviousCloseQueryRequest); ok {
				return NewGetEquityPreviousCloseQueryRequestWrapper(
					msg), nil
			}
			return nil, goerrors.InvalidParam
		}})

// true
// true
// false
// false
type GetEquityPreviousCloseResponseWrapper struct {
	goprotoextra.BaseMessageWrapper
	Data *GetEquityPreviousCloseResponse
}

func (self *GetEquityPreviousCloseResponseWrapper) Message() interface{} {
	return self.Data
}

func (self *GetEquityPreviousCloseResponseWrapper) messageWrapper() interface{} {
	return self
}

func NewGetEquityPreviousCloseResponseWrapper(
	data *GetEquityPreviousCloseResponse) *GetEquityPreviousCloseResponseWrapper {
	return &GetEquityPreviousCloseResponseWrapper{
		BaseMessageWrapper: goprotoextra.NewBaseMessageWrapper(),
		Data:               data,
	}
}

var _ = stream.Register(
	GetEquityPreviousCloseResponseTypeCode,
	stream.TypeCodeData{
		CreateMessage: func() proto.Message {
			return &GetEquityPreviousCloseResponse{}
		},
		CreateWrapper: func(
			data proto.Message) (goprotoextra.IMessageWrapper, error) {
			if msg, ok := data.(*GetEquityPreviousCloseResponse); ok {
				return NewGetEquityPreviousCloseResponseWrapper(
					msg), nil
			}
			return nil, goerrors.InvalidParam
		}})

// true
// true
// false
// false
type GetEquityAggregatesBarsQueryRequestWrapper struct {
	goprotoextra.BaseMessageWrapper
	Data *GetEquityAggregatesBarsQueryRequest
}

func (self *GetEquityAggregatesBarsQueryRequestWrapper) Message() interface{} {
	return self.Data
}

func (self *GetEquityAggregatesBarsQueryRequestWrapper) messageWrapper() interface{} {
	return self
}

func NewGetEquityAggregatesBarsQueryRequestWrapper(
	data *GetEquityAggregatesBarsQueryRequest) *GetEquityAggregatesBarsQueryRequestWrapper {
	return &GetEquityAggregatesBarsQueryRequestWrapper{
		BaseMessageWrapper: goprotoextra.NewBaseMessageWrapper(),
		Data:               data,
	}
}

var _ = stream.Register(
	GetEquityAggregatesBarsQueryRequestTypeCode,
	stream.TypeCodeData{
		CreateMessage: func() proto.Message {
			return &GetEquityAggregatesBarsQueryRequest{}
		},
		CreateWrapper: func(
			data proto.Message) (goprotoextra.IMessageWrapper, error) {
			if msg, ok := data.(*GetEquityAggregatesBarsQueryRequest); ok {
				return NewGetEquityAggregatesBarsQueryRequestWrapper(
					msg), nil
			}
			return nil, goerrors.InvalidParam
		}})

// true
// true
// false
// false
type GetEquityAggregatesBarsResponseWrapper struct {
	goprotoextra.BaseMessageWrapper
	Data *GetEquityAggregatesBarsResponse
}

func (self *GetEquityAggregatesBarsResponseWrapper) Message() interface{} {
	return self.Data
}

func (self *GetEquityAggregatesBarsResponseWrapper) messageWrapper() interface{} {
	return self
}

func NewGetEquityAggregatesBarsResponseWrapper(
	data *GetEquityAggregatesBarsResponse) *GetEquityAggregatesBarsResponseWrapper {
	return &GetEquityAggregatesBarsResponseWrapper{
		BaseMessageWrapper: goprotoextra.NewBaseMessageWrapper(),
		Data:               data,
	}
}

var _ = stream.Register(
	GetEquityAggregatesBarsResponseTypeCode,
	stream.TypeCodeData{
		CreateMessage: func() proto.Message {
			return &GetEquityAggregatesBarsResponse{}
		},
		CreateWrapper: func(
			data proto.Message) (goprotoextra.IMessageWrapper, error) {
			if msg, ok := data.(*GetEquityAggregatesBarsResponse); ok {
				return NewGetEquityAggregatesBarsResponseWrapper(
					msg), nil
			}
			return nil, goerrors.InvalidParam
		}})

// true
// true
// false
// false
type GetEquityGroupedDailyBarsQueryRequestWrapper struct {
	goprotoextra.BaseMessageWrapper
	Data *GetEquityGroupedDailyBarsQueryRequest
}

func (self *GetEquityGroupedDailyBarsQueryRequestWrapper) Message() interface{} {
	return self.Data
}

func (self *GetEquityGroupedDailyBarsQueryRequestWrapper) messageWrapper() interface{} {
	return self
}

func NewGetEquityGroupedDailyBarsQueryRequestWrapper(
	data *GetEquityGroupedDailyBarsQueryRequest) *GetEquityGroupedDailyBarsQueryRequestWrapper {
	return &GetEquityGroupedDailyBarsQueryRequestWrapper{
		BaseMessageWrapper: goprotoextra.NewBaseMessageWrapper(),
		Data:               data,
	}
}

var _ = stream.Register(
	GetEquityGroupedDailyBarsQueryRequestTypeCode,
	stream.TypeCodeData{
		CreateMessage: func() proto.Message {
			return &GetEquityGroupedDailyBarsQueryRequest{}
		},
		CreateWrapper: func(
			data proto.Message) (goprotoextra.IMessageWrapper, error) {
			if msg, ok := data.(*GetEquityGroupedDailyBarsQueryRequest); ok {
				return NewGetEquityGroupedDailyBarsQueryRequestWrapper(
					msg), nil
			}
			return nil, goerrors.InvalidParam
		}})

// true
// true
// false
// false
type GetEquityGroupedDailyBarsResponseWrapper struct {
	goprotoextra.BaseMessageWrapper
	Data *GetEquityGroupedDailyBarsResponse
}

func (self *GetEquityGroupedDailyBarsResponseWrapper) Message() interface{} {
	return self.Data
}

func (self *GetEquityGroupedDailyBarsResponseWrapper) messageWrapper() interface{} {
	return self
}

func NewGetEquityGroupedDailyBarsResponseWrapper(
	data *GetEquityGroupedDailyBarsResponse) *GetEquityGroupedDailyBarsResponseWrapper {
	return &GetEquityGroupedDailyBarsResponseWrapper{
		BaseMessageWrapper: goprotoextra.NewBaseMessageWrapper(),
		Data:               data,
	}
}

var _ = stream.Register(
	GetEquityGroupedDailyBarsResponseTypeCode,
	stream.TypeCodeData{
		CreateMessage: func() proto.Message {
			return &GetEquityGroupedDailyBarsResponse{}
		},
		CreateWrapper: func(
			data proto.Message) (goprotoextra.IMessageWrapper, error) {
			if msg, ok := data.(*GetEquityGroupedDailyBarsResponse); ok {
				return NewGetEquityGroupedDailyBarsResponseWrapper(
					msg), nil
			}
			return nil, goerrors.InvalidParam
		}})

// true
// true
// false
// false
type GetEquityHistoricTradesQueryRequestWrapper struct {
	goprotoextra.BaseMessageWrapper
	Data *GetEquityHistoricTradesQueryRequest
}

func (self *GetEquityHistoricTradesQueryRequestWrapper) Message() interface{} {
	return self.Data
}

func (self *GetEquityHistoricTradesQueryRequestWrapper) messageWrapper() interface{} {
	return self
}

func NewGetEquityHistoricTradesQueryRequestWrapper(
	data *GetEquityHistoricTradesQueryRequest) *GetEquityHistoricTradesQueryRequestWrapper {
	return &GetEquityHistoricTradesQueryRequestWrapper{
		BaseMessageWrapper: goprotoextra.NewBaseMessageWrapper(),
		Data:               data,
	}
}

var _ = stream.Register(
	GetEquityHistoricTradesQueryRequestTypeCode,
	stream.TypeCodeData{
		CreateMessage: func() proto.Message {
			return &GetEquityHistoricTradesQueryRequest{}
		},
		CreateWrapper: func(
			data proto.Message) (goprotoextra.IMessageWrapper, error) {
			if msg, ok := data.(*GetEquityHistoricTradesQueryRequest); ok {
				return NewGetEquityHistoricTradesQueryRequestWrapper(
					msg), nil
			}
			return nil, goerrors.InvalidParam
		}})

// true
// true
// false
// false
type GetEquityHistoricTradesResponseWrapper struct {
	goprotoextra.BaseMessageWrapper
	Data *GetEquityHistoricTradesResponse
}

func (self *GetEquityHistoricTradesResponseWrapper) Message() interface{} {
	return self.Data
}

func (self *GetEquityHistoricTradesResponseWrapper) messageWrapper() interface{} {
	return self
}

func NewGetEquityHistoricTradesResponseWrapper(
	data *GetEquityHistoricTradesResponse) *GetEquityHistoricTradesResponseWrapper {
	return &GetEquityHistoricTradesResponseWrapper{
		BaseMessageWrapper: goprotoextra.NewBaseMessageWrapper(),
		Data:               data,
	}
}

var _ = stream.Register(
	GetEquityHistoricTradesResponseTypeCode,
	stream.TypeCodeData{
		CreateMessage: func() proto.Message {
			return &GetEquityHistoricTradesResponse{}
		},
		CreateWrapper: func(
			data proto.Message) (goprotoextra.IMessageWrapper, error) {
			if msg, ok := data.(*GetEquityHistoricTradesResponse); ok {
				return NewGetEquityHistoricTradesResponseWrapper(
					msg), nil
			}
			return nil, goerrors.InvalidParam
		}})

// true
// true
// false
// false
type GetEquityHistoricQuotesNBBOQueryRequestWrapper struct {
	goprotoextra.BaseMessageWrapper
	Data *GetEquityHistoricQuotesNBBOQueryRequest
}

func (self *GetEquityHistoricQuotesNBBOQueryRequestWrapper) Message() interface{} {
	return self.Data
}

func (self *GetEquityHistoricQuotesNBBOQueryRequestWrapper) messageWrapper() interface{} {
	return self
}

func NewGetEquityHistoricQuotesNBBOQueryRequestWrapper(
	data *GetEquityHistoricQuotesNBBOQueryRequest) *GetEquityHistoricQuotesNBBOQueryRequestWrapper {
	return &GetEquityHistoricQuotesNBBOQueryRequestWrapper{
		BaseMessageWrapper: goprotoextra.NewBaseMessageWrapper(),
		Data:               data,
	}
}

var _ = stream.Register(
	GetEquityHistoricQuotesNBBOQueryRequestTypeCode,
	stream.TypeCodeData{
		CreateMessage: func() proto.Message {
			return &GetEquityHistoricQuotesNBBOQueryRequest{}
		},
		CreateWrapper: func(
			data proto.Message) (goprotoextra.IMessageWrapper, error) {
			if msg, ok := data.(*GetEquityHistoricQuotesNBBOQueryRequest); ok {
				return NewGetEquityHistoricQuotesNBBOQueryRequestWrapper(
					msg), nil
			}
			return nil, goerrors.InvalidParam
		}})

// true
// true
// false
// false
type GetEquityHistoricQuotesNBBOResponseWrapper struct {
	goprotoextra.BaseMessageWrapper
	Data *GetEquityHistoricQuotesNBBOResponse
}

func (self *GetEquityHistoricQuotesNBBOResponseWrapper) Message() interface{} {
	return self.Data
}

func (self *GetEquityHistoricQuotesNBBOResponseWrapper) messageWrapper() interface{} {
	return self
}

func NewGetEquityHistoricQuotesNBBOResponseWrapper(
	data *GetEquityHistoricQuotesNBBOResponse) *GetEquityHistoricQuotesNBBOResponseWrapper {
	return &GetEquityHistoricQuotesNBBOResponseWrapper{
		BaseMessageWrapper: goprotoextra.NewBaseMessageWrapper(),
		Data:               data,
	}
}

var _ = stream.Register(
	GetEquityHistoricQuotesNBBOResponseTypeCode,
	stream.TypeCodeData{
		CreateMessage: func() proto.Message {
			return &GetEquityHistoricQuotesNBBOResponse{}
		},
		CreateWrapper: func(
			data proto.Message) (goprotoextra.IMessageWrapper, error) {
			if msg, ok := data.(*GetEquityHistoricQuotesNBBOResponse); ok {
				return NewGetEquityHistoricQuotesNBBOResponseWrapper(
					msg), nil
			}
			return nil, goerrors.InvalidParam
		}})

// true
// true
// false
// false
type GetEquityLastTradeForSymbolQueryRequestWrapper struct {
	goprotoextra.BaseMessageWrapper
	Data *GetEquityLastTradeForSymbolQueryRequest
}

func (self *GetEquityLastTradeForSymbolQueryRequestWrapper) Message() interface{} {
	return self.Data
}

func (self *GetEquityLastTradeForSymbolQueryRequestWrapper) messageWrapper() interface{} {
	return self
}

func NewGetEquityLastTradeForSymbolQueryRequestWrapper(
	data *GetEquityLastTradeForSymbolQueryRequest) *GetEquityLastTradeForSymbolQueryRequestWrapper {
	return &GetEquityLastTradeForSymbolQueryRequestWrapper{
		BaseMessageWrapper: goprotoextra.NewBaseMessageWrapper(),
		Data:               data,
	}
}

var _ = stream.Register(
	GetEquityLastTradeForSymbolQueryRequestTypeCode,
	stream.TypeCodeData{
		CreateMessage: func() proto.Message {
			return &GetEquityLastTradeForSymbolQueryRequest{}
		},
		CreateWrapper: func(
			data proto.Message) (goprotoextra.IMessageWrapper, error) {
			if msg, ok := data.(*GetEquityLastTradeForSymbolQueryRequest); ok {
				return NewGetEquityLastTradeForSymbolQueryRequestWrapper(
					msg), nil
			}
			return nil, goerrors.InvalidParam
		}})

// true
// true
// false
// false
type GetEquityLastTradeForSymbolResponseWrapper struct {
	goprotoextra.BaseMessageWrapper
	Data *GetEquityLastTradeForSymbolResponse
}

func (self *GetEquityLastTradeForSymbolResponseWrapper) Message() interface{} {
	return self.Data
}

func (self *GetEquityLastTradeForSymbolResponseWrapper) messageWrapper() interface{} {
	return self
}

func NewGetEquityLastTradeForSymbolResponseWrapper(
	data *GetEquityLastTradeForSymbolResponse) *GetEquityLastTradeForSymbolResponseWrapper {
	return &GetEquityLastTradeForSymbolResponseWrapper{
		BaseMessageWrapper: goprotoextra.NewBaseMessageWrapper(),
		Data:               data,
	}
}

var _ = stream.Register(
	GetEquityLastTradeForSymbolResponseTypeCode,
	stream.TypeCodeData{
		CreateMessage: func() proto.Message {
			return &GetEquityLastTradeForSymbolResponse{}
		},
		CreateWrapper: func(
			data proto.Message) (goprotoextra.IMessageWrapper, error) {
			if msg, ok := data.(*GetEquityLastTradeForSymbolResponse); ok {
				return NewGetEquityLastTradeForSymbolResponseWrapper(
					msg), nil
			}
			return nil, goerrors.InvalidParam
		}})

// true
// true
// false
// false
type GetEquityLastQuoteForSymbolQueryRequestWrapper struct {
	goprotoextra.BaseMessageWrapper
	Data *GetEquityLastQuoteForSymbolQueryRequest
}

func (self *GetEquityLastQuoteForSymbolQueryRequestWrapper) Message() interface{} {
	return self.Data
}

func (self *GetEquityLastQuoteForSymbolQueryRequestWrapper) messageWrapper() interface{} {
	return self
}

func NewGetEquityLastQuoteForSymbolQueryRequestWrapper(
	data *GetEquityLastQuoteForSymbolQueryRequest) *GetEquityLastQuoteForSymbolQueryRequestWrapper {
	return &GetEquityLastQuoteForSymbolQueryRequestWrapper{
		BaseMessageWrapper: goprotoextra.NewBaseMessageWrapper(),
		Data:               data,
	}
}

var _ = stream.Register(
	GetEquityLastQuoteForSymbolQueryRequestTypeCode,
	stream.TypeCodeData{
		CreateMessage: func() proto.Message {
			return &GetEquityLastQuoteForSymbolQueryRequest{}
		},
		CreateWrapper: func(
			data proto.Message) (goprotoextra.IMessageWrapper, error) {
			if msg, ok := data.(*GetEquityLastQuoteForSymbolQueryRequest); ok {
				return NewGetEquityLastQuoteForSymbolQueryRequestWrapper(
					msg), nil
			}
			return nil, goerrors.InvalidParam
		}})

// true
// true
// false
// false
type GetEquityLastQuoteForSymbolResponseWrapper struct {
	goprotoextra.BaseMessageWrapper
	Data *GetEquityLastQuoteForSymbolResponse
}

func (self *GetEquityLastQuoteForSymbolResponseWrapper) Message() interface{} {
	return self.Data
}

func (self *GetEquityLastQuoteForSymbolResponseWrapper) messageWrapper() interface{} {
	return self
}

func NewGetEquityLastQuoteForSymbolResponseWrapper(
	data *GetEquityLastQuoteForSymbolResponse) *GetEquityLastQuoteForSymbolResponseWrapper {
	return &GetEquityLastQuoteForSymbolResponseWrapper{
		BaseMessageWrapper: goprotoextra.NewBaseMessageWrapper(),
		Data:               data,
	}
}

var _ = stream.Register(
	GetEquityLastQuoteForSymbolResponseTypeCode,
	stream.TypeCodeData{
		CreateMessage: func() proto.Message {
			return &GetEquityLastQuoteForSymbolResponse{}
		},
		CreateWrapper: func(
			data proto.Message) (goprotoextra.IMessageWrapper, error) {
			if msg, ok := data.(*GetEquityLastQuoteForSymbolResponse); ok {
				return NewGetEquityLastQuoteForSymbolResponseWrapper(
					msg), nil
			}
			return nil, goerrors.InvalidParam
		}})

// true
// true
// false
// false
type GetEquityDailyOpenCloseQueryRequestWrapper struct {
	goprotoextra.BaseMessageWrapper
	Data *GetEquityDailyOpenCloseQueryRequest
}

func (self *GetEquityDailyOpenCloseQueryRequestWrapper) Message() interface{} {
	return self.Data
}

func (self *GetEquityDailyOpenCloseQueryRequestWrapper) messageWrapper() interface{} {
	return self
}

func NewGetEquityDailyOpenCloseQueryRequestWrapper(
	data *GetEquityDailyOpenCloseQueryRequest) *GetEquityDailyOpenCloseQueryRequestWrapper {
	return &GetEquityDailyOpenCloseQueryRequestWrapper{
		BaseMessageWrapper: goprotoextra.NewBaseMessageWrapper(),
		Data:               data,
	}
}

var _ = stream.Register(
	GetEquityDailyOpenCloseQueryRequestTypeCode,
	stream.TypeCodeData{
		CreateMessage: func() proto.Message {
			return &GetEquityDailyOpenCloseQueryRequest{}
		},
		CreateWrapper: func(
			data proto.Message) (goprotoextra.IMessageWrapper, error) {
			if msg, ok := data.(*GetEquityDailyOpenCloseQueryRequest); ok {
				return NewGetEquityDailyOpenCloseQueryRequestWrapper(
					msg), nil
			}
			return nil, goerrors.InvalidParam
		}})

// true
// true
// false
// false
type GetEquityDailyOpenCloseResponseWrapper struct {
	goprotoextra.BaseMessageWrapper
	Data *GetEquityDailyOpenCloseResponse
}

func (self *GetEquityDailyOpenCloseResponseWrapper) Message() interface{} {
	return self.Data
}

func (self *GetEquityDailyOpenCloseResponseWrapper) messageWrapper() interface{} {
	return self
}

func NewGetEquityDailyOpenCloseResponseWrapper(
	data *GetEquityDailyOpenCloseResponse) *GetEquityDailyOpenCloseResponseWrapper {
	return &GetEquityDailyOpenCloseResponseWrapper{
		BaseMessageWrapper: goprotoextra.NewBaseMessageWrapper(),
		Data:               data,
	}
}

var _ = stream.Register(
	GetEquityDailyOpenCloseResponseTypeCode,
	stream.TypeCodeData{
		CreateMessage: func() proto.Message {
			return &GetEquityDailyOpenCloseResponse{}
		},
		CreateWrapper: func(
			data proto.Message) (goprotoextra.IMessageWrapper, error) {
			if msg, ok := data.(*GetEquityDailyOpenCloseResponse); ok {
				return NewGetEquityDailyOpenCloseResponseWrapper(
					msg), nil
			}
			return nil, goerrors.InvalidParam
		}})

// true
// true
// false
// false
type GetEquityConditionMappingsQueryRequestWrapper struct {
	goprotoextra.BaseMessageWrapper
	Data *GetEquityConditionMappingsQueryRequest
}

func (self *GetEquityConditionMappingsQueryRequestWrapper) Message() interface{} {
	return self.Data
}

func (self *GetEquityConditionMappingsQueryRequestWrapper) messageWrapper() interface{} {
	return self
}

func NewGetEquityConditionMappingsQueryRequestWrapper(
	data *GetEquityConditionMappingsQueryRequest) *GetEquityConditionMappingsQueryRequestWrapper {
	return &GetEquityConditionMappingsQueryRequestWrapper{
		BaseMessageWrapper: goprotoextra.NewBaseMessageWrapper(),
		Data:               data,
	}
}

var _ = stream.Register(
	GetEquityConditionMappingsQueryRequestTypeCode,
	stream.TypeCodeData{
		CreateMessage: func() proto.Message {
			return &GetEquityConditionMappingsQueryRequest{}
		},
		CreateWrapper: func(
			data proto.Message) (goprotoextra.IMessageWrapper, error) {
			if msg, ok := data.(*GetEquityConditionMappingsQueryRequest); ok {
				return NewGetEquityConditionMappingsQueryRequestWrapper(
					msg), nil
			}
			return nil, goerrors.InvalidParam
		}})

// true
// true
// false
// false
type GetEquityConditionMappingsResponseWrapper struct {
	goprotoextra.BaseMessageWrapper
	Data *GetEquityConditionMappingsResponse
}

func (self *GetEquityConditionMappingsResponseWrapper) Message() interface{} {
	return self.Data
}

func (self *GetEquityConditionMappingsResponseWrapper) messageWrapper() interface{} {
	return self
}

func NewGetEquityConditionMappingsResponseWrapper(
	data *GetEquityConditionMappingsResponse) *GetEquityConditionMappingsResponseWrapper {
	return &GetEquityConditionMappingsResponseWrapper{
		BaseMessageWrapper: goprotoextra.NewBaseMessageWrapper(),
		Data:               data,
	}
}

var _ = stream.Register(
	GetEquityConditionMappingsResponseTypeCode,
	stream.TypeCodeData{
		CreateMessage: func() proto.Message {
			return &GetEquityConditionMappingsResponse{}
		},
		CreateWrapper: func(
			data proto.Message) (goprotoextra.IMessageWrapper, error) {
			if msg, ok := data.(*GetEquityConditionMappingsResponse); ok {
				return NewGetEquityConditionMappingsResponseWrapper(
					msg), nil
			}
			return nil, goerrors.InvalidParam
		}})

// true
// true
// false
// false
type GetEquitySnapshotAllTickersQueryRequestWrapper struct {
	goprotoextra.BaseMessageWrapper
	Data *GetEquitySnapshotAllTickersQueryRequest
}

func (self *GetEquitySnapshotAllTickersQueryRequestWrapper) Message() interface{} {
	return self.Data
}

func (self *GetEquitySnapshotAllTickersQueryRequestWrapper) messageWrapper() interface{} {
	return self
}

func NewGetEquitySnapshotAllTickersQueryRequestWrapper(
	data *GetEquitySnapshotAllTickersQueryRequest) *GetEquitySnapshotAllTickersQueryRequestWrapper {
	return &GetEquitySnapshotAllTickersQueryRequestWrapper{
		BaseMessageWrapper: goprotoextra.NewBaseMessageWrapper(),
		Data:               data,
	}
}

var _ = stream.Register(
	GetEquitySnapshotAllTickersQueryRequestTypeCode,
	stream.TypeCodeData{
		CreateMessage: func() proto.Message {
			return &GetEquitySnapshotAllTickersQueryRequest{}
		},
		CreateWrapper: func(
			data proto.Message) (goprotoextra.IMessageWrapper, error) {
			if msg, ok := data.(*GetEquitySnapshotAllTickersQueryRequest); ok {
				return NewGetEquitySnapshotAllTickersQueryRequestWrapper(
					msg), nil
			}
			return nil, goerrors.InvalidParam
		}})

// true
// true
// false
// false
type GetEquitySnapshotAllTickersResponseWrapper struct {
	goprotoextra.BaseMessageWrapper
	Data *GetEquitySnapshotAllTickersResponse
}

func (self *GetEquitySnapshotAllTickersResponseWrapper) Message() interface{} {
	return self.Data
}

func (self *GetEquitySnapshotAllTickersResponseWrapper) messageWrapper() interface{} {
	return self
}

func NewGetEquitySnapshotAllTickersResponseWrapper(
	data *GetEquitySnapshotAllTickersResponse) *GetEquitySnapshotAllTickersResponseWrapper {
	return &GetEquitySnapshotAllTickersResponseWrapper{
		BaseMessageWrapper: goprotoextra.NewBaseMessageWrapper(),
		Data:               data,
	}
}

var _ = stream.Register(
	GetEquitySnapshotAllTickersResponseTypeCode,
	stream.TypeCodeData{
		CreateMessage: func() proto.Message {
			return &GetEquitySnapshotAllTickersResponse{}
		},
		CreateWrapper: func(
			data proto.Message) (goprotoextra.IMessageWrapper, error) {
			if msg, ok := data.(*GetEquitySnapshotAllTickersResponse); ok {
				return NewGetEquitySnapshotAllTickersResponseWrapper(
					msg), nil
			}
			return nil, goerrors.InvalidParam
		}})

// true
// true
// false
// false
type GetEquitySnapshotSingleTickerQueryRequestWrapper struct {
	goprotoextra.BaseMessageWrapper
	Data *GetEquitySnapshotSingleTickerQueryRequest
}

func (self *GetEquitySnapshotSingleTickerQueryRequestWrapper) Message() interface{} {
	return self.Data
}

func (self *GetEquitySnapshotSingleTickerQueryRequestWrapper) messageWrapper() interface{} {
	return self
}

func NewGetEquitySnapshotSingleTickerQueryRequestWrapper(
	data *GetEquitySnapshotSingleTickerQueryRequest) *GetEquitySnapshotSingleTickerQueryRequestWrapper {
	return &GetEquitySnapshotSingleTickerQueryRequestWrapper{
		BaseMessageWrapper: goprotoextra.NewBaseMessageWrapper(),
		Data:               data,
	}
}

var _ = stream.Register(
	GetEquitySnapshotSingleTickerQueryRequestTypeCode,
	stream.TypeCodeData{
		CreateMessage: func() proto.Message {
			return &GetEquitySnapshotSingleTickerQueryRequest{}
		},
		CreateWrapper: func(
			data proto.Message) (goprotoextra.IMessageWrapper, error) {
			if msg, ok := data.(*GetEquitySnapshotSingleTickerQueryRequest); ok {
				return NewGetEquitySnapshotSingleTickerQueryRequestWrapper(
					msg), nil
			}
			return nil, goerrors.InvalidParam
		}})

// true
// true
// false
// false
type GetEquitySnapshotSingleTickerResponseWrapper struct {
	goprotoextra.BaseMessageWrapper
	Data *GetEquitySnapshotSingleTickerResponse
}

func (self *GetEquitySnapshotSingleTickerResponseWrapper) Message() interface{} {
	return self.Data
}

func (self *GetEquitySnapshotSingleTickerResponseWrapper) messageWrapper() interface{} {
	return self
}

func NewGetEquitySnapshotSingleTickerResponseWrapper(
	data *GetEquitySnapshotSingleTickerResponse) *GetEquitySnapshotSingleTickerResponseWrapper {
	return &GetEquitySnapshotSingleTickerResponseWrapper{
		BaseMessageWrapper: goprotoextra.NewBaseMessageWrapper(),
		Data:               data,
	}
}

var _ = stream.Register(
	GetEquitySnapshotSingleTickerResponseTypeCode,
	stream.TypeCodeData{
		CreateMessage: func() proto.Message {
			return &GetEquitySnapshotSingleTickerResponse{}
		},
		CreateWrapper: func(
			data proto.Message) (goprotoextra.IMessageWrapper, error) {
			if msg, ok := data.(*GetEquitySnapshotSingleTickerResponse); ok {
				return NewGetEquitySnapshotSingleTickerResponseWrapper(
					msg), nil
			}
			return nil, goerrors.InvalidParam
		}})

// true
// true
// false
// false
type GetEquitySnapshotGainersLosersQueryRequestWrapper struct {
	goprotoextra.BaseMessageWrapper
	Data *GetEquitySnapshotGainersLosersQueryRequest
}

func (self *GetEquitySnapshotGainersLosersQueryRequestWrapper) Message() interface{} {
	return self.Data
}

func (self *GetEquitySnapshotGainersLosersQueryRequestWrapper) messageWrapper() interface{} {
	return self
}

func NewGetEquitySnapshotGainersLosersQueryRequestWrapper(
	data *GetEquitySnapshotGainersLosersQueryRequest) *GetEquitySnapshotGainersLosersQueryRequestWrapper {
	return &GetEquitySnapshotGainersLosersQueryRequestWrapper{
		BaseMessageWrapper: goprotoextra.NewBaseMessageWrapper(),
		Data:               data,
	}
}

var _ = stream.Register(
	GetEquitySnapshotGainersLosersQueryRequestTypeCode,
	stream.TypeCodeData{
		CreateMessage: func() proto.Message {
			return &GetEquitySnapshotGainersLosersQueryRequest{}
		},
		CreateWrapper: func(
			data proto.Message) (goprotoextra.IMessageWrapper, error) {
			if msg, ok := data.(*GetEquitySnapshotGainersLosersQueryRequest); ok {
				return NewGetEquitySnapshotGainersLosersQueryRequestWrapper(
					msg), nil
			}
			return nil, goerrors.InvalidParam
		}})

// true
// true
// false
// false
type GetEquitySnapshotGainersLosersResponseWrapper struct {
	goprotoextra.BaseMessageWrapper
	Data *GetEquitySnapshotGainersLosersResponse
}

func (self *GetEquitySnapshotGainersLosersResponseWrapper) Message() interface{} {
	return self.Data
}

func (self *GetEquitySnapshotGainersLosersResponseWrapper) messageWrapper() interface{} {
	return self
}

func NewGetEquitySnapshotGainersLosersResponseWrapper(
	data *GetEquitySnapshotGainersLosersResponse) *GetEquitySnapshotGainersLosersResponseWrapper {
	return &GetEquitySnapshotGainersLosersResponseWrapper{
		BaseMessageWrapper: goprotoextra.NewBaseMessageWrapper(),
		Data:               data,
	}
}

var _ = stream.Register(
	GetEquitySnapshotGainersLosersResponseTypeCode,
	stream.TypeCodeData{
		CreateMessage: func() proto.Message {
			return &GetEquitySnapshotGainersLosersResponse{}
		},
		CreateWrapper: func(
			data proto.Message) (goprotoextra.IMessageWrapper, error) {
			if msg, ok := data.(*GetEquitySnapshotGainersLosersResponse); ok {
				return NewGetEquitySnapshotGainersLosersResponseWrapper(
					msg), nil
			}
			return nil, goerrors.InvalidParam
		}})

// true
// true
// false
// false
type GetForexPreviousCloseQueryRequestWrapper struct {
	goprotoextra.BaseMessageWrapper
	Data *GetForexPreviousCloseQueryRequest
}

func (self *GetForexPreviousCloseQueryRequestWrapper) Message() interface{} {
	return self.Data
}

func (self *GetForexPreviousCloseQueryRequestWrapper) messageWrapper() interface{} {
	return self
}

func NewGetForexPreviousCloseQueryRequestWrapper(
	data *GetForexPreviousCloseQueryRequest) *GetForexPreviousCloseQueryRequestWrapper {
	return &GetForexPreviousCloseQueryRequestWrapper{
		BaseMessageWrapper: goprotoextra.NewBaseMessageWrapper(),
		Data:               data,
	}
}

var _ = stream.Register(
	GetForexPreviousCloseQueryRequestTypeCode,
	stream.TypeCodeData{
		CreateMessage: func() proto.Message {
			return &GetForexPreviousCloseQueryRequest{}
		},
		CreateWrapper: func(
			data proto.Message) (goprotoextra.IMessageWrapper, error) {
			if msg, ok := data.(*GetForexPreviousCloseQueryRequest); ok {
				return NewGetForexPreviousCloseQueryRequestWrapper(
					msg), nil
			}
			return nil, goerrors.InvalidParam
		}})

// true
// true
// false
// false
type GetForexPreviousCloseResponseWrapper struct {
	goprotoextra.BaseMessageWrapper
	Data *GetForexPreviousCloseResponse
}

func (self *GetForexPreviousCloseResponseWrapper) Message() interface{} {
	return self.Data
}

func (self *GetForexPreviousCloseResponseWrapper) messageWrapper() interface{} {
	return self
}

func NewGetForexPreviousCloseResponseWrapper(
	data *GetForexPreviousCloseResponse) *GetForexPreviousCloseResponseWrapper {
	return &GetForexPreviousCloseResponseWrapper{
		BaseMessageWrapper: goprotoextra.NewBaseMessageWrapper(),
		Data:               data,
	}
}

var _ = stream.Register(
	GetForexPreviousCloseResponseTypeCode,
	stream.TypeCodeData{
		CreateMessage: func() proto.Message {
			return &GetForexPreviousCloseResponse{}
		},
		CreateWrapper: func(
			data proto.Message) (goprotoextra.IMessageWrapper, error) {
			if msg, ok := data.(*GetForexPreviousCloseResponse); ok {
				return NewGetForexPreviousCloseResponseWrapper(
					msg), nil
			}
			return nil, goerrors.InvalidParam
		}})

// true
// true
// false
// false
type GetForexAggregatesBarsQueryRequestWrapper struct {
	goprotoextra.BaseMessageWrapper
	Data *GetForexAggregatesBarsQueryRequest
}

func (self *GetForexAggregatesBarsQueryRequestWrapper) Message() interface{} {
	return self.Data
}

func (self *GetForexAggregatesBarsQueryRequestWrapper) messageWrapper() interface{} {
	return self
}

func NewGetForexAggregatesBarsQueryRequestWrapper(
	data *GetForexAggregatesBarsQueryRequest) *GetForexAggregatesBarsQueryRequestWrapper {
	return &GetForexAggregatesBarsQueryRequestWrapper{
		BaseMessageWrapper: goprotoextra.NewBaseMessageWrapper(),
		Data:               data,
	}
}

var _ = stream.Register(
	GetForexAggregatesBarsQueryRequestTypeCode,
	stream.TypeCodeData{
		CreateMessage: func() proto.Message {
			return &GetForexAggregatesBarsQueryRequest{}
		},
		CreateWrapper: func(
			data proto.Message) (goprotoextra.IMessageWrapper, error) {
			if msg, ok := data.(*GetForexAggregatesBarsQueryRequest); ok {
				return NewGetForexAggregatesBarsQueryRequestWrapper(
					msg), nil
			}
			return nil, goerrors.InvalidParam
		}})

// true
// true
// false
// false
type GetForexAggregatesBarsResponseWrapper struct {
	goprotoextra.BaseMessageWrapper
	Data *GetForexAggregatesBarsResponse
}

func (self *GetForexAggregatesBarsResponseWrapper) Message() interface{} {
	return self.Data
}

func (self *GetForexAggregatesBarsResponseWrapper) messageWrapper() interface{} {
	return self
}

func NewGetForexAggregatesBarsResponseWrapper(
	data *GetForexAggregatesBarsResponse) *GetForexAggregatesBarsResponseWrapper {
	return &GetForexAggregatesBarsResponseWrapper{
		BaseMessageWrapper: goprotoextra.NewBaseMessageWrapper(),
		Data:               data,
	}
}

var _ = stream.Register(
	GetForexAggregatesBarsResponseTypeCode,
	stream.TypeCodeData{
		CreateMessage: func() proto.Message {
			return &GetForexAggregatesBarsResponse{}
		},
		CreateWrapper: func(
			data proto.Message) (goprotoextra.IMessageWrapper, error) {
			if msg, ok := data.(*GetForexAggregatesBarsResponse); ok {
				return NewGetForexAggregatesBarsResponseWrapper(
					msg), nil
			}
			return nil, goerrors.InvalidParam
		}})

// true
// true
// false
// false
type GetForexGroupedDailyBarsQueryRequestWrapper struct {
	goprotoextra.BaseMessageWrapper
	Data *GetForexGroupedDailyBarsQueryRequest
}

func (self *GetForexGroupedDailyBarsQueryRequestWrapper) Message() interface{} {
	return self.Data
}

func (self *GetForexGroupedDailyBarsQueryRequestWrapper) messageWrapper() interface{} {
	return self
}

func NewGetForexGroupedDailyBarsQueryRequestWrapper(
	data *GetForexGroupedDailyBarsQueryRequest) *GetForexGroupedDailyBarsQueryRequestWrapper {
	return &GetForexGroupedDailyBarsQueryRequestWrapper{
		BaseMessageWrapper: goprotoextra.NewBaseMessageWrapper(),
		Data:               data,
	}
}

var _ = stream.Register(
	GetForexGroupedDailyBarsQueryRequestTypeCode,
	stream.TypeCodeData{
		CreateMessage: func() proto.Message {
			return &GetForexGroupedDailyBarsQueryRequest{}
		},
		CreateWrapper: func(
			data proto.Message) (goprotoextra.IMessageWrapper, error) {
			if msg, ok := data.(*GetForexGroupedDailyBarsQueryRequest); ok {
				return NewGetForexGroupedDailyBarsQueryRequestWrapper(
					msg), nil
			}
			return nil, goerrors.InvalidParam
		}})

// true
// true
// false
// false
type GetForexGroupedDailyBarsResponseWrapper struct {
	goprotoextra.BaseMessageWrapper
	Data *GetForexGroupedDailyBarsResponse
}

func (self *GetForexGroupedDailyBarsResponseWrapper) Message() interface{} {
	return self.Data
}

func (self *GetForexGroupedDailyBarsResponseWrapper) messageWrapper() interface{} {
	return self
}

func NewGetForexGroupedDailyBarsResponseWrapper(
	data *GetForexGroupedDailyBarsResponse) *GetForexGroupedDailyBarsResponseWrapper {
	return &GetForexGroupedDailyBarsResponseWrapper{
		BaseMessageWrapper: goprotoextra.NewBaseMessageWrapper(),
		Data:               data,
	}
}

var _ = stream.Register(
	GetForexGroupedDailyBarsResponseTypeCode,
	stream.TypeCodeData{
		CreateMessage: func() proto.Message {
			return &GetForexGroupedDailyBarsResponse{}
		},
		CreateWrapper: func(
			data proto.Message) (goprotoextra.IMessageWrapper, error) {
			if msg, ok := data.(*GetForexGroupedDailyBarsResponse); ok {
				return NewGetForexGroupedDailyBarsResponseWrapper(
					msg), nil
			}
			return nil, goerrors.InvalidParam
		}})

// true
// true
// false
// false
type GetForexHistoricForexTicksQueryRequestWrapper struct {
	goprotoextra.BaseMessageWrapper
	Data *GetForexHistoricForexTicksQueryRequest
}

func (self *GetForexHistoricForexTicksQueryRequestWrapper) Message() interface{} {
	return self.Data
}

func (self *GetForexHistoricForexTicksQueryRequestWrapper) messageWrapper() interface{} {
	return self
}

func NewGetForexHistoricForexTicksQueryRequestWrapper(
	data *GetForexHistoricForexTicksQueryRequest) *GetForexHistoricForexTicksQueryRequestWrapper {
	return &GetForexHistoricForexTicksQueryRequestWrapper{
		BaseMessageWrapper: goprotoextra.NewBaseMessageWrapper(),
		Data:               data,
	}
}

var _ = stream.Register(
	GetForexHistoricForexTicksQueryRequestTypeCode,
	stream.TypeCodeData{
		CreateMessage: func() proto.Message {
			return &GetForexHistoricForexTicksQueryRequest{}
		},
		CreateWrapper: func(
			data proto.Message) (goprotoextra.IMessageWrapper, error) {
			if msg, ok := data.(*GetForexHistoricForexTicksQueryRequest); ok {
				return NewGetForexHistoricForexTicksQueryRequestWrapper(
					msg), nil
			}
			return nil, goerrors.InvalidParam
		}})

// true
// true
// false
// false
type GetForexHistoricForexTicksResponseWrapper struct {
	goprotoextra.BaseMessageWrapper
	Data *GetForexHistoricForexTicksResponse
}

func (self *GetForexHistoricForexTicksResponseWrapper) Message() interface{} {
	return self.Data
}

func (self *GetForexHistoricForexTicksResponseWrapper) messageWrapper() interface{} {
	return self
}

func NewGetForexHistoricForexTicksResponseWrapper(
	data *GetForexHistoricForexTicksResponse) *GetForexHistoricForexTicksResponseWrapper {
	return &GetForexHistoricForexTicksResponseWrapper{
		BaseMessageWrapper: goprotoextra.NewBaseMessageWrapper(),
		Data:               data,
	}
}

var _ = stream.Register(
	GetForexHistoricForexTicksResponseTypeCode,
	stream.TypeCodeData{
		CreateMessage: func() proto.Message {
			return &GetForexHistoricForexTicksResponse{}
		},
		CreateWrapper: func(
			data proto.Message) (goprotoextra.IMessageWrapper, error) {
			if msg, ok := data.(*GetForexHistoricForexTicksResponse); ok {
				return NewGetForexHistoricForexTicksResponseWrapper(
					msg), nil
			}
			return nil, goerrors.InvalidParam
		}})

// true
// true
// false
// false
type GetForexRealTimeCurrencyConversionQueryRequestWrapper struct {
	goprotoextra.BaseMessageWrapper
	Data *GetForexRealTimeCurrencyConversionQueryRequest
}

func (self *GetForexRealTimeCurrencyConversionQueryRequestWrapper) Message() interface{} {
	return self.Data
}

func (self *GetForexRealTimeCurrencyConversionQueryRequestWrapper) messageWrapper() interface{} {
	return self
}

func NewGetForexRealTimeCurrencyConversionQueryRequestWrapper(
	data *GetForexRealTimeCurrencyConversionQueryRequest) *GetForexRealTimeCurrencyConversionQueryRequestWrapper {
	return &GetForexRealTimeCurrencyConversionQueryRequestWrapper{
		BaseMessageWrapper: goprotoextra.NewBaseMessageWrapper(),
		Data:               data,
	}
}

var _ = stream.Register(
	GetForexRealTimeCurrencyConversionQueryRequestTypeCode,
	stream.TypeCodeData{
		CreateMessage: func() proto.Message {
			return &GetForexRealTimeCurrencyConversionQueryRequest{}
		},
		CreateWrapper: func(
			data proto.Message) (goprotoextra.IMessageWrapper, error) {
			if msg, ok := data.(*GetForexRealTimeCurrencyConversionQueryRequest); ok {
				return NewGetForexRealTimeCurrencyConversionQueryRequestWrapper(
					msg), nil
			}
			return nil, goerrors.InvalidParam
		}})

// true
// true
// false
// false
type GetForexRealTimeCurrencyConversionResponseWrapper struct {
	goprotoextra.BaseMessageWrapper
	Data *GetForexRealTimeCurrencyConversionResponse
}

func (self *GetForexRealTimeCurrencyConversionResponseWrapper) Message() interface{} {
	return self.Data
}

func (self *GetForexRealTimeCurrencyConversionResponseWrapper) messageWrapper() interface{} {
	return self
}

func NewGetForexRealTimeCurrencyConversionResponseWrapper(
	data *GetForexRealTimeCurrencyConversionResponse) *GetForexRealTimeCurrencyConversionResponseWrapper {
	return &GetForexRealTimeCurrencyConversionResponseWrapper{
		BaseMessageWrapper: goprotoextra.NewBaseMessageWrapper(),
		Data:               data,
	}
}

var _ = stream.Register(
	GetForexRealTimeCurrencyConversionResponseTypeCode,
	stream.TypeCodeData{
		CreateMessage: func() proto.Message {
			return &GetForexRealTimeCurrencyConversionResponse{}
		},
		CreateWrapper: func(
			data proto.Message) (goprotoextra.IMessageWrapper, error) {
			if msg, ok := data.(*GetForexRealTimeCurrencyConversionResponse); ok {
				return NewGetForexRealTimeCurrencyConversionResponseWrapper(
					msg), nil
			}
			return nil, goerrors.InvalidParam
		}})

// true
// true
// false
// false
type GetForexLastQuoteForCurrencyPairQueryRequestWrapper struct {
	goprotoextra.BaseMessageWrapper
	Data *GetForexLastQuoteForCurrencyPairQueryRequest
}

func (self *GetForexLastQuoteForCurrencyPairQueryRequestWrapper) Message() interface{} {
	return self.Data
}

func (self *GetForexLastQuoteForCurrencyPairQueryRequestWrapper) messageWrapper() interface{} {
	return self
}

func NewGetForexLastQuoteForCurrencyPairQueryRequestWrapper(
	data *GetForexLastQuoteForCurrencyPairQueryRequest) *GetForexLastQuoteForCurrencyPairQueryRequestWrapper {
	return &GetForexLastQuoteForCurrencyPairQueryRequestWrapper{
		BaseMessageWrapper: goprotoextra.NewBaseMessageWrapper(),
		Data:               data,
	}
}

var _ = stream.Register(
	GetForexLastQuoteForCurrencyPairQueryRequestTypeCode,
	stream.TypeCodeData{
		CreateMessage: func() proto.Message {
			return &GetForexLastQuoteForCurrencyPairQueryRequest{}
		},
		CreateWrapper: func(
			data proto.Message) (goprotoextra.IMessageWrapper, error) {
			if msg, ok := data.(*GetForexLastQuoteForCurrencyPairQueryRequest); ok {
				return NewGetForexLastQuoteForCurrencyPairQueryRequestWrapper(
					msg), nil
			}
			return nil, goerrors.InvalidParam
		}})

// true
// true
// false
// false
type GetForexLastQuoteForCurrencyPairResponseWrapper struct {
	goprotoextra.BaseMessageWrapper
	Data *GetForexLastQuoteForCurrencyPairResponse
}

func (self *GetForexLastQuoteForCurrencyPairResponseWrapper) Message() interface{} {
	return self.Data
}

func (self *GetForexLastQuoteForCurrencyPairResponseWrapper) messageWrapper() interface{} {
	return self
}

func NewGetForexLastQuoteForCurrencyPairResponseWrapper(
	data *GetForexLastQuoteForCurrencyPairResponse) *GetForexLastQuoteForCurrencyPairResponseWrapper {
	return &GetForexLastQuoteForCurrencyPairResponseWrapper{
		BaseMessageWrapper: goprotoextra.NewBaseMessageWrapper(),
		Data:               data,
	}
}

var _ = stream.Register(
	GetForexLastQuoteForCurrencyPairResponseTypeCode,
	stream.TypeCodeData{
		CreateMessage: func() proto.Message {
			return &GetForexLastQuoteForCurrencyPairResponse{}
		},
		CreateWrapper: func(
			data proto.Message) (goprotoextra.IMessageWrapper, error) {
			if msg, ok := data.(*GetForexLastQuoteForCurrencyPairResponse); ok {
				return NewGetForexLastQuoteForCurrencyPairResponseWrapper(
					msg), nil
			}
			return nil, goerrors.InvalidParam
		}})

// true
// true
// false
// false
type GetForexSnapshotAllTickersQueryRequestWrapper struct {
	goprotoextra.BaseMessageWrapper
	Data *GetForexSnapshotAllTickersQueryRequest
}

func (self *GetForexSnapshotAllTickersQueryRequestWrapper) Message() interface{} {
	return self.Data
}

func (self *GetForexSnapshotAllTickersQueryRequestWrapper) messageWrapper() interface{} {
	return self
}

func NewGetForexSnapshotAllTickersQueryRequestWrapper(
	data *GetForexSnapshotAllTickersQueryRequest) *GetForexSnapshotAllTickersQueryRequestWrapper {
	return &GetForexSnapshotAllTickersQueryRequestWrapper{
		BaseMessageWrapper: goprotoextra.NewBaseMessageWrapper(),
		Data:               data,
	}
}

var _ = stream.Register(
	GetForexSnapshotAllTickersQueryRequestTypeCode,
	stream.TypeCodeData{
		CreateMessage: func() proto.Message {
			return &GetForexSnapshotAllTickersQueryRequest{}
		},
		CreateWrapper: func(
			data proto.Message) (goprotoextra.IMessageWrapper, error) {
			if msg, ok := data.(*GetForexSnapshotAllTickersQueryRequest); ok {
				return NewGetForexSnapshotAllTickersQueryRequestWrapper(
					msg), nil
			}
			return nil, goerrors.InvalidParam
		}})

// true
// true
// false
// false
type GetForexSnapshotAllTickersResponseWrapper struct {
	goprotoextra.BaseMessageWrapper
	Data *GetForexSnapshotAllTickersResponse
}

func (self *GetForexSnapshotAllTickersResponseWrapper) Message() interface{} {
	return self.Data
}

func (self *GetForexSnapshotAllTickersResponseWrapper) messageWrapper() interface{} {
	return self
}

func NewGetForexSnapshotAllTickersResponseWrapper(
	data *GetForexSnapshotAllTickersResponse) *GetForexSnapshotAllTickersResponseWrapper {
	return &GetForexSnapshotAllTickersResponseWrapper{
		BaseMessageWrapper: goprotoextra.NewBaseMessageWrapper(),
		Data:               data,
	}
}

var _ = stream.Register(
	GetForexSnapshotAllTickersResponseTypeCode,
	stream.TypeCodeData{
		CreateMessage: func() proto.Message {
			return &GetForexSnapshotAllTickersResponse{}
		},
		CreateWrapper: func(
			data proto.Message) (goprotoextra.IMessageWrapper, error) {
			if msg, ok := data.(*GetForexSnapshotAllTickersResponse); ok {
				return NewGetForexSnapshotAllTickersResponseWrapper(
					msg), nil
			}
			return nil, goerrors.InvalidParam
		}})

// true
// true
// false
// false
type GetForexSnapshotGainersLosersQueryRequestWrapper struct {
	goprotoextra.BaseMessageWrapper
	Data *GetForexSnapshotGainersLosersQueryRequest
}

func (self *GetForexSnapshotGainersLosersQueryRequestWrapper) Message() interface{} {
	return self.Data
}

func (self *GetForexSnapshotGainersLosersQueryRequestWrapper) messageWrapper() interface{} {
	return self
}

func NewGetForexSnapshotGainersLosersQueryRequestWrapper(
	data *GetForexSnapshotGainersLosersQueryRequest) *GetForexSnapshotGainersLosersQueryRequestWrapper {
	return &GetForexSnapshotGainersLosersQueryRequestWrapper{
		BaseMessageWrapper: goprotoextra.NewBaseMessageWrapper(),
		Data:               data,
	}
}

var _ = stream.Register(
	GetForexSnapshotGainersLosersQueryRequestTypeCode,
	stream.TypeCodeData{
		CreateMessage: func() proto.Message {
			return &GetForexSnapshotGainersLosersQueryRequest{}
		},
		CreateWrapper: func(
			data proto.Message) (goprotoextra.IMessageWrapper, error) {
			if msg, ok := data.(*GetForexSnapshotGainersLosersQueryRequest); ok {
				return NewGetForexSnapshotGainersLosersQueryRequestWrapper(
					msg), nil
			}
			return nil, goerrors.InvalidParam
		}})

// true
// true
// false
// false
type GetForexSnapshotGainersLosersResponseWrapper struct {
	goprotoextra.BaseMessageWrapper
	Data *GetForexSnapshotGainersLosersResponse
}

func (self *GetForexSnapshotGainersLosersResponseWrapper) Message() interface{} {
	return self.Data
}

func (self *GetForexSnapshotGainersLosersResponseWrapper) messageWrapper() interface{} {
	return self
}

func NewGetForexSnapshotGainersLosersResponseWrapper(
	data *GetForexSnapshotGainersLosersResponse) *GetForexSnapshotGainersLosersResponseWrapper {
	return &GetForexSnapshotGainersLosersResponseWrapper{
		BaseMessageWrapper: goprotoextra.NewBaseMessageWrapper(),
		Data:               data,
	}
}

var _ = stream.Register(
	GetForexSnapshotGainersLosersResponseTypeCode,
	stream.TypeCodeData{
		CreateMessage: func() proto.Message {
			return &GetForexSnapshotGainersLosersResponse{}
		},
		CreateWrapper: func(
			data proto.Message) (goprotoextra.IMessageWrapper, error) {
			if msg, ok := data.(*GetForexSnapshotGainersLosersResponse); ok {
				return NewGetForexSnapshotGainersLosersResponseWrapper(
					msg), nil
			}
			return nil, goerrors.InvalidParam
		}})

// true
// true
// false
// false
type GetCryptoPreviousCloseQueryRequestWrapper struct {
	goprotoextra.BaseMessageWrapper
	Data *GetCryptoPreviousCloseQueryRequest
}

func (self *GetCryptoPreviousCloseQueryRequestWrapper) Message() interface{} {
	return self.Data
}

func (self *GetCryptoPreviousCloseQueryRequestWrapper) messageWrapper() interface{} {
	return self
}

func NewGetCryptoPreviousCloseQueryRequestWrapper(
	data *GetCryptoPreviousCloseQueryRequest) *GetCryptoPreviousCloseQueryRequestWrapper {
	return &GetCryptoPreviousCloseQueryRequestWrapper{
		BaseMessageWrapper: goprotoextra.NewBaseMessageWrapper(),
		Data:               data,
	}
}

var _ = stream.Register(
	GetCryptoPreviousCloseQueryRequestTypeCode,
	stream.TypeCodeData{
		CreateMessage: func() proto.Message {
			return &GetCryptoPreviousCloseQueryRequest{}
		},
		CreateWrapper: func(
			data proto.Message) (goprotoextra.IMessageWrapper, error) {
			if msg, ok := data.(*GetCryptoPreviousCloseQueryRequest); ok {
				return NewGetCryptoPreviousCloseQueryRequestWrapper(
					msg), nil
			}
			return nil, goerrors.InvalidParam
		}})

// true
// true
// false
// false
type GetCryptoPreviousCloseResponseWrapper struct {
	goprotoextra.BaseMessageWrapper
	Data *GetCryptoPreviousCloseResponse
}

func (self *GetCryptoPreviousCloseResponseWrapper) Message() interface{} {
	return self.Data
}

func (self *GetCryptoPreviousCloseResponseWrapper) messageWrapper() interface{} {
	return self
}

func NewGetCryptoPreviousCloseResponseWrapper(
	data *GetCryptoPreviousCloseResponse) *GetCryptoPreviousCloseResponseWrapper {
	return &GetCryptoPreviousCloseResponseWrapper{
		BaseMessageWrapper: goprotoextra.NewBaseMessageWrapper(),
		Data:               data,
	}
}

var _ = stream.Register(
	GetCryptoPreviousCloseResponseTypeCode,
	stream.TypeCodeData{
		CreateMessage: func() proto.Message {
			return &GetCryptoPreviousCloseResponse{}
		},
		CreateWrapper: func(
			data proto.Message) (goprotoextra.IMessageWrapper, error) {
			if msg, ok := data.(*GetCryptoPreviousCloseResponse); ok {
				return NewGetCryptoPreviousCloseResponseWrapper(
					msg), nil
			}
			return nil, goerrors.InvalidParam
		}})

// true
// true
// false
// false
type GetCryptoAggregatesBarsQueryRequestWrapper struct {
	goprotoextra.BaseMessageWrapper
	Data *GetCryptoAggregatesBarsQueryRequest
}

func (self *GetCryptoAggregatesBarsQueryRequestWrapper) Message() interface{} {
	return self.Data
}

func (self *GetCryptoAggregatesBarsQueryRequestWrapper) messageWrapper() interface{} {
	return self
}

func NewGetCryptoAggregatesBarsQueryRequestWrapper(
	data *GetCryptoAggregatesBarsQueryRequest) *GetCryptoAggregatesBarsQueryRequestWrapper {
	return &GetCryptoAggregatesBarsQueryRequestWrapper{
		BaseMessageWrapper: goprotoextra.NewBaseMessageWrapper(),
		Data:               data,
	}
}

var _ = stream.Register(
	GetCryptoAggregatesBarsQueryRequestTypeCode,
	stream.TypeCodeData{
		CreateMessage: func() proto.Message {
			return &GetCryptoAggregatesBarsQueryRequest{}
		},
		CreateWrapper: func(
			data proto.Message) (goprotoextra.IMessageWrapper, error) {
			if msg, ok := data.(*GetCryptoAggregatesBarsQueryRequest); ok {
				return NewGetCryptoAggregatesBarsQueryRequestWrapper(
					msg), nil
			}
			return nil, goerrors.InvalidParam
		}})

// true
// true
// false
// false
type GetCryptoAggregatesBarsResponseWrapper struct {
	goprotoextra.BaseMessageWrapper
	Data *GetCryptoAggregatesBarsResponse
}

func (self *GetCryptoAggregatesBarsResponseWrapper) Message() interface{} {
	return self.Data
}

func (self *GetCryptoAggregatesBarsResponseWrapper) messageWrapper() interface{} {
	return self
}

func NewGetCryptoAggregatesBarsResponseWrapper(
	data *GetCryptoAggregatesBarsResponse) *GetCryptoAggregatesBarsResponseWrapper {
	return &GetCryptoAggregatesBarsResponseWrapper{
		BaseMessageWrapper: goprotoextra.NewBaseMessageWrapper(),
		Data:               data,
	}
}

var _ = stream.Register(
	GetCryptoAggregatesBarsResponseTypeCode,
	stream.TypeCodeData{
		CreateMessage: func() proto.Message {
			return &GetCryptoAggregatesBarsResponse{}
		},
		CreateWrapper: func(
			data proto.Message) (goprotoextra.IMessageWrapper, error) {
			if msg, ok := data.(*GetCryptoAggregatesBarsResponse); ok {
				return NewGetCryptoAggregatesBarsResponseWrapper(
					msg), nil
			}
			return nil, goerrors.InvalidParam
		}})

// true
// true
// false
// false
type GetCryptoGroupedDailyBarsQueryRequestWrapper struct {
	goprotoextra.BaseMessageWrapper
	Data *GetCryptoGroupedDailyBarsQueryRequest
}

func (self *GetCryptoGroupedDailyBarsQueryRequestWrapper) Message() interface{} {
	return self.Data
}

func (self *GetCryptoGroupedDailyBarsQueryRequestWrapper) messageWrapper() interface{} {
	return self
}

func NewGetCryptoGroupedDailyBarsQueryRequestWrapper(
	data *GetCryptoGroupedDailyBarsQueryRequest) *GetCryptoGroupedDailyBarsQueryRequestWrapper {
	return &GetCryptoGroupedDailyBarsQueryRequestWrapper{
		BaseMessageWrapper: goprotoextra.NewBaseMessageWrapper(),
		Data:               data,
	}
}

var _ = stream.Register(
	GetCryptoGroupedDailyBarsQueryRequestTypeCode,
	stream.TypeCodeData{
		CreateMessage: func() proto.Message {
			return &GetCryptoGroupedDailyBarsQueryRequest{}
		},
		CreateWrapper: func(
			data proto.Message) (goprotoextra.IMessageWrapper, error) {
			if msg, ok := data.(*GetCryptoGroupedDailyBarsQueryRequest); ok {
				return NewGetCryptoGroupedDailyBarsQueryRequestWrapper(
					msg), nil
			}
			return nil, goerrors.InvalidParam
		}})

// true
// true
// false
// false
type GetCryptoGroupedDailyBarsResponseWrapper struct {
	goprotoextra.BaseMessageWrapper
	Data *GetCryptoGroupedDailyBarsResponse
}

func (self *GetCryptoGroupedDailyBarsResponseWrapper) Message() interface{} {
	return self.Data
}

func (self *GetCryptoGroupedDailyBarsResponseWrapper) messageWrapper() interface{} {
	return self
}

func NewGetCryptoGroupedDailyBarsResponseWrapper(
	data *GetCryptoGroupedDailyBarsResponse) *GetCryptoGroupedDailyBarsResponseWrapper {
	return &GetCryptoGroupedDailyBarsResponseWrapper{
		BaseMessageWrapper: goprotoextra.NewBaseMessageWrapper(),
		Data:               data,
	}
}

var _ = stream.Register(
	GetCryptoGroupedDailyBarsResponseTypeCode,
	stream.TypeCodeData{
		CreateMessage: func() proto.Message {
			return &GetCryptoGroupedDailyBarsResponse{}
		},
		CreateWrapper: func(
			data proto.Message) (goprotoextra.IMessageWrapper, error) {
			if msg, ok := data.(*GetCryptoGroupedDailyBarsResponse); ok {
				return NewGetCryptoGroupedDailyBarsResponseWrapper(
					msg), nil
			}
			return nil, goerrors.InvalidParam
		}})

// true
// true
// false
// false
type GetCryptoCryptoExchangesQueryRequestWrapper struct {
	goprotoextra.BaseMessageWrapper
	Data *GetCryptoCryptoExchangesQueryRequest
}

func (self *GetCryptoCryptoExchangesQueryRequestWrapper) Message() interface{} {
	return self.Data
}

func (self *GetCryptoCryptoExchangesQueryRequestWrapper) messageWrapper() interface{} {
	return self
}

func NewGetCryptoCryptoExchangesQueryRequestWrapper(
	data *GetCryptoCryptoExchangesQueryRequest) *GetCryptoCryptoExchangesQueryRequestWrapper {
	return &GetCryptoCryptoExchangesQueryRequestWrapper{
		BaseMessageWrapper: goprotoextra.NewBaseMessageWrapper(),
		Data:               data,
	}
}

var _ = stream.Register(
	GetCryptoCryptoExchangesQueryRequestTypeCode,
	stream.TypeCodeData{
		CreateMessage: func() proto.Message {
			return &GetCryptoCryptoExchangesQueryRequest{}
		},
		CreateWrapper: func(
			data proto.Message) (goprotoextra.IMessageWrapper, error) {
			if msg, ok := data.(*GetCryptoCryptoExchangesQueryRequest); ok {
				return NewGetCryptoCryptoExchangesQueryRequestWrapper(
					msg), nil
			}
			return nil, goerrors.InvalidParam
		}})

// true
// true
// false
// false
type GetCryptoCryptoExchangesResponseWrapper struct {
	goprotoextra.BaseMessageWrapper
	Data *GetCryptoCryptoExchangesResponse
}

func (self *GetCryptoCryptoExchangesResponseWrapper) Message() interface{} {
	return self.Data
}

func (self *GetCryptoCryptoExchangesResponseWrapper) messageWrapper() interface{} {
	return self
}

func NewGetCryptoCryptoExchangesResponseWrapper(
	data *GetCryptoCryptoExchangesResponse) *GetCryptoCryptoExchangesResponseWrapper {
	return &GetCryptoCryptoExchangesResponseWrapper{
		BaseMessageWrapper: goprotoextra.NewBaseMessageWrapper(),
		Data:               data,
	}
}

var _ = stream.Register(
	GetCryptoCryptoExchangesResponseTypeCode,
	stream.TypeCodeData{
		CreateMessage: func() proto.Message {
			return &GetCryptoCryptoExchangesResponse{}
		},
		CreateWrapper: func(
			data proto.Message) (goprotoextra.IMessageWrapper, error) {
			if msg, ok := data.(*GetCryptoCryptoExchangesResponse); ok {
				return NewGetCryptoCryptoExchangesResponseWrapper(
					msg), nil
			}
			return nil, goerrors.InvalidParam
		}})

// true
// true
// false
// false
type GetCryptoLastTradeForCryptoPairQueryRequestWrapper struct {
	goprotoextra.BaseMessageWrapper
	Data *GetCryptoLastTradeForCryptoPairQueryRequest
}

func (self *GetCryptoLastTradeForCryptoPairQueryRequestWrapper) Message() interface{} {
	return self.Data
}

func (self *GetCryptoLastTradeForCryptoPairQueryRequestWrapper) messageWrapper() interface{} {
	return self
}

func NewGetCryptoLastTradeForCryptoPairQueryRequestWrapper(
	data *GetCryptoLastTradeForCryptoPairQueryRequest) *GetCryptoLastTradeForCryptoPairQueryRequestWrapper {
	return &GetCryptoLastTradeForCryptoPairQueryRequestWrapper{
		BaseMessageWrapper: goprotoextra.NewBaseMessageWrapper(),
		Data:               data,
	}
}

var _ = stream.Register(
	GetCryptoLastTradeForCryptoPairQueryRequestTypeCode,
	stream.TypeCodeData{
		CreateMessage: func() proto.Message {
			return &GetCryptoLastTradeForCryptoPairQueryRequest{}
		},
		CreateWrapper: func(
			data proto.Message) (goprotoextra.IMessageWrapper, error) {
			if msg, ok := data.(*GetCryptoLastTradeForCryptoPairQueryRequest); ok {
				return NewGetCryptoLastTradeForCryptoPairQueryRequestWrapper(
					msg), nil
			}
			return nil, goerrors.InvalidParam
		}})

// true
// true
// false
// false
type GetCryptoLastTradeForCryptoPairResponseWrapper struct {
	goprotoextra.BaseMessageWrapper
	Data *GetCryptoLastTradeForCryptoPairResponse
}

func (self *GetCryptoLastTradeForCryptoPairResponseWrapper) Message() interface{} {
	return self.Data
}

func (self *GetCryptoLastTradeForCryptoPairResponseWrapper) messageWrapper() interface{} {
	return self
}

func NewGetCryptoLastTradeForCryptoPairResponseWrapper(
	data *GetCryptoLastTradeForCryptoPairResponse) *GetCryptoLastTradeForCryptoPairResponseWrapper {
	return &GetCryptoLastTradeForCryptoPairResponseWrapper{
		BaseMessageWrapper: goprotoextra.NewBaseMessageWrapper(),
		Data:               data,
	}
}

var _ = stream.Register(
	GetCryptoLastTradeForCryptoPairResponseTypeCode,
	stream.TypeCodeData{
		CreateMessage: func() proto.Message {
			return &GetCryptoLastTradeForCryptoPairResponse{}
		},
		CreateWrapper: func(
			data proto.Message) (goprotoextra.IMessageWrapper, error) {
			if msg, ok := data.(*GetCryptoLastTradeForCryptoPairResponse); ok {
				return NewGetCryptoLastTradeForCryptoPairResponseWrapper(
					msg), nil
			}
			return nil, goerrors.InvalidParam
		}})

// true
// true
// false
// false
type GetCryptoDailyOpenCloseQueryRequestWrapper struct {
	goprotoextra.BaseMessageWrapper
	Data *GetCryptoDailyOpenCloseQueryRequest
}

func (self *GetCryptoDailyOpenCloseQueryRequestWrapper) Message() interface{} {
	return self.Data
}

func (self *GetCryptoDailyOpenCloseQueryRequestWrapper) messageWrapper() interface{} {
	return self
}

func NewGetCryptoDailyOpenCloseQueryRequestWrapper(
	data *GetCryptoDailyOpenCloseQueryRequest) *GetCryptoDailyOpenCloseQueryRequestWrapper {
	return &GetCryptoDailyOpenCloseQueryRequestWrapper{
		BaseMessageWrapper: goprotoextra.NewBaseMessageWrapper(),
		Data:               data,
	}
}

var _ = stream.Register(
	GetCryptoDailyOpenCloseQueryRequestTypeCode,
	stream.TypeCodeData{
		CreateMessage: func() proto.Message {
			return &GetCryptoDailyOpenCloseQueryRequest{}
		},
		CreateWrapper: func(
			data proto.Message) (goprotoextra.IMessageWrapper, error) {
			if msg, ok := data.(*GetCryptoDailyOpenCloseQueryRequest); ok {
				return NewGetCryptoDailyOpenCloseQueryRequestWrapper(
					msg), nil
			}
			return nil, goerrors.InvalidParam
		}})

// true
// true
// false
// false
type GetCryptoDailyOpenCloseResponseWrapper struct {
	goprotoextra.BaseMessageWrapper
	Data *GetCryptoDailyOpenCloseResponse
}

func (self *GetCryptoDailyOpenCloseResponseWrapper) Message() interface{} {
	return self.Data
}

func (self *GetCryptoDailyOpenCloseResponseWrapper) messageWrapper() interface{} {
	return self
}

func NewGetCryptoDailyOpenCloseResponseWrapper(
	data *GetCryptoDailyOpenCloseResponse) *GetCryptoDailyOpenCloseResponseWrapper {
	return &GetCryptoDailyOpenCloseResponseWrapper{
		BaseMessageWrapper: goprotoextra.NewBaseMessageWrapper(),
		Data:               data,
	}
}

var _ = stream.Register(
	GetCryptoDailyOpenCloseResponseTypeCode,
	stream.TypeCodeData{
		CreateMessage: func() proto.Message {
			return &GetCryptoDailyOpenCloseResponse{}
		},
		CreateWrapper: func(
			data proto.Message) (goprotoextra.IMessageWrapper, error) {
			if msg, ok := data.(*GetCryptoDailyOpenCloseResponse); ok {
				return NewGetCryptoDailyOpenCloseResponseWrapper(
					msg), nil
			}
			return nil, goerrors.InvalidParam
		}})

// true
// true
// false
// false
type GetCryptoHistoricCryptoTradesQueryRequestWrapper struct {
	goprotoextra.BaseMessageWrapper
	Data *GetCryptoHistoricCryptoTradesQueryRequest
}

func (self *GetCryptoHistoricCryptoTradesQueryRequestWrapper) Message() interface{} {
	return self.Data
}

func (self *GetCryptoHistoricCryptoTradesQueryRequestWrapper) messageWrapper() interface{} {
	return self
}

func NewGetCryptoHistoricCryptoTradesQueryRequestWrapper(
	data *GetCryptoHistoricCryptoTradesQueryRequest) *GetCryptoHistoricCryptoTradesQueryRequestWrapper {
	return &GetCryptoHistoricCryptoTradesQueryRequestWrapper{
		BaseMessageWrapper: goprotoextra.NewBaseMessageWrapper(),
		Data:               data,
	}
}

var _ = stream.Register(
	GetCryptoHistoricCryptoTradesQueryRequestTypeCode,
	stream.TypeCodeData{
		CreateMessage: func() proto.Message {
			return &GetCryptoHistoricCryptoTradesQueryRequest{}
		},
		CreateWrapper: func(
			data proto.Message) (goprotoextra.IMessageWrapper, error) {
			if msg, ok := data.(*GetCryptoHistoricCryptoTradesQueryRequest); ok {
				return NewGetCryptoHistoricCryptoTradesQueryRequestWrapper(
					msg), nil
			}
			return nil, goerrors.InvalidParam
		}})

// true
// true
// false
// false
type GetCryptoHistoricCryptoTradesResponseWrapper struct {
	goprotoextra.BaseMessageWrapper
	Data *GetCryptoHistoricCryptoTradesResponse
}

func (self *GetCryptoHistoricCryptoTradesResponseWrapper) Message() interface{} {
	return self.Data
}

func (self *GetCryptoHistoricCryptoTradesResponseWrapper) messageWrapper() interface{} {
	return self
}

func NewGetCryptoHistoricCryptoTradesResponseWrapper(
	data *GetCryptoHistoricCryptoTradesResponse) *GetCryptoHistoricCryptoTradesResponseWrapper {
	return &GetCryptoHistoricCryptoTradesResponseWrapper{
		BaseMessageWrapper: goprotoextra.NewBaseMessageWrapper(),
		Data:               data,
	}
}

var _ = stream.Register(
	GetCryptoHistoricCryptoTradesResponseTypeCode,
	stream.TypeCodeData{
		CreateMessage: func() proto.Message {
			return &GetCryptoHistoricCryptoTradesResponse{}
		},
		CreateWrapper: func(
			data proto.Message) (goprotoextra.IMessageWrapper, error) {
			if msg, ok := data.(*GetCryptoHistoricCryptoTradesResponse); ok {
				return NewGetCryptoHistoricCryptoTradesResponseWrapper(
					msg), nil
			}
			return nil, goerrors.InvalidParam
		}})

// true
// true
// false
// false
type GetCryptoSnapshotAllTickersQueryRequestWrapper struct {
	goprotoextra.BaseMessageWrapper
	Data *GetCryptoSnapshotAllTickersQueryRequest
}

func (self *GetCryptoSnapshotAllTickersQueryRequestWrapper) Message() interface{} {
	return self.Data
}

func (self *GetCryptoSnapshotAllTickersQueryRequestWrapper) messageWrapper() interface{} {
	return self
}

func NewGetCryptoSnapshotAllTickersQueryRequestWrapper(
	data *GetCryptoSnapshotAllTickersQueryRequest) *GetCryptoSnapshotAllTickersQueryRequestWrapper {
	return &GetCryptoSnapshotAllTickersQueryRequestWrapper{
		BaseMessageWrapper: goprotoextra.NewBaseMessageWrapper(),
		Data:               data,
	}
}

var _ = stream.Register(
	GetCryptoSnapshotAllTickersQueryRequestTypeCode,
	stream.TypeCodeData{
		CreateMessage: func() proto.Message {
			return &GetCryptoSnapshotAllTickersQueryRequest{}
		},
		CreateWrapper: func(
			data proto.Message) (goprotoextra.IMessageWrapper, error) {
			if msg, ok := data.(*GetCryptoSnapshotAllTickersQueryRequest); ok {
				return NewGetCryptoSnapshotAllTickersQueryRequestWrapper(
					msg), nil
			}
			return nil, goerrors.InvalidParam
		}})

// true
// true
// false
// false
type GetCryptoSnapshotAllTickersResponseWrapper struct {
	goprotoextra.BaseMessageWrapper
	Data *GetCryptoSnapshotAllTickersResponse
}

func (self *GetCryptoSnapshotAllTickersResponseWrapper) Message() interface{} {
	return self.Data
}

func (self *GetCryptoSnapshotAllTickersResponseWrapper) messageWrapper() interface{} {
	return self
}

func NewGetCryptoSnapshotAllTickersResponseWrapper(
	data *GetCryptoSnapshotAllTickersResponse) *GetCryptoSnapshotAllTickersResponseWrapper {
	return &GetCryptoSnapshotAllTickersResponseWrapper{
		BaseMessageWrapper: goprotoextra.NewBaseMessageWrapper(),
		Data:               data,
	}
}

var _ = stream.Register(
	GetCryptoSnapshotAllTickersResponseTypeCode,
	stream.TypeCodeData{
		CreateMessage: func() proto.Message {
			return &GetCryptoSnapshotAllTickersResponse{}
		},
		CreateWrapper: func(
			data proto.Message) (goprotoextra.IMessageWrapper, error) {
			if msg, ok := data.(*GetCryptoSnapshotAllTickersResponse); ok {
				return NewGetCryptoSnapshotAllTickersResponseWrapper(
					msg), nil
			}
			return nil, goerrors.InvalidParam
		}})

// true
// true
// false
// false
type GetCryptoSnapshotSingleTickerQueryRequestWrapper struct {
	goprotoextra.BaseMessageWrapper
	Data *GetCryptoSnapshotSingleTickerQueryRequest
}

func (self *GetCryptoSnapshotSingleTickerQueryRequestWrapper) Message() interface{} {
	return self.Data
}

func (self *GetCryptoSnapshotSingleTickerQueryRequestWrapper) messageWrapper() interface{} {
	return self
}

func NewGetCryptoSnapshotSingleTickerQueryRequestWrapper(
	data *GetCryptoSnapshotSingleTickerQueryRequest) *GetCryptoSnapshotSingleTickerQueryRequestWrapper {
	return &GetCryptoSnapshotSingleTickerQueryRequestWrapper{
		BaseMessageWrapper: goprotoextra.NewBaseMessageWrapper(),
		Data:               data,
	}
}

var _ = stream.Register(
	GetCryptoSnapshotSingleTickerQueryRequestTypeCode,
	stream.TypeCodeData{
		CreateMessage: func() proto.Message {
			return &GetCryptoSnapshotSingleTickerQueryRequest{}
		},
		CreateWrapper: func(
			data proto.Message) (goprotoextra.IMessageWrapper, error) {
			if msg, ok := data.(*GetCryptoSnapshotSingleTickerQueryRequest); ok {
				return NewGetCryptoSnapshotSingleTickerQueryRequestWrapper(
					msg), nil
			}
			return nil, goerrors.InvalidParam
		}})

// true
// true
// false
// false
type GetCryptoSnapshotSingleTickerResponseWrapper struct {
	goprotoextra.BaseMessageWrapper
	Data *GetCryptoSnapshotSingleTickerResponse
}

func (self *GetCryptoSnapshotSingleTickerResponseWrapper) Message() interface{} {
	return self.Data
}

func (self *GetCryptoSnapshotSingleTickerResponseWrapper) messageWrapper() interface{} {
	return self
}

func NewGetCryptoSnapshotSingleTickerResponseWrapper(
	data *GetCryptoSnapshotSingleTickerResponse) *GetCryptoSnapshotSingleTickerResponseWrapper {
	return &GetCryptoSnapshotSingleTickerResponseWrapper{
		BaseMessageWrapper: goprotoextra.NewBaseMessageWrapper(),
		Data:               data,
	}
}

var _ = stream.Register(
	GetCryptoSnapshotSingleTickerResponseTypeCode,
	stream.TypeCodeData{
		CreateMessage: func() proto.Message {
			return &GetCryptoSnapshotSingleTickerResponse{}
		},
		CreateWrapper: func(
			data proto.Message) (goprotoextra.IMessageWrapper, error) {
			if msg, ok := data.(*GetCryptoSnapshotSingleTickerResponse); ok {
				return NewGetCryptoSnapshotSingleTickerResponseWrapper(
					msg), nil
			}
			return nil, goerrors.InvalidParam
		}})

// true
// true
// false
// false
type GetCryptoSnapshotSingleTickerFullBookL2QueryRequestWrapper struct {
	goprotoextra.BaseMessageWrapper
	Data *GetCryptoSnapshotSingleTickerFullBookL2QueryRequest
}

func (self *GetCryptoSnapshotSingleTickerFullBookL2QueryRequestWrapper) Message() interface{} {
	return self.Data
}

func (self *GetCryptoSnapshotSingleTickerFullBookL2QueryRequestWrapper) messageWrapper() interface{} {
	return self
}

func NewGetCryptoSnapshotSingleTickerFullBookL2QueryRequestWrapper(
	data *GetCryptoSnapshotSingleTickerFullBookL2QueryRequest) *GetCryptoSnapshotSingleTickerFullBookL2QueryRequestWrapper {
	return &GetCryptoSnapshotSingleTickerFullBookL2QueryRequestWrapper{
		BaseMessageWrapper: goprotoextra.NewBaseMessageWrapper(),
		Data:               data,
	}
}

var _ = stream.Register(
	GetCryptoSnapshotSingleTickerFullBookL2QueryRequestTypeCode,
	stream.TypeCodeData{
		CreateMessage: func() proto.Message {
			return &GetCryptoSnapshotSingleTickerFullBookL2QueryRequest{}
		},
		CreateWrapper: func(
			data proto.Message) (goprotoextra.IMessageWrapper, error) {
			if msg, ok := data.(*GetCryptoSnapshotSingleTickerFullBookL2QueryRequest); ok {
				return NewGetCryptoSnapshotSingleTickerFullBookL2QueryRequestWrapper(
					msg), nil
			}
			return nil, goerrors.InvalidParam
		}})

// true
// true
// false
// false
type GetCryptoSnapshotSingleTickerFullBookL2ResponseWrapper struct {
	goprotoextra.BaseMessageWrapper
	Data *GetCryptoSnapshotSingleTickerFullBookL2Response
}

func (self *GetCryptoSnapshotSingleTickerFullBookL2ResponseWrapper) Message() interface{} {
	return self.Data
}

func (self *GetCryptoSnapshotSingleTickerFullBookL2ResponseWrapper) messageWrapper() interface{} {
	return self
}

func NewGetCryptoSnapshotSingleTickerFullBookL2ResponseWrapper(
	data *GetCryptoSnapshotSingleTickerFullBookL2Response) *GetCryptoSnapshotSingleTickerFullBookL2ResponseWrapper {
	return &GetCryptoSnapshotSingleTickerFullBookL2ResponseWrapper{
		BaseMessageWrapper: goprotoextra.NewBaseMessageWrapper(),
		Data:               data,
	}
}

var _ = stream.Register(
	GetCryptoSnapshotSingleTickerFullBookL2ResponseTypeCode,
	stream.TypeCodeData{
		CreateMessage: func() proto.Message {
			return &GetCryptoSnapshotSingleTickerFullBookL2Response{}
		},
		CreateWrapper: func(
			data proto.Message) (goprotoextra.IMessageWrapper, error) {
			if msg, ok := data.(*GetCryptoSnapshotSingleTickerFullBookL2Response); ok {
				return NewGetCryptoSnapshotSingleTickerFullBookL2ResponseWrapper(
					msg), nil
			}
			return nil, goerrors.InvalidParam
		}})

// true
// true
// false
// false
type GetCryptoSnapshotGainersLosersQueryRequestWrapper struct {
	goprotoextra.BaseMessageWrapper
	Data *GetCryptoSnapshotGainersLosersQueryRequest
}

func (self *GetCryptoSnapshotGainersLosersQueryRequestWrapper) Message() interface{} {
	return self.Data
}

func (self *GetCryptoSnapshotGainersLosersQueryRequestWrapper) messageWrapper() interface{} {
	return self
}

func NewGetCryptoSnapshotGainersLosersQueryRequestWrapper(
	data *GetCryptoSnapshotGainersLosersQueryRequest) *GetCryptoSnapshotGainersLosersQueryRequestWrapper {
	return &GetCryptoSnapshotGainersLosersQueryRequestWrapper{
		BaseMessageWrapper: goprotoextra.NewBaseMessageWrapper(),
		Data:               data,
	}
}

var _ = stream.Register(
	GetCryptoSnapshotGainersLosersQueryRequestTypeCode,
	stream.TypeCodeData{
		CreateMessage: func() proto.Message {
			return &GetCryptoSnapshotGainersLosersQueryRequest{}
		},
		CreateWrapper: func(
			data proto.Message) (goprotoextra.IMessageWrapper, error) {
			if msg, ok := data.(*GetCryptoSnapshotGainersLosersQueryRequest); ok {
				return NewGetCryptoSnapshotGainersLosersQueryRequestWrapper(
					msg), nil
			}
			return nil, goerrors.InvalidParam
		}})

// true
// true
// false
// false
type GetCryptoSnapshotGainersLosersResponseWrapper struct {
	goprotoextra.BaseMessageWrapper
	Data *GetCryptoSnapshotGainersLosersResponse
}

func (self *GetCryptoSnapshotGainersLosersResponseWrapper) Message() interface{} {
	return self.Data
}

func (self *GetCryptoSnapshotGainersLosersResponseWrapper) messageWrapper() interface{} {
	return self
}

func NewGetCryptoSnapshotGainersLosersResponseWrapper(
	data *GetCryptoSnapshotGainersLosersResponse) *GetCryptoSnapshotGainersLosersResponseWrapper {
	return &GetCryptoSnapshotGainersLosersResponseWrapper{
		BaseMessageWrapper: goprotoextra.NewBaseMessageWrapper(),
		Data:               data,
	}
}

var _ = stream.Register(
	GetCryptoSnapshotGainersLosersResponseTypeCode,
	stream.TypeCodeData{
		CreateMessage: func() proto.Message {
			return &GetCryptoSnapshotGainersLosersResponse{}
		},
		CreateWrapper: func(
			data proto.Message) (goprotoextra.IMessageWrapper, error) {
			if msg, ok := data.(*GetCryptoSnapshotGainersLosersResponse); ok {
				return NewGetCryptoSnapshotGainersLosersResponseWrapper(
					msg), nil
			}
			return nil, goerrors.InvalidParam
		}})

func (self *GetErrorResponse) TypeCode() uint32 {
	return GetErrorResponseTypeCode
}

func (self *GetTickerQueryRequest) TypeCode() uint32 {
	return GetTickerQueryRequestTypeCode
}

func (self *Symbol) TypeCode() uint32 {
	return SymbolTypeCode
}

func (self *GetTickerResponse) TypeCode() uint32 {
	return GetTickerResponseTypeCode
}

func (self *GetTickerTypesResponse) TypeCode() uint32 {
	return GetTickerTypesResponseTypeCode
}

func (self *GetTickerDetailsResponse) TypeCode() uint32 {
	return GetTickerDetailsResponseTypeCode
}

func (self *GetTickerNewsQueryRequest) TypeCode() uint32 {
	return GetTickerNewsQueryRequestTypeCode
}

func (self *News) TypeCode() uint32 {
	return NewsTypeCode
}

func (self *GetTickerNewsResponse) TypeCode() uint32 {
	return GetTickerNewsResponseTypeCode
}

func (self *Market) TypeCode() uint32 {
	return MarketTypeCode
}

func (self *GetMarketsResponse) TypeCode() uint32 {
	return GetMarketsResponseTypeCode
}

func (self *Locale) TypeCode() uint32 {
	return LocaleTypeCode
}

func (self *GetLocalesResponse) TypeCode() uint32 {
	return GetLocalesResponseTypeCode
}

func (self *Split) TypeCode() uint32 {
	return SplitTypeCode
}

func (self *GetStockSplitsResponse) TypeCode() uint32 {
	return GetStockSplitsResponseTypeCode
}

func (self *Dividend) TypeCode() uint32 {
	return DividendTypeCode
}

func (self *GetStockDividendsResponse) TypeCode() uint32 {
	return GetStockDividendsResponseTypeCode
}

func (self *GetStockFinancialsQueryRequest) TypeCode() uint32 {
	return GetStockFinancialsQueryRequestTypeCode
}

func (self *Financial) TypeCode() uint32 {
	return FinancialTypeCode
}

func (self *GetStockFinancialsResponse) TypeCode() uint32 {
	return GetStockFinancialsResponseTypeCode
}

func (self *GetMarketStatusResponse) TypeCode() uint32 {
	return GetMarketStatusResponseTypeCode
}

func (self *MarketHoliday) TypeCode() uint32 {
	return MarketHolidayTypeCode
}

func (self *GetMarketHolidaysResponse) TypeCode() uint32 {
	return GetMarketHolidaysResponseTypeCode
}

func (self *GetEquityExchangesQueryRequest) TypeCode() uint32 {
	return GetEquityExchangesQueryRequestTypeCode
}

func (self *GetEquityExchangesResponse) TypeCode() uint32 {
	return GetEquityExchangesResponseTypeCode
}

func (self *GetEquityPreviousCloseQueryRequest) TypeCode() uint32 {
	return GetEquityPreviousCloseQueryRequestTypeCode
}

func (self *GetEquityPreviousCloseResponse) TypeCode() uint32 {
	return GetEquityPreviousCloseResponseTypeCode
}

func (self *GetEquityAggregatesBarsQueryRequest) TypeCode() uint32 {
	return GetEquityAggregatesBarsQueryRequestTypeCode
}

func (self *GetEquityAggregatesBarsResponse) TypeCode() uint32 {
	return GetEquityAggregatesBarsResponseTypeCode
}

func (self *GetEquityGroupedDailyBarsQueryRequest) TypeCode() uint32 {
	return GetEquityGroupedDailyBarsQueryRequestTypeCode
}

func (self *GetEquityGroupedDailyBarsResponse) TypeCode() uint32 {
	return GetEquityGroupedDailyBarsResponseTypeCode
}

func (self *GetEquityHistoricTradesQueryRequest) TypeCode() uint32 {
	return GetEquityHistoricTradesQueryRequestTypeCode
}

func (self *GetEquityHistoricTradesResponse) TypeCode() uint32 {
	return GetEquityHistoricTradesResponseTypeCode
}

func (self *GetEquityHistoricQuotesNBBOQueryRequest) TypeCode() uint32 {
	return GetEquityHistoricQuotesNBBOQueryRequestTypeCode
}

func (self *GetEquityHistoricQuotesNBBOResponse) TypeCode() uint32 {
	return GetEquityHistoricQuotesNBBOResponseTypeCode
}

func (self *GetEquityLastTradeForSymbolQueryRequest) TypeCode() uint32 {
	return GetEquityLastTradeForSymbolQueryRequestTypeCode
}

func (self *GetEquityLastTradeForSymbolResponse) TypeCode() uint32 {
	return GetEquityLastTradeForSymbolResponseTypeCode
}

func (self *GetEquityLastQuoteForSymbolQueryRequest) TypeCode() uint32 {
	return GetEquityLastQuoteForSymbolQueryRequestTypeCode
}

func (self *GetEquityLastQuoteForSymbolResponse) TypeCode() uint32 {
	return GetEquityLastQuoteForSymbolResponseTypeCode
}

func (self *GetEquityDailyOpenCloseQueryRequest) TypeCode() uint32 {
	return GetEquityDailyOpenCloseQueryRequestTypeCode
}

func (self *GetEquityDailyOpenCloseResponse) TypeCode() uint32 {
	return GetEquityDailyOpenCloseResponseTypeCode
}

func (self *GetEquityConditionMappingsQueryRequest) TypeCode() uint32 {
	return GetEquityConditionMappingsQueryRequestTypeCode
}

func (self *GetEquityConditionMappingsResponse) TypeCode() uint32 {
	return GetEquityConditionMappingsResponseTypeCode
}

func (self *GetEquitySnapshotAllTickersQueryRequest) TypeCode() uint32 {
	return GetEquitySnapshotAllTickersQueryRequestTypeCode
}

func (self *GetEquitySnapshotAllTickersResponse) TypeCode() uint32 {
	return GetEquitySnapshotAllTickersResponseTypeCode
}

func (self *GetEquitySnapshotSingleTickerQueryRequest) TypeCode() uint32 {
	return GetEquitySnapshotSingleTickerQueryRequestTypeCode
}

func (self *GetEquitySnapshotSingleTickerResponse) TypeCode() uint32 {
	return GetEquitySnapshotSingleTickerResponseTypeCode
}

func (self *GetEquitySnapshotGainersLosersQueryRequest) TypeCode() uint32 {
	return GetEquitySnapshotGainersLosersQueryRequestTypeCode
}

func (self *GetEquitySnapshotGainersLosersResponse) TypeCode() uint32 {
	return GetEquitySnapshotGainersLosersResponseTypeCode
}

func (self *GetForexPreviousCloseQueryRequest) TypeCode() uint32 {
	return GetForexPreviousCloseQueryRequestTypeCode
}

func (self *GetForexPreviousCloseResponse) TypeCode() uint32 {
	return GetForexPreviousCloseResponseTypeCode
}

func (self *GetForexAggregatesBarsQueryRequest) TypeCode() uint32 {
	return GetForexAggregatesBarsQueryRequestTypeCode
}

func (self *GetForexAggregatesBarsResponse) TypeCode() uint32 {
	return GetForexAggregatesBarsResponseTypeCode
}

func (self *GetForexGroupedDailyBarsQueryRequest) TypeCode() uint32 {
	return GetForexGroupedDailyBarsQueryRequestTypeCode
}

func (self *GetForexGroupedDailyBarsResponse) TypeCode() uint32 {
	return GetForexGroupedDailyBarsResponseTypeCode
}

func (self *GetForexHistoricForexTicksQueryRequest) TypeCode() uint32 {
	return GetForexHistoricForexTicksQueryRequestTypeCode
}

func (self *GetForexHistoricForexTicksResponse) TypeCode() uint32 {
	return GetForexHistoricForexTicksResponseTypeCode
}

func (self *GetForexRealTimeCurrencyConversionQueryRequest) TypeCode() uint32 {
	return GetForexRealTimeCurrencyConversionQueryRequestTypeCode
}

func (self *GetForexRealTimeCurrencyConversionResponse) TypeCode() uint32 {
	return GetForexRealTimeCurrencyConversionResponseTypeCode
}

func (self *GetForexLastQuoteForCurrencyPairQueryRequest) TypeCode() uint32 {
	return GetForexLastQuoteForCurrencyPairQueryRequestTypeCode
}

func (self *GetForexLastQuoteForCurrencyPairResponse) TypeCode() uint32 {
	return GetForexLastQuoteForCurrencyPairResponseTypeCode
}

func (self *GetForexSnapshotAllTickersQueryRequest) TypeCode() uint32 {
	return GetForexSnapshotAllTickersQueryRequestTypeCode
}

func (self *GetForexSnapshotAllTickersResponse) TypeCode() uint32 {
	return GetForexSnapshotAllTickersResponseTypeCode
}

func (self *GetForexSnapshotGainersLosersQueryRequest) TypeCode() uint32 {
	return GetForexSnapshotGainersLosersQueryRequestTypeCode
}

func (self *GetForexSnapshotGainersLosersResponse) TypeCode() uint32 {
	return GetForexSnapshotGainersLosersResponseTypeCode
}

func (self *GetCryptoPreviousCloseQueryRequest) TypeCode() uint32 {
	return GetCryptoPreviousCloseQueryRequestTypeCode
}

func (self *GetCryptoPreviousCloseResponse) TypeCode() uint32 {
	return GetCryptoPreviousCloseResponseTypeCode
}

func (self *GetCryptoAggregatesBarsQueryRequest) TypeCode() uint32 {
	return GetCryptoAggregatesBarsQueryRequestTypeCode
}

func (self *GetCryptoAggregatesBarsResponse) TypeCode() uint32 {
	return GetCryptoAggregatesBarsResponseTypeCode
}

func (self *GetCryptoGroupedDailyBarsQueryRequest) TypeCode() uint32 {
	return GetCryptoGroupedDailyBarsQueryRequestTypeCode
}

func (self *GetCryptoGroupedDailyBarsResponse) TypeCode() uint32 {
	return GetCryptoGroupedDailyBarsResponseTypeCode
}

func (self *GetCryptoCryptoExchangesQueryRequest) TypeCode() uint32 {
	return GetCryptoCryptoExchangesQueryRequestTypeCode
}

func (self *GetCryptoCryptoExchangesResponse) TypeCode() uint32 {
	return GetCryptoCryptoExchangesResponseTypeCode
}

func (self *GetCryptoLastTradeForCryptoPairQueryRequest) TypeCode() uint32 {
	return GetCryptoLastTradeForCryptoPairQueryRequestTypeCode
}

func (self *GetCryptoLastTradeForCryptoPairResponse) TypeCode() uint32 {
	return GetCryptoLastTradeForCryptoPairResponseTypeCode
}

func (self *GetCryptoDailyOpenCloseQueryRequest) TypeCode() uint32 {
	return GetCryptoDailyOpenCloseQueryRequestTypeCode
}

func (self *GetCryptoDailyOpenCloseResponse) TypeCode() uint32 {
	return GetCryptoDailyOpenCloseResponseTypeCode
}

func (self *GetCryptoHistoricCryptoTradesQueryRequest) TypeCode() uint32 {
	return GetCryptoHistoricCryptoTradesQueryRequestTypeCode
}

func (self *GetCryptoHistoricCryptoTradesResponse) TypeCode() uint32 {
	return GetCryptoHistoricCryptoTradesResponseTypeCode
}

func (self *GetCryptoSnapshotAllTickersQueryRequest) TypeCode() uint32 {
	return GetCryptoSnapshotAllTickersQueryRequestTypeCode
}

func (self *GetCryptoSnapshotAllTickersResponse) TypeCode() uint32 {
	return GetCryptoSnapshotAllTickersResponseTypeCode
}

func (self *GetCryptoSnapshotSingleTickerQueryRequest) TypeCode() uint32 {
	return GetCryptoSnapshotSingleTickerQueryRequestTypeCode
}

func (self *GetCryptoSnapshotSingleTickerResponse) TypeCode() uint32 {
	return GetCryptoSnapshotSingleTickerResponseTypeCode
}

func (self *GetCryptoSnapshotSingleTickerFullBookL2QueryRequest) TypeCode() uint32 {
	return GetCryptoSnapshotSingleTickerFullBookL2QueryRequestTypeCode
}

func (self *GetCryptoSnapshotSingleTickerFullBookL2Response) TypeCode() uint32 {
	return GetCryptoSnapshotSingleTickerFullBookL2ResponseTypeCode
}

func (self *GetCryptoSnapshotGainersLosersQueryRequest) TypeCode() uint32 {
	return GetCryptoSnapshotGainersLosersQueryRequestTypeCode
}

func (self *GetCryptoSnapshotGainersLosersResponse) TypeCode() uint32 {
	return GetCryptoSnapshotGainersLosersResponseTypeCode
}

func (self *Symbol_CodesEntry) TypeCode() uint32 {
	return Symbol_CodesEntryTypeCode
}

func (self *Symbol_AttrsEntry) TypeCode() uint32 {
	return Symbol_AttrsEntryTypeCode
}

func (self *GetTickerTypesResponse_TypesEntry) TypeCode() uint32 {
	return GetTickerTypesResponse_TypesEntryTypeCode
}

func (self *GetTickerTypesResponse_IndexTypesEntry) TypeCode() uint32 {
	return GetTickerTypesResponse_IndexTypesEntryTypeCode
}

func (self *GetMarketStatusResponse_ExchangesEntry) TypeCode() uint32 {
	return GetMarketStatusResponse_ExchangesEntryTypeCode
}

func (self *GetMarketStatusResponse_CurrenciesEntry) TypeCode() uint32 {
	return GetMarketStatusResponse_CurrenciesEntryTypeCode
}
