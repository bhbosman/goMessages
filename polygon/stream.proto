syntax = "proto3";
import "google/protobuf/descriptor.proto";
package golang.example.policy;
//extend google.protobuf.FieldOptions {
//  bool non_sensitive = 50000;
//}
option go_package = "/stream";

// https://polygon.io/sockets for forex
message PolygonMessageReceived
{
  string EventType = 1    [json_name="ev"];
  string Status = 2       [json_name="status"];
  string Message = 3      [json_name="message"];
};

message PolygonMessageSend
{
  string Action = 1       [json_name="action"];
  string Params = 2       [json_name="params"];
};


// https://polygon.io/sockets for forex
message PolygonForexQuote
{
  string EventType = 1      [json_name="ev"];
  string CurrencyPair = 2   [json_name="p"];
  string FXExchangeId = 3   [json_name="x"];
  double AskPrice = 4       [json_name="a"];
  double BidPrice = 5       [json_name="b"];
  int64 QuoteTimestamp = 6  [json_name="t"];
};

message PolygonForexAggregate
{
  string EventType = 1          [json_name="ev"];
  string CurrencyPair = 2       [json_name="pair"];
  double OpenPrice = 3          [json_name="o"];
  double ClosePrice = 4         [json_name="c"];
  double HighPrice = 5          [json_name="h"];
  double LowPrice = 6           [json_name="l"];
  int64 Volume = 7              [json_name="v"];
  int64 TickStartTimestamp = 8  [json_name="s"];
};

message PolygonForexCombined
{
  string EventType = 1                      [json_name="ev"];
  // Status Message
  string StatusStatus = 2                   [json_name="status"];
  string StatusMessage = 3                  [json_name="message"];
  // Quote Message
  string QuoteCurrencyPair = 4              [json_name="p"];
  string QuoteFXExchangeId = 5              [json_name="x"];
  double QuoteAskPrice = 6                  [json_name="a"];
  double QuoteBidPrice = 7                  [json_name="b"];
  int64  QuoteQuoteTimestamp = 8            [json_name="t"];
  // Aggregate Message
  string AggregateCurrencyPair = 9          [json_name="pair"];
  double AggregateOpenPrice = 10            [json_name="o"];
  double AggregateClosePrice = 11           [json_name="c"];
  double AggregateHighPrice = 12            [json_name="h"];
  double AggregateLowPrice = 13             [json_name="l"];
  int64  AggregateVolume = 14               [json_name="v"];
  int64  AggregateTickStartTimestamp = 15   [json_name="s"];
}


