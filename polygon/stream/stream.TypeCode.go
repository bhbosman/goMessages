// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0-devel
// 	protoc        v5.28.0
// source: polygon/stream.proto

//import "google/protobuf/descriptor.proto";

// TCVersion Generator: 1
package stream

import (
	stream "github.com/bhbosman/gocommon/stream"
	goerrors "github.com/bhbosman/goerrors"
	goprotoextra "github.com/bhbosman/goprotoextra"
	proto "google.golang.org/protobuf/proto"
)

// TypeCode generated from: "PolygonMessageReceived"
const PolygonMessageReceivedTypeCode uint32 = 2677976614

// TypeCode generated from: "PolygonMessageSend"
const PolygonMessageSendTypeCode uint32 = 669759784

// TypeCode generated from: "PolygonForexQuote"
const PolygonForexQuoteTypeCode uint32 = 4028859830

// TypeCode generated from: "PolygonForexAggregate"
const PolygonForexAggregateTypeCode uint32 = 321916057

// TypeCode generated from: "PolygonForexCombined"
const PolygonForexCombinedTypeCode uint32 = 3750958066

// true
// true
// false
// false
type PolygonMessageReceivedWrapper struct {
	goprotoextra.BaseMessageWrapper
	Data *PolygonMessageReceived
}

func (self *PolygonMessageReceivedWrapper) Message() interface{} {
	return self.Data
}

func (self *PolygonMessageReceivedWrapper) messageWrapper() interface{} {
	return self
}

func NewPolygonMessageReceivedWrapper(
	data *PolygonMessageReceived) *PolygonMessageReceivedWrapper {
	return &PolygonMessageReceivedWrapper{
		BaseMessageWrapper: goprotoextra.NewBaseMessageWrapper(),
		Data:               data,
	}
}

var _ = stream.Register(
	PolygonMessageReceivedTypeCode,
	stream.TypeCodeData{
		CreateMessage: func() proto.Message {
			return &PolygonMessageReceived{}
		},
		CreateWrapper: func(
			data proto.Message) (goprotoextra.IMessageWrapper, error) {
			if msg, ok := data.(*PolygonMessageReceived); ok {
				return NewPolygonMessageReceivedWrapper(
					msg), nil
			}
			return nil, goerrors.InvalidParam
		}})

// true
// true
// false
// false
type PolygonMessageSendWrapper struct {
	goprotoextra.BaseMessageWrapper
	Data *PolygonMessageSend
}

func (self *PolygonMessageSendWrapper) Message() interface{} {
	return self.Data
}

func (self *PolygonMessageSendWrapper) messageWrapper() interface{} {
	return self
}

func NewPolygonMessageSendWrapper(
	data *PolygonMessageSend) *PolygonMessageSendWrapper {
	return &PolygonMessageSendWrapper{
		BaseMessageWrapper: goprotoextra.NewBaseMessageWrapper(),
		Data:               data,
	}
}

var _ = stream.Register(
	PolygonMessageSendTypeCode,
	stream.TypeCodeData{
		CreateMessage: func() proto.Message {
			return &PolygonMessageSend{}
		},
		CreateWrapper: func(
			data proto.Message) (goprotoextra.IMessageWrapper, error) {
			if msg, ok := data.(*PolygonMessageSend); ok {
				return NewPolygonMessageSendWrapper(
					msg), nil
			}
			return nil, goerrors.InvalidParam
		}})

// true
// true
// false
// false
type PolygonForexQuoteWrapper struct {
	goprotoextra.BaseMessageWrapper
	Data *PolygonForexQuote
}

func (self *PolygonForexQuoteWrapper) Message() interface{} {
	return self.Data
}

func (self *PolygonForexQuoteWrapper) messageWrapper() interface{} {
	return self
}

func NewPolygonForexQuoteWrapper(
	data *PolygonForexQuote) *PolygonForexQuoteWrapper {
	return &PolygonForexQuoteWrapper{
		BaseMessageWrapper: goprotoextra.NewBaseMessageWrapper(),
		Data:               data,
	}
}

var _ = stream.Register(
	PolygonForexQuoteTypeCode,
	stream.TypeCodeData{
		CreateMessage: func() proto.Message {
			return &PolygonForexQuote{}
		},
		CreateWrapper: func(
			data proto.Message) (goprotoextra.IMessageWrapper, error) {
			if msg, ok := data.(*PolygonForexQuote); ok {
				return NewPolygonForexQuoteWrapper(
					msg), nil
			}
			return nil, goerrors.InvalidParam
		}})

// true
// true
// false
// false
type PolygonForexAggregateWrapper struct {
	goprotoextra.BaseMessageWrapper
	Data *PolygonForexAggregate
}

func (self *PolygonForexAggregateWrapper) Message() interface{} {
	return self.Data
}

func (self *PolygonForexAggregateWrapper) messageWrapper() interface{} {
	return self
}

func NewPolygonForexAggregateWrapper(
	data *PolygonForexAggregate) *PolygonForexAggregateWrapper {
	return &PolygonForexAggregateWrapper{
		BaseMessageWrapper: goprotoextra.NewBaseMessageWrapper(),
		Data:               data,
	}
}

var _ = stream.Register(
	PolygonForexAggregateTypeCode,
	stream.TypeCodeData{
		CreateMessage: func() proto.Message {
			return &PolygonForexAggregate{}
		},
		CreateWrapper: func(
			data proto.Message) (goprotoextra.IMessageWrapper, error) {
			if msg, ok := data.(*PolygonForexAggregate); ok {
				return NewPolygonForexAggregateWrapper(
					msg), nil
			}
			return nil, goerrors.InvalidParam
		}})

// true
// true
// false
// false
type PolygonForexCombinedWrapper struct {
	goprotoextra.BaseMessageWrapper
	Data *PolygonForexCombined
}

func (self *PolygonForexCombinedWrapper) Message() interface{} {
	return self.Data
}

func (self *PolygonForexCombinedWrapper) messageWrapper() interface{} {
	return self
}

func NewPolygonForexCombinedWrapper(
	data *PolygonForexCombined) *PolygonForexCombinedWrapper {
	return &PolygonForexCombinedWrapper{
		BaseMessageWrapper: goprotoextra.NewBaseMessageWrapper(),
		Data:               data,
	}
}

var _ = stream.Register(
	PolygonForexCombinedTypeCode,
	stream.TypeCodeData{
		CreateMessage: func() proto.Message {
			return &PolygonForexCombined{}
		},
		CreateWrapper: func(
			data proto.Message) (goprotoextra.IMessageWrapper, error) {
			if msg, ok := data.(*PolygonForexCombined); ok {
				return NewPolygonForexCombinedWrapper(
					msg), nil
			}
			return nil, goerrors.InvalidParam
		}})

func (self *PolygonMessageReceived) TypeCode() uint32 {
	return PolygonMessageReceivedTypeCode
}

func (self *PolygonMessageSend) TypeCode() uint32 {
	return PolygonMessageSendTypeCode
}

func (self *PolygonForexQuote) TypeCode() uint32 {
	return PolygonForexQuoteTypeCode
}

func (self *PolygonForexAggregate) TypeCode() uint32 {
	return PolygonForexAggregateTypeCode
}

func (self *PolygonForexCombined) TypeCode() uint32 {
	return PolygonForexCombinedTypeCode
}
