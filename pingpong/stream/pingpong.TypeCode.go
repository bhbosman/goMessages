// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0-devel
// 	protoc        v3.12.3
// source: pingpong/pingpong.proto

package stream

import (
	stream "github.com/bhbosman/gocommon/stream"
	goerrors "github.com/bhbosman/goerrors"
	goprotoextra "github.com/bhbosman/goprotoextra"
	proto "google.golang.org/protobuf/proto"
)

// TypeCode generated from: "Ping"
const PingTypeCode uint32 = 2246546115

// TypeCode generated from: "Pong"
const PongTypeCode uint32 = 2171268721

// TypeCode generated from: "TestMessageForPingPong"
const TestMessageForPingPongTypeCode uint32 = 1194946002

// true
// true
// false
// false
type PingWrapper struct {
	goprotoextra.BaseMessageWrapper
	Data *Ping
}

func (self *PingWrapper) Message() interface{} {
	return self.Data
}

func (self *PingWrapper) messageWrapper() interface{} {
	return self
}

func NewPingWrapper(
	data *Ping) *PingWrapper {
	return &PingWrapper{
		BaseMessageWrapper: goprotoextra.NewBaseMessageWrapper(),
		Data:               data,
	}
}

var _ = stream.Register(
	PingTypeCode,
	stream.TypeCodeData{
		CreateMessage: func() proto.Message {
			return &Ping{}
		},
		CreateWrapper: func(
			data proto.Message) (goprotoextra.IMessageWrapper, error) {
			if msg, ok := data.(*Ping); ok {
				return NewPingWrapper(
					msg), nil
			}
			return nil, goerrors.InvalidParam
		}})

// true
// true
// false
// false
type PongWrapper struct {
	goprotoextra.BaseMessageWrapper
	Data *Pong
}

func (self *PongWrapper) Message() interface{} {
	return self.Data
}

func (self *PongWrapper) messageWrapper() interface{} {
	return self
}

func NewPongWrapper(
	data *Pong) *PongWrapper {
	return &PongWrapper{
		BaseMessageWrapper: goprotoextra.NewBaseMessageWrapper(),
		Data:               data,
	}
}

var _ = stream.Register(
	PongTypeCode,
	stream.TypeCodeData{
		CreateMessage: func() proto.Message {
			return &Pong{}
		},
		CreateWrapper: func(
			data proto.Message) (goprotoextra.IMessageWrapper, error) {
			if msg, ok := data.(*Pong); ok {
				return NewPongWrapper(
					msg), nil
			}
			return nil, goerrors.InvalidParam
		}})

// true
// true
// false
// false
type TestMessageForPingPongWrapper struct {
	goprotoextra.BaseMessageWrapper
	Data *TestMessageForPingPong
}

func (self *TestMessageForPingPongWrapper) Message() interface{} {
	return self.Data
}

func (self *TestMessageForPingPongWrapper) messageWrapper() interface{} {
	return self
}

func NewTestMessageForPingPongWrapper(
	data *TestMessageForPingPong) *TestMessageForPingPongWrapper {
	return &TestMessageForPingPongWrapper{
		BaseMessageWrapper: goprotoextra.NewBaseMessageWrapper(),
		Data:               data,
	}
}

var _ = stream.Register(
	TestMessageForPingPongTypeCode,
	stream.TypeCodeData{
		CreateMessage: func() proto.Message {
			return &TestMessageForPingPong{}
		},
		CreateWrapper: func(
			data proto.Message) (goprotoextra.IMessageWrapper, error) {
			if msg, ok := data.(*TestMessageForPingPong); ok {
				return NewTestMessageForPingPongWrapper(
					msg), nil
			}
			return nil, goerrors.InvalidParam
		}})

func (self *Ping) TypeCode() uint32 {
	return PingTypeCode
}

func (self *Pong) TypeCode() uint32 {
	return PongTypeCode
}

func (self *TestMessageForPingPong) TypeCode() uint32 {
	return TestMessageForPingPongTypeCode
}
